{"version":3,"file":"MainForm-398ec44d.js","sources":["../../../../../../../typescript/utils/DOMWizard.ts","../../../../../../../typescript/fragments/abstract/InputFragment.ts","../../../../../../../typescript/fragments/inputs/Button.ts","../../../../../../../typescript/utils/misc.ts","../../../../../../../typescript/fragments/inputs/DateInput.ts","../../../../../../../typescript/fragments/mainForm/fields/Field.ts","../../../../../../../typescript/fragments/mainForm/fields/DateField.ts","../../../../../../../typescript/fragments/inputs/Checkbox.ts","../../../../../../../typescript/fragments/mainForm/fields/CheckboxField.ts","../../../../../../../typescript/fragments/inputs/Select.ts","../../../../../../../typescript/utils/api/options/endpointOptions.ts","../../../../../../../typescript/fragments/mainForm/fields/select/SelectField.ts","../../../../../../../typescript/fragments/mainForm/fields/select/BankField.ts","../../../../../../../typescript/utils/api/options/serviceBank.ts","../../../../../../../typescript/fragments/mainForm/fields/select/CarriersField.ts","../../../../../../../typescript/fragments/mainForm/fields/select/CountriesField.ts","../../../../../../../typescript/fragments/mainForm/fields/select/RoadsField.ts","../../../../../../../typescript/fragments/mainForm/fields/select/StationsField.ts","../../../../../../../typescript/fragments/mainForm/MainForm.ts","../../../../../../../typescript/utils/api/validation.ts"],"sourcesContent":["// Returns created element with specific tag name and attributes\nexport function createElement<T extends HTMLElement>(tagName: string, textContent: string = \"\", ...attributes: Attribute[]): T{\n    const element = document.createElement(tagName) as T\n    if(textContent) element.textContent = textContent\n    attributes?.forEach(attribute =>\n        element.setAttribute(\n            Object.keys(attribute)[0],\n            String(Object.values(attribute)[0])\n        )\n    )\n    return element\n}\n\nexport function createDivElement(...attributes: Attribute[]): HTMLDivElement{\n    return createElement(\"div\", \"\", ...attributes)\n}\n\nexport function createButtonElement(textContent: string = \"\", ...attributes: Attribute[]): HTMLButtonElement{\n    return createElement(\"button\", textContent, ...attributes)\n}\n\nexport function createInputElement(type: string, ...attributes: Attribute[]): HTMLInputElement{\n    return createElement(\"input\", \"\", {type}, ...attributes)\n}\n\nexport function createLabelElement(textContent: string = \"\", ...attributes: Attribute[]): HTMLLabelElement{\n    return createElement(\"label\", textContent, ...attributes)\n}\n\nexport function createImageElement(src: string = \"\", alt: string = \"not found\", ...attributes: Attribute[]): HTMLImageElement{\n    return createElement(\"img\", \"\", {src}, ...attributes)\n}\n\n// Removes all child elements\nexport function emptyElement(element: Element){\n    while(element.firstElementChild !== null)\n        element.firstElementChild.remove()\n}\n\n// Returns startName with serial number\nexport function generateUniqueId(startName: string = \"element\"){\n    let serialNumber = -1,\n        name: string\n\n    do name = startName +\"-\"+ serialNumber++\n    while (document.getElementById(name) !== null)\n\n    return name\n}","import {Fragment} from \"./Fragment\"\n\nexport abstract class InputFragment<V> extends Fragment{\n\n    private _value: V\n    private valueEventCallbacks: ((value?: V) => void)[] = []\n    get value(): V {\n        return this._value\n    }\n    protected set value(value: V){\n        this._value = value\n        this.valueEventCallbacks.forEach(callback => callback(value))\n    }\n\n    protected constructor(protected readonly location: FragmentLocation) { super(location) }\n\n    subscribe(onValueEvent: (value: V) => void, doNotRunOnInit: boolean = false){\n        this.valueEventCallbacks.push(onValueEvent)\n        if(!doNotRunOnInit)\n            onValueEvent(this.value)\n    }\n\n    protected debounce(callback: () => void, delay: number = 100): () => void {\n        let timeoutId: NodeJS.Timeout;\n        return () => {\n            clearTimeout(timeoutId)\n            timeoutId = setTimeout(callback, delay)\n        }\n    }\n}","import {createButtonElement, createImageElement} from \"../../utils/DOMWizard\"\nimport {InputFragment} from \"../abstract/InputFragment\"\n\nexport class Button extends InputFragment<void> {\n\n    private imageElement: HTMLImageElement\n\n    constructor(location: FragmentLocation) {\n        super(location)\n        this.core = createButtonElement()\n        this.core.addEventListener(\"click\", () => this.value = this.value)\n    }\n\n    set text(text: string){\n        this.core.textContent = text\n    }\n    get text(): string{\n        return this.core.textContent\n    }\n\n    set image(src: string|null){\n        this.imageElement.remove()\n        if(!!src) {\n            this.imageElement = createImageElement(src)\n            this.core.appendChild(this.imageElement)\n        }\n    }\n    get image(): string{\n        return this.imageElement?.src\n    }\n}","// Returns vararg items as a Set of the vararg items\nexport function setOf<T>(...items: T[]): Set<T>{\n    return new Set(items)\n}\n\n// Returns a Map of the vararg Pair entries\nexport function mapOf<K, V>(...entries: Pair<K, V>[]): Map<K, V>{\n    return new Map(entries.map(entry => [entry.first, entry.second]))\n}\n\n// Returns two arguments as a Pair object\nexport function pairOf<F, S>(first: F, second: S): Pair<F, S>{\n    return {first, second}\n}\n\n// Returns a basic number from gotten string if this is possible, or 0 if not\nexport function numberOf(word: string|number): number {\n    return isNaN(Number(word)) ? 0 : Number(word)\n}\n\n// Returns a Map consisting of the vararg Maps\nexport function concatMaps(...maps: Map<any, any>[]): Map<any, any>{\n    const buffer = []\n    maps.forEach(map => buffer.push(...map.entries()))\n    return new Map(buffer)\n}\n\n// Returns sorted by key Map\nexport function sortMap<K, V>(contentMap: Map<K, V>): Map<K, V>{\n    return new Map([...contentMap.entries()].sort(\n        (a : [K, V], b : [K, V]) : number => a[0] > b[0] ? 1 : a[0] < b[0] ? -1 : 0\n    ))\n}\n\nexport function filterMap<K, V>(map: Map<K, V>, filter: (value: V, key: K) => boolean): Map<K, V> {\n    return new Map(Array.from(map).filter(([key, value]) => filter(value, key)))\n}\n\nexport function stringify<T>(value: T): string{\n    if(value === null || value === undefined)\n        return \"\"\n    if(typeof value !== \"object\")\n        return String(value)\n    if(value instanceof Set)\n        return Array.from(value).join(\", \")\n    if (value instanceof Date)\n        return stringifyDate(value)\n\n    return value.toString()\n}\n\nexport function stringifyDate(date: Date): string {\n    const year = date.getFullYear(),\n        month = date.getMonth() + 1,\n        day = date.getDate()\n    return `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day}`\n}\n\nexport function javaSetToSet(javaSet: string): Set<string>{\n    return setOf(...splitJavaCollection(javaSet))\n}\n\nexport function javaMapToMap(javaMap: string): Map<string, string>{\n    return mapOf(\n        ...splitJavaCollection(javaMap)\n        .map(pair => {\n            const entry = pair.split(\"=\")\n            return pairOf(entry[0], entry[1])\n        })\n    )\n}\n\nexport function splitJavaCollection(javaCollection: string): string[]{\n    return javaCollection\n        .slice(1, -1) // Removing '{' and '}' in the both sides of the string\n        .split(\", \")\n}\n\nexport function setCursorToLoading() {\n    document.documentElement.style.cursor = 'wait'\n}\n\nexport function setCursorToDefault() {\n    document.documentElement.style.cursor = 'default'\n}","import {resolveCSS} from \"../../utils/resolver\"\nimport {numberOf, stringifyDate} from \"../../utils/misc\"\nimport {easepick} from \"@easepick/core\"\nimport {AmpPlugin} from \"@easepick/amp-plugin\"\nimport {RangePlugin} from \"@easepick/range-plugin\"\nimport {LockPlugin} from \"@easepick/lock-plugin\"\nimport {DateTime} from \"@easepick/datetime\"\nimport {InputFragment} from \"../abstract/InputFragment\"\nimport {createDivElement} from \"../../utils/DOMWizard\"\n\nresolveCSS(\"third-party/easepick\")\n\nexport default class DateInput extends InputFragment<DateRange>{\n\n    constructor(location: FragmentLocation, config: DateInputConfig) {\n        super(location)\n        this.core = createDivElement({class: \"datepicker\"})\n        if(!config.defaultRange)\n            config.defaultRange = [stringifyDate(new Date()), stringifyDate(new Date())]\n\n        this.value = config.defaultRange\n        applyPicker(this.core, config, dateRange => {\n            this.value = dateRange\n        })\n    }\n}\n\nfunction applyPicker(core: HTMLElement, config: DateInputConfig, onSelect: (dateRange: DateRange) => void){\n    new easepick.create({\n        element: core,\n        format: \"DD.MM.YYYY\",\n        calendars: 2,\n        grid: 2,\n        zIndex: 100,\n        plugins: [AmpPlugin, RangePlugin, LockPlugin],\n        lang: 'ru',\n        AmpPlugin: {\n            darkMode: false,\n            resetButton: true,\n            dropdown: {\n                minYear: 2010, maxYear: null, months: true, years: true\n            }\n        },\n        RangePlugin: {\n            startDate: new DateTime(config.defaultRange[0]),\n            endDate: new DateTime(config.defaultRange[1]),\n            locale: {\n                one: 'день',\n                few: 'дня',\n                many: 'дней'\n            },\n            delimiter: \" - \"\n        },\n        LockPlugin: {\n            minDays: 1,\n            maxDays: config.maxDays\n        },\n        css: [\n            \"css/third-party/easepick.css\"\n        ],\n        setup(picker) {\n            picker.on(\"select\", (e) => {\n                onSelect([stringifyDate(e.detail.start), stringifyDate(e.detail.end)])\n                setTimeout(() => picker.hide(), 10)\n            })\n        }\n    })\n}","import {InputFragment} from \"../../abstract/InputFragment\"\nimport {Fragment} from \"../../abstract/Fragment\"\n\nexport abstract class Field<T extends InputFragment<any>> extends Fragment{\n\n    input: T\n\n    protected constructor(location: FragmentLocation,\n                          InputClass: new(location: FragmentLocation, config: InputConfig) => T,\n                          inputConfig: InputConfig\n    ) {\n        super(location)\n        this.input = new InputClass({target: location.target, position: \"afterbegin\"}, inputConfig)\n    }\n}","import DateInput from \"../../inputs/DateInput\"\nimport {numberOf} from \"../../../utils/misc\"\nimport {Field} from \"./Field\";\n\nexport class DateField extends Field<DateInput>{\n\n    constructor(location: FragmentLocation, configElement: HTMLElement) {\n        super(location, DateInput, {\n            maxDays: numberOf(configElement.getAttribute(\"max-days\"))\n        })\n    }\n}","import {InputFragment} from \"../abstract/InputFragment\"\nimport {createDivElement, createInputElement, createLabelElement, generateUniqueId} from \"../../utils/DOMWizard\"\n\nexport default class Checkbox extends InputFragment<boolean>{\n\n    private checkBoxElement = createInputElement(\"checkbox\", {id: generateUniqueId(\"checkbox\")})\n    private labelElement    = createLabelElement(\"\", {for: this.checkBoxElement.id})\n\n    constructor(location: FragmentLocation, config: CheckboxInputConfig) {\n        super(location)\n        this.core = createDivElement({class: \"checkbox\"})\n        this.core.append(this.checkBoxElement, this.labelElement)\n        this.label = config.label\n        const updateValue=() => this.value = this.checkBoxElement.checked\n        updateValue()\n        this.checkBoxElement.addEventListener(\"change\", updateValue)\n    }\n\n    set label(name: string){\n        this.labelElement.textContent = name\n    }\n}","import Checkbox from \"../../inputs/Checkbox\"\nimport {Field} from \"./Field\";\n\nexport class CheckboxField extends Field<Checkbox>{\n    constructor(location: FragmentLocation, configElement: HTMLElement) {\n        super(location, Checkbox, {\n            label: configElement.getAttribute(\"label\")\n        })\n    }\n}","import {resolveCSS} from \"../../utils/resolver\"\nimport {InputFragment} from \"../abstract/InputFragment\"\nimport {createDivElement} from \"../../utils/DOMWizard\"\nimport {stringify} from \"../../utils/misc\"\n\nresolveCSS(\"third-party/virtual-select\")\n\n// When multiselect turned on then value is OptionKey else value is Set<OptionKey>\nexport default class Select extends InputFragment<OptionKey|Set<OptionKey>>{\n\n    constructor(location: FragmentLocation, config: SelectInputConfig) {\n        super(location)\n        this.core = createDivElement({class: \"select\"})\n        this.value = null\n        // this.value = config.multiple === true ? new Set() : \"\"\n        applyVirtualSelect(this.core, config)\n        this.core.addEventListener(\"change\", event => {\n            const newValue: OptionKey|Set<OptionKey> = config.multiple === true\n                // @ts-ignore !!! Resolved by html import !!!\n                ? new Set(typeof event.currentTarget.value === \"object\" ? event.currentTarget.value : [event.currentTarget.value])\n                // @ts-ignore !!! Resolved by html import !!!\n                : event.currentTarget.value\n            // Need to check real changes to prevent doubling\n            if(stringify(this.value) !== stringify(newValue))\n                this.value = newValue\n        })\n    }\n\n    protected optionsRetrievalCallbacks: Set<() => Promise<Options>> = new Set()\n\n    setOptions(options: Options){\n        const enabledOptionsCache: Set<OptionKey> = this.value === null ? new Set() : this.value instanceof Set ? this.value : new Set([this.value])\n        if(!!options && options.size > 0) {\n            const defaultOptions: Set<OptionKey> = new Set(options.get(\"default\")?.split(\",\"))\n            options.delete(\"default\")\n            // @ts-ignore !!! Resolved by html import !!!\n            this.core.setOptions(mapToVirtualSelectOptions(options))\n            this.setSelected(enabledOptionsCache.size > 0 ? enabledOptionsCache : defaultOptions)\n            // @ts-ignore !!! Resolved by html import !!!\n            this.core.enable()\n        }\n        else {\n            // @ts-ignore !!! Resolved by html import !!!\n            this.core.disable()\n            // @ts-ignore !!! Resolved by html import !!!\n            this.core.reset()\n            this.core.blur()\n        }\n    }\n\n    setSelected(values: Set<OptionKey> = new Set()){\n        // @ts-ignore !!! Resolved by html import !!!\n        this.core.setValue(Array.from(values))\n    }\n}\n\nfunction applyVirtualSelect(core: HTMLElement, config: SelectInputConfig){\n    // @ts-ignore !!! Resolved by html import !!!\n    VirtualSelect.init({\n        ele: core,\n        additionalClasses: \"multiselect\",\n        disabled: true,\n        autofocus: false,\n        markSearchResults: true,\n        optionsCount: 6,\n        multiple: config.multiple,\n        search: config.search,\n        hasOptionDescription: config.showCodes,\n        disableSelectAll: config.disableSelectAll,\n        maxValues: config.maxValues,\n        required: config.required,\n\n        placeholder: \"Выберите\",\n        noOptionsText: \"Варианты не найдены\",\n        noSearchResultsText: \"Результатов не найдено\",\n        selectAllText: \"Выбрать все\",\n        searchPlaceholderText: \"Поиск...\",\n        optionsSelectedText: \"(выбрано)\",\n        optionSelectedText: \"вариант выбран\",\n        allOptionsSelectedText: \"Все\",\n        clearButtonText: \"Очистить\",\n        moreText: \"ещё...\"\n    })\n}\n\nfunction mapToVirtualSelectOptions(map: Map<string, string>): any[]{\n    return [...map.entries()].map(entry => {\n        return {\n            label: entry[1],\n            value: entry[0],\n            alias: entry[0],\n            description: entry[0]\n        }\n    })\n}","import wretch from \"wretch\"\nimport {popupHttpDataError} from \"../../modal\"\nimport {setCursorToDefault, setCursorToLoading} from \"../../misc\"\n\nexport const fetchEndpointOptions = (url: string, headers?: Map<string, string>): Promise<Options> => {\n        setCursorToLoading()\n        return wretch(url)\n            .headers(headers ? Object.fromEntries(headers) : {})\n            .get()\n            .json(json => new Map<OptionKey, OptionLabel>(Object.entries(json)))\n            .catch(error => {\n                popupHttpDataError(error, \"Не удалось загрузить список опций\")\n                return new Map()\n            })\n            .finally(() => setCursorToDefault())\n}","import Select from \"../../../inputs/Select\"\nimport {concatMaps, javaSetToSet, numberOf, stringify} from \"../../../../utils/misc\"\nimport {InputFragment} from \"../../../abstract/InputFragment\"\nimport {fetchEndpointOptions} from \"../../../../utils/api/options/endpointOptions\"\nimport {Field} from \"../Field\";\n\nexport class SelectField extends Field<Select>{\n    constructor(location: FragmentLocation,\n                protected configElement: HTMLElement) {\n        const getBoolAttr=(attributeName: string): boolean => configElement.getAttribute(attributeName) === \"true\"\n        super(location, Select, {\n            maxValues: numberOf(configElement.getAttribute(\"max-values\")),\n            multiple: getBoolAttr(\"multiselect\"),\n            search: getBoolAttr(\"search\"),\n            showCodes: getBoolAttr(\"show-codes\"),\n            disableSelectAll: getBoolAttr(\"disable-select-all\"),\n            required: getBoolAttr(\"require\")\n        } as SelectInputConfig)\n    }\n\n    optionsRetrieving = false\n\n    private endpointConfigElement: HTMLElement = this.configElement.querySelector(\"endpoint\")\n    private endpointUrl: string = this.endpointConfigElement?.querySelector(\"url\")?.textContent\n    private endpointSubscribedFields: Map<string, Field<InputFragment<any>>|null> = new Map(this.endpointConfigElement ?\n        [...this.endpointConfigElement.querySelectorAll<HTMLElement>(\"subscriptions field\")]\n            .map(fieldElement => [fieldElement.textContent, null]) : null)\n\n    resolveSubscribedFields(getFieldFn: (key: string) => Field<InputFragment<any>>){\n        this.endpointSubscribedFields.forEach((_, key) => {\n            this.endpointSubscribedFields.set(key, getFieldFn(key))\n        })\n    }\n\n    listenSubscribedFields(){\n        if(!!this.endpointUrl) {\n            if (this.endpointSubscribedFields.size > 0) {\n                const headers: Map<string, string> = new Map()\n                this.endpointSubscribedFields.forEach(<T>(field: Field<InputFragment<any>>, key) =>\n                    field.input.subscribe(value => {\n                        headers.set(key, value != null ? stringify(value) : null)\n                        if (this.optionsRetrieving === true)\n                            this.retrieveOptionsPromise(\n                                \"endpoint\", fetchEndpointOptions(this.endpointUrl, headers))\n                    }))\n            } else this.retrieveOptionsPromise(\"endpoint\", fetchEndpointOptions(this.endpointUrl))\n        }\n    }\n\n    private optionsBuffer: Map<string, Options> = new Map()\n    protected retrieveOptionsPromise(optionsGroupName: string, promise: Promise<Options>){\n        promise.then(options => {\n            this.optionsBuffer.set(optionsGroupName, options)\n            this.input.setOptions(concatMaps(...this.optionsBuffer.values()))\n        })\n    }\n}","import {SelectField} from \"./SelectField\"\nimport {DateField} from \"../DateField\"\nimport {InputFragment} from \"../../../abstract/InputFragment\"\nimport {stringify} from \"../../../../utils/misc\";\nimport {Field} from \"../Field\";\n\nexport abstract class BankField extends SelectField{\n    protected constructor(location: FragmentLocation, configElement: HTMLElement) {\n        super(location, configElement)\n    }\n\n    protected bankConfigElement: HTMLElement = this.configElement.querySelector(\"bank\")\n\n    private dateFieldKey = this.bankConfigElement.querySelector(\"subscriptions date\")?.textContent\n    protected dateFieldSubscription: DateField = null\n\n    override resolveSubscribedFields(getFieldFn: (key: string) => Field<InputFragment<any>>) {\n        super.resolveSubscribedFields(getFieldFn)\n        this.dateFieldSubscription = getFieldFn(this.dateFieldKey)\n    }\n\n    protected resolveBankSubscribing(fetchOptionsFn: (...subscriptionValues: any[]) => Promise<Options>,\n                                     ...subscriptionFields: Field<InputFragment<any>>[]){\n\n        subscriptionFields.forEach(field =>\n            field.input.subscribe(() => {\n                let hasEmptyFieldValue = false\n                for (const subscription of subscriptionFields) {\n                    if (stringify(subscription.input.value).length <= 0) {\n                        hasEmptyFieldValue = true\n                        return\n                    }\n                }\n                if(!hasEmptyFieldValue) {\n                    this.retrieveOptionsPromise(\"bank\",\n                        fetchOptionsFn(...subscriptionFields.map(subscription => subscription.input.value)))\n                }\n            }))\n    }\n}","// This code exports four functions that can be used to fetch carriers, countries, roads, and stations from a service bank API.\n// The code also defines several interfaces for different types of objects.\nimport wretch from \"wretch\"\nimport {popupHttpDataError} from \"../../modal\";\nimport {setCursorToDefault, setCursorToLoading} from \"../../misc\";\nconst serviceBankURL = `${document.location.origin}/servicebank/getdata`\n\nexport const fetchCarriersByDate = (date: DateRange): Promise<Map<OptionKey, OptionLabel>> =>\n    fetchOptions(\"perList\", date,\n        (item) => [\n        // Each key consists of countryKey.carrierKey\n        `${item[\"gos\"]}.${item[\"skp\"]}`,\n        item[\"nazvp\"]\n        ],\n        null,null,\n        \"Не удалось загрузить список перевозчиков\")\n\nexport const fetchCountriesByDate = (date: DateRange, postSovietOnly: boolean): Promise<Options> =>\n    fetchOptions(\"gosList\", date,\n        (item) => [item[\"g_kod\"], item[\"g_name\"]],\n        {\"g_prsng\": \"1\"},\n        (item) => postSovietOnly ? item[\"g_prsng\"] == \"1\" : true,\n        \"Не удалось загрузить список государств\")\n\nexport const fetchRoadsByDateAndCountries = async (date: DateRange,\n                                                   countryValues: string[]): Promise<Options> =>\n    mergePromises(countryValues.map((countryValue) =>\n        fetchOptions(\"dorList\", date,\n            item => [\n                // Each key consists of countryKey.roadKey\n                `${countryValue}.${item[\"d_kod\"]}`,\n                item[\"d_name\"]\n            ],\n            {\n                \"gos\": countryValue\n            }, null,\n            \"Не удалось загрузить список дорог\"\n        )\n    ))\n\n\nexport const fetchStationsByDateAndRoads = async (date: DateRange,\n                                                  roadValues: string[],\n                                                  extraProperty?: Pair<string, string>): Promise<Options> =>\n    mergePromises(\n        Array.from(mapRoadsByCountryCodeAndRoadCodes(roadValues)).map(([countryValue, roadValues]) =>\n            fetchOptions(\"stanList\", date,\n                (item) => [item[\"stan\"], item[\"pnazv\"]],\n                {\n                    \"gos\": countryValue,\n                    \"dor\": roadValues.join(\",\"),\n                    // [extraProperty.first]: extraProperty.second,\n                        // [transferType === TransferType.BAGGAGE ? \"pr_bo\" : \"prpop\"]: \"1\"\n                    \"pr_bo\" :\"1\"\n                },null,\n                \"Не удалось загрузить список станций\")\n        )\n    )\n\n\nconst fetchOptions = (listName: string,\n                      date: DateRange,\n                      parseItemFn: (item: any) => [OptionKey, OptionLabel],\n                      extraProperties = {},\n                      filter?: (item: any) => boolean,\n                      errorFooter?: string): Promise<Options> => {\n    setCursorToLoading()\n    return wretch(serviceBankURL)\n        .post({\n            [listName]: [{\"data\": date[0], ...extraProperties}]\n        })\n        .json(json => {\n            const firstChildKey = Object.keys(json)[0]\n            return new Map((json[firstChildKey] as Array<any>)\n                .filter((item) => filter ? filter(item) : true)\n                .map((item) => parseItemFn(item)))\n        })\n        .catch(error => {\n            popupHttpDataError(error, errorFooter)\n            return new Map()\n        })\n        .finally(() => setCursorToDefault())\n}\n\nfunction mergePromises(promises: Promise<Map<OptionKey, OptionLabel>>[]): Promise<Options> {\n    return Promise.all(promises)\n        .then((results) => {\n            const mergedResult = new Map<OptionKey, OptionLabel>();\n            results.forEach((result) => {\n                result.forEach((value, key) => {\n                    mergedResult.set(key, value);\n                });\n            });\n            return mergedResult;\n        })\n        .catch((error) => {\n            // Обработка ошибок\n        }) as Promise<Options>\n}\n\n\nconst mapRoadsByCountryCodeAndRoadCodes = (roads: OptionKey[]) => {\n    const codesMap = new Map<OptionKey, string[]>()\n    for (const road of roads) {\n        const roadValueEntries = road.split(\".\"),\n            countryValue = roadValueEntries[0],\n            roadValue = roadValueEntries[1]\n\n        if (!codesMap.has(countryValue)) {\n            codesMap.set(countryValue, [])\n        }\n        codesMap.get(countryValue)?.push(roadValue)\n    }\n    return codesMap}","import {BankField} from \"./BankField\"\nimport {fetchCarriersByDate} from \"../../../../utils/api/options/serviceBank\"\nimport {createLabelElement} from \"../../../../utils/DOMWizard\";\n\nexport class CarriersField extends BankField{\n    constructor(location: FragmentLocation, configElement: HTMLElement) {\n        super(location,configElement)\n    }\n\n    override listenSubscribedFields() {\n        super.listenSubscribedFields()\n        this.resolveBankSubscribing(fetchCarriersByDate, this.dateFieldSubscription)\n    }\n}","import {BankField} from \"./BankField\"\nimport {fetchCountriesByDate} from \"../../../../utils/api/options/serviceBank\"\nimport {InputFragment} from \"../../../abstract/InputFragment\"\nimport {Field} from \"../Field\";\nimport {createLabelElement} from \"../../../../utils/DOMWizard\";\n\nexport class CountriesField extends BankField {\n\n    constructor(location: FragmentLocation, configElement: HTMLElement) {\n        super(location,configElement)\n    }\n\n    private postSovietKey = this.bankConfigElement.querySelector(\"subscriptions postsoviet\")?.textContent\n    private postSovietSubscription\n\n    override resolveSubscribedFields(getFieldFn: (key: string) => Field<InputFragment<any>>) {\n        super.resolveSubscribedFields(getFieldFn)\n        this.postSovietSubscription = getFieldFn(this.postSovietKey)\n    }\n\n    override listenSubscribedFields() {\n        super.listenSubscribedFields()\n        this.resolveBankSubscribing(fetchCountriesByDate, this.dateFieldSubscription, this.postSovietSubscription)\n    }\n}","import {BankField} from \"./BankField\"\nimport {InputFragment} from \"../../../abstract/InputFragment\"\nimport {fetchRoadsByDateAndCountries} from \"../../../../utils/api/options/serviceBank\"\nimport {Field} from \"../Field\"\nimport {createLabelElement} from \"../../../../utils/DOMWizard\"\n\nexport class RoadsField extends BankField {\n\n    constructor(location: FragmentLocation, configElement: HTMLElement) {\n        super(location,configElement)\n        location.target.appendChild(createLabelElement(\"this is roads\"))\n    }\n\n    private countriesKey = this.bankConfigElement.querySelector(\"subscriptions countries\")?.textContent\n    private countriesSubscription\n\n    override resolveSubscribedFields(getFieldFn: (key: string) => Field<InputFragment<any>>) {\n        super.resolveSubscribedFields(getFieldFn)\n        this.countriesSubscription = getFieldFn(this.countriesKey)\n    }\n\n    override listenSubscribedFields() {\n        super.listenSubscribedFields()\n        this.resolveBankSubscribing(fetchRoadsByDateAndCountries, this.dateFieldSubscription, this.countriesSubscription)\n    }\n}","import {BankField} from \"./BankField\"\nimport {InputFragment} from \"../../../abstract/InputFragment\"\nimport {fetchStationsByDateAndRoads} from \"../../../../utils/api/options/serviceBank\"\nimport {Field} from \"../Field\";\nimport {createLabelElement} from \"../../../../utils/DOMWizard\";\n\nexport class StationsField extends BankField {\n\n    constructor(location: FragmentLocation, configElement: HTMLElement) {\n        super(location,configElement)\n    }\n\n    private roadsKey = this.bankConfigElement.querySelector(\"subscriptions roads\")?.textContent\n    private roadsSubscription\n\n    override resolveSubscribedFields(getFieldFn: (key: string) => Field<InputFragment<any>>) {\n        super.resolveSubscribedFields(getFieldFn)\n        this.roadsSubscription = getFieldFn(this.roadsKey)\n    }\n\n    override listenSubscribedFields() {\n        super.listenSubscribedFields()\n        this.resolveBankSubscribing(fetchStationsByDateAndRoads, this.dateFieldSubscription, this.roadsSubscription)\n    }\n}","import {resolveCSS} from \"../../utils/resolver\"\nimport {Button} from \"../inputs/Button\"\nimport {InputFragment} from \"../abstract/InputFragment\"\nimport {Text} from \"../inputs/Text\"\nimport {DateField} from \"./fields/DateField\"\nimport {CheckboxField} from \"./fields/CheckboxField\"\nimport {SelectField} from \"./fields/select/SelectField\"\nimport {CarriersField} from \"./fields/select/CarriersField\"\nimport {CountriesField} from \"./fields/select/CountriesField\"\nimport {RoadsField} from \"./fields/select/RoadsField\"\nimport {StationsField} from \"./fields/select/StationsField\"\nimport {validate} from \"../../utils/api/validation\";\nimport {stringify} from \"../../utils/misc\";\nimport {Field} from \"./fields/Field\";\n\nresolveCSS(\"main-form\")\n\nexport default class MainForm extends InputFragment<MainFormValues>{\n\n    readonly confirmButton: Button\n\n    private readonly validationUrl: string\n\n    constructor(location: FragmentLocation) {\n        super(location)\n        this.core = location.target\n        this.value = new Map()\n        this.resolveFields()\n        this.resolveFieldsSubscriptions()\n        this.confirmButton = new Button({target: this.core, position: \"afterend\"})\n        this.confirmButton.addClass(\"confirm\")\n        this.validationUrl = this.core.getAttribute(\"validation-url\")\n    }\n\n    private fields: Map<string, Field<InputFragment<any>>> = new Map()\n\n    private resolveFields(){\n        this.core.querySelectorAll(\".section\").forEach(sectionElement => {\n            const sectionKey = sectionElement.getAttribute(\"key\")\n            sectionElement.querySelectorAll(\".field\").forEach(fieldElement => {\n                const fieldKey = fieldElement.getAttribute(\"key\")\n                this.fields.set(`${sectionKey}.${fieldKey}`, resolveField(fieldElement as HTMLElement))\n            })\n        })\n    }\n\n    private resolveFieldsSubscriptions(){\n        this.fields.forEach((field, key) => {\n            if(field instanceof SelectField) {\n                field.resolveSubscribedFields(key => this.fields.get(key))\n                field.listenSubscribedFields()\n                field.optionsRetrieving = true\n            }\n            field.input.subscribe(value => {\n                this.value.set(key, value)\n                this.validateFields()\n            })\n        })\n    }\n\n    private validateFields(){\n        if(!!this.validationUrl){\n            console.log(validate(this.validationUrl, Object.fromEntries(this.value)))\n        }\n    }\n}\n\nfunction resolveField(fieldElement: HTMLElement): Field<InputFragment<any>>{\n    const containsClass = (className: string) => fieldElement.classList.contains(className)\n    const location: FragmentLocation = {target: fieldElement}\n    const configElement: HTMLElement = fieldElement.querySelector(\"config\")\n    return containsClass(\"date\") ? new DateField(location, configElement)\n        : containsClass(\"checkbox\") ? new CheckboxField(location, configElement)\n            : resolveSelectField(location, configElement)\n}\n\nfunction resolveSelectField(location: FragmentLocation, configElement: HTMLElement): SelectField{\n    switch (configElement.querySelector(\"bank\")?.getAttribute(\"type\")){\n        case \"carriers\":  return new CarriersField(location, configElement)\n        case \"countries\": return new CountriesField(location, configElement)\n        case \"roads\":     return new RoadsField(location, configElement)\n        case \"stations\":  return new StationsField(location, configElement)\n    }\n    return new SelectField(location, configElement)\n}","import wretch from \"wretch\"\nimport {setCursorToDefault, setCursorToLoading} from \"../misc\"\nimport {popupHttpDataError} from \"../modal\"\n\nexport function validate(url: string, objectToValidate: object): Promise<boolean|object>{\n    setCursorToLoading()\n    return wretch(url)\n        .json(objectToValidate)\n        .post()\n        .forbidden(error => error.json)\n        .text(() => true)\n        .catch(error => {\n            popupHttpDataError(error, \"Ошибка валидации\")\n            return false\n        })\n        .finally(() => setCursorToDefault())\n}"],"names":["createElement","tagName","textContent","attributes","element","document","forEach","attribute","setAttribute","Object","keys","String","values","createDivElement","createLabelElement","generateUniqueId","startName","name","serialNumber","getElementById","InputFragment","Fragment","value","this","_value","valueEventCallbacks","callback","constructor","location","super","subscribe","onValueEvent","doNotRunOnInit","push","debounce","delay","timeoutId","clearTimeout","setTimeout","Button","core","createButtonElement","addEventListener","text","image","src","imageElement","remove","alt","createImageElement","appendChild","_a","numberOf","word","isNaN","Number","stringify","Set","Array","from","join","Date","stringifyDate","toString","date","year","getFullYear","month","getMonth","day","getDate","setCursorToLoading","documentElement","style","cursor","setCursorToDefault","resolveCSS","DateInput","config","class","defaultRange","onSelect","easepick","create","format","calendars","grid","zIndex","plugins","AmpPlugin","RangePlugin","LockPlugin","lang","darkMode","resetButton","dropdown","minYear","maxYear","months","years","startDate","DateTime","endDate","locale","one","few","many","delimiter","minDays","maxDays","css","setup","picker","on","e","detail","start","end","hide","applyPicker","dateRange","Field","InputClass","inputConfig","input","target","position","DateField","configElement","getAttribute","Checkbox","checkBoxElement","type","createInputElement","id","labelElement","for","append","label","updateValue","checked","CheckboxField","Select","optionsRetrievalCallbacks","VirtualSelect","init","ele","additionalClasses","disabled","autofocus","markSearchResults","optionsCount","multiple","search","hasOptionDescription","showCodes","disableSelectAll","maxValues","required","placeholder","noOptionsText","noSearchResultsText","selectAllText","searchPlaceholderText","optionsSelectedText","optionSelectedText","allOptionsSelectedText","clearButtonText","moreText","applyVirtualSelect","event","newValue","currentTarget","setOptions","options","enabledOptionsCache","size","defaultOptions","get","split","delete","entries","map","entry","alias","description","setSelected","enable","disable","reset","blur","setValue","fetchEndpointOptions","url","headers","wretch","fromEntries","json","Map","catch","error","popupHttpDataError","finally","SelectField","getBoolAttr","attributeName","optionsRetrieving","endpointConfigElement","querySelector","endpointUrl","_b","endpointSubscribedFields","querySelectorAll","fieldElement","optionsBuffer","resolveSubscribedFields","getFieldFn","_","key","set","listenSubscribedFields","field","retrieveOptionsPromise","optionsGroupName","promise","then","maps","buffer","concatMaps","BankField","bankConfigElement","dateFieldKey","dateFieldSubscription","resolveBankSubscribing","fetchOptionsFn","subscriptionFields","hasEmptyFieldValue","subscription","length","serviceBankURL","origin","fetchCarriersByDate","fetchOptions","item","fetchCountriesByDate","postSovietOnly","g_prsng","fetchRoadsByDateAndCountries","async","countryValues","mergePromises","countryValue","gos","fetchStationsByDateAndRoads","roadValues","extraProperty","mapRoadsByCountryCodeAndRoadCodes","dor","pr_bo","listName","parseItemFn","extraProperties","filter","errorFooter","post","assign","data","firstChildKey","promises","Promise","all","results","mergedResult","result","roads","codesMap","road","roadValueEntries","roadValue","has","CarriersField","CountriesField","postSovietKey","postSovietSubscription","RoadsField","countriesKey","countriesSubscription","StationsField","roadsKey","roadsSubscription","MainForm","fields","resolveFields","resolveFieldsSubscriptions","confirmButton","addClass","validationUrl","sectionElement","sectionKey","fieldKey","containsClass","className","classList","contains","resolveSelectField","resolveField","validateFields","objectToValidate","console","log","forbidden"],"mappings":"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"}