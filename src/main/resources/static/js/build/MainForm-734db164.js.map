{"version":3,"file":"MainForm-734db164.js","sources":["../../../../../../../typescript/utils/misc.ts","../../../../../../../typescript/entities/events.ts","../../../../../../../typescript/fragments/mainForm/section/fields/Field.ts","../../../../../../../typescript/fragments/mainForm/section/fields/Datepicker.ts","../../../../../../../typescript/fragments/mainForm/section/fields/Select.ts","../../../../../../../typescript/fragments/mainForm/section/fields/CheckBox.ts","../../../../../../../typescript/fragments/mainForm/section/Section.ts","../../../../../../../typescript/fragments/mainForm/section/CustomSection.ts","../../../../../../../typescript/fragments/mainForm/Form.ts","../../../../../../../typescript/fragments/mainForm/MainForm.ts"],"sourcesContent":["export function setOf<T>(...items: T[]): Set<T>{\n    return new Set(items)\n}\n\nexport function mapOf<K, V>(...pairs: Pair<K, V>[]): Map<K, V>{\n    return new Map(pairs.map(pair => [pair.first, pair.second]))\n}\n\nexport function pairOf<F, S>(first: F, second: S): Pair<F, S>{\n    return {first, second}\n}\n\nexport function numberOf(word: string): number {\n    return isNaN(Number(word)) ? 0 : Number(word)\n}\n\nexport function stringifyDate(date: Date): string {\n    const year = date.getFullYear(),\n        month = date.getMonth() + 1,\n        day = date.getDate()\n    return `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day}`\n}","export const updateEvent = new Event(\"update\")\nexport const mountEvent = new Event(\"mount\")","import {Section} from \"../Section\"\nimport {updateEvent} from \"../../../../entities/events\"\n\n\nexport abstract class Field implements Fragment{\n\n    abstract value: any\n\n    protected constructor(public core: HTMLElement,\n                          public section: Section){}\n\n    protected dispatchUpdate = () => this.core.dispatchEvent(updateEvent)\n\n    subscribeOnFields(keys: Set<Pair<SectionKey, FieldKey>>, onUpdate: (value) => void){\n        keys.forEach(pair => this.subscribeOnField(pair.first, pair.second, onUpdate))\n    }\n\n    subscribeOnField(sectionKey: SectionKey, fieldKey: FieldKey, onUpdate: (value) => void){\n\n        const field = this.findFieldOrThrowError(sectionKey, fieldKey)\n        field.core.addEventListener(updateEvent.type, () => onUpdate(field.value))\n    }\n\n    private findFieldOrThrowError(sectionKey: SectionKey, fieldKey: FieldKey): Field{\n        const section = this.section.form.sections.get(sectionKey)\n        if(!section) throw Error(`Не удалось найти секцию с ключом \"${sectionKey}\"`)\n        const field = section.fields.get(fieldKey)\n        if(!field) throw Error(`Не удалось найти поле с ключом \"${sectionKey}.${fieldKey}\"`)\n        return field\n    }\n}","import {resolveCSS} from \"../../../../utils/resolver\"\nimport {easepick} from \"@easepick/core\"\nimport {RangePlugin} from \"@easepick/range-plugin\"\nimport {LockPlugin} from \"@easepick/lock-plugin\"\nimport {AmpPlugin} from \"@easepick/amp-plugin\"\nimport {DateTime} from \"@easepick/datetime\"\nimport {stringifyDate, numberOf} from \"../../../../utils/misc\"\nimport {Field} from \"./Field\"\nimport {Section} from \"../Section\"\n\nresolveCSS(\"third-party/easepick\")\n\nexport default class Datepicker extends Field{\n\n    value: DateRange\n    constructor(public core: HTMLElement,\n                public section: Section) { super(core, section)\n\n        applyPicker(core, (startDate, endDate) => {\n            this.value = {\n                start: stringifyDate(startDate),\n                end: stringifyDate(endDate)\n            }\n            this.dispatchUpdate()\n        })\n    }\n}\n\nfunction applyPicker(pickerElement: HTMLElement, onSelect: (startDate, endDate) => void){\n    new easepick.create({\n        element: pickerElement,\n        format: \"DD.MM.YYYY\",\n        calendars: 2,\n        grid: 2,\n        zIndex: 100,\n        plugins: [RangePlugin, LockPlugin, AmpPlugin],\n        lang: 'ru',\n        AmpPlugin: {\n            darkMode: false,\n            resetButton: true,\n            dropdown: {\n                minYear: 2010, maxYear: null, months: true, years: true\n            }\n        },\n        RangePlugin: {\n            startDate: new DateTime(),\n            endDate: new DateTime(),\n            locale: {\n                one: 'день',\n                few: 'дня',\n                many: 'дней'\n            },\n            delimiter: \" - \"\n        },\n        LockPlugin: {\n            minDays: 1,\n            maxDays: numberOf(pickerElement.getAttribute(\"max-days\"))\n        },\n        css: [\n            \"css/third-party/easepick.css\"\n        ],\n        setup(picker) {\n            picker.on(\"select\", (e) => {\n                onSelect(e.detail.start, e.detail.end)\n                setTimeout(() => picker.hide(), 10)\n            })\n        }\n    })\n}","import {popupMessage} from \"../../../../utils/modal\"\nimport {Field} from \"./Field\"\nimport {Section} from \"../Section\"\n\nexport default class Select extends Field{\n\n    value\n\n    constructor(public core: HTMLElement,\n                public section: Section) { super(core, section)\n\n        section.form.onMount = () => {\n            this.subscribeOnField(\"period\", \"range\",\n                value => popupMessage(\"Выбрано\", value))\n        }\n    }\n}","import {Field} from \"./Field\"\nimport {Section} from \"../Section\"\n\nexport default class CheckBox extends Field{\n\n    value\n    constructor(public core: HTMLElement,\n                public section: Section) { super(core, section)\n    }\n}","import {Field} from \"./fields/Field\"\nimport {Form} from \"../Form\"\n\nexport abstract class Section implements Fragment{\n\n    fields: Map<FieldKey, Field> = new Map()\n\n    protected constructor(public core: HTMLElement,\n                          public form: Form) {}\n}","import Datepicker from \"./fields/Datepicker\"\nimport Select from \"./fields/Select\"\nimport CheckBox from \"./fields/CheckBox\"\nimport {Section} from \"./Section\"\nimport {Form} from \"../Form\"\nimport {Field} from \"./fields/Field\";\n\nexport class CustomSection extends Section{\n    constructor(public core: HTMLElement,\n                public form: Form) { super(core, form)\n        core.querySelectorAll<HTMLElement>(\".field\").forEach(fieldElement =>\n            this.fields.set(\n                fieldElement.getAttribute(\"key\"),\n                this.defineField(fieldElement)\n            )\n        )\n    }\n\n    private defineField(fieldCore: HTMLElement): Field{\n        if(fieldCore.classList.contains(\"datepicker\")) return new Datepicker(fieldCore, this)\n        if(fieldCore.classList.contains(\"select\")) return new Select(fieldCore, this)\n        if(fieldCore.classList.contains(\"checkbox\")) return new CheckBox(fieldCore, this)\n    }\n}","import {Section} from \"./section/Section\"\n\nexport class Form implements Fragment{\n\n    sections: Map<SectionKey, Section> = new Map()\n\n    protected constructor(public core: HTMLFormElement) {}\n\n    onMount: () => void\n\n    protected mount = () => this.onMount()\n}","import {resolveCSS} from \"../../utils/resolver\"\nimport {CustomSection} from \"./section/CustomSection\"\nimport {Form} from \"./Form\";\n\nresolveCSS(\"main-form\")\n\nexport default class MainForm extends Form{\n\n    constructor(public core: HTMLFormElement) { super(core)\n\n        core.querySelectorAll<HTMLElement>(\".section\").forEach(\n            sectionCore =>\n                this.sections.set(\n                    sectionCore.getAttribute(\"key\"),\n                    new CustomSection(sectionCore, this)\n                )\n        )\n\n        this.mount()\n    }\n}"],"names":["numberOf","word","isNaN","Number","stringifyDate","date","year","getFullYear","month","getMonth","day","getDate","updateEvent","Event","Field","constructor","core","section","this","dispatchUpdate","dispatchEvent","subscribeOnFields","keys","onUpdate","forEach","pair","subscribeOnField","first","second","sectionKey","fieldKey","field","findFieldOrThrowError","addEventListener","type","value","form","sections","get","Error","fields","resolveCSS","Datepicker","pickerElement","onSelect","super","startDate","endDate","start","end","easepick","create","element","format","calendars","grid","zIndex","plugins","RangePlugin","LockPlugin","AmpPlugin","lang","darkMode","resetButton","dropdown","minYear","maxYear","months","years","DateTime","locale","one","few","many","delimiter","minDays","maxDays","getAttribute","css","setup","picker","on","e","detail","setTimeout","hide","Select","onMount","popupMessage","CheckBox","Section","Map","CustomSection","querySelectorAll","fieldElement","set","defineField","fieldCore","classList","contains","Form","mount","MainForm","sectionCore"],"mappings":"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"}