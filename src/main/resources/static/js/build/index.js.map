{"version":3,"file":"index.js","sources":["../../../../../../../typescript/utils/resolver.ts","../../../../../../../typescript/fragments/abstract/Fragment.ts","../../../../../../../typescript/utils/modal.ts","../../../../../../../typescript/fragments/header/Header.ts","../../../../../../../typescript/utils/DOMWizard.ts","../../../../../../../typescript/fragments/abstract/InputFragment.ts","../../../../../../../typescript/fragments/inputs/Button.ts","../../../../../../../typescript/utils/misc.ts","../../../../../../../typescript/fragments/inputs/DateInput.ts","../../../../../../../typescript/fragments/mainForm/fields/Field.ts","../../../../../../../typescript/fragments/mainForm/fields/DateField.ts","../../../../../../../typescript/fragments/inputs/Checkbox.ts","../../../../../../../typescript/fragments/mainForm/fields/CheckboxField.ts","../../../../../../../typescript/fragments/inputs/Select.ts","../../../../../../../typescript/utils/api/options/endpointOptions.ts","../../../../../../../typescript/fragments/mainForm/fields/select/SelectField.ts","../../../../../../../typescript/fragments/mainForm/fields/select/BankField.ts","../../../../../../../typescript/utils/api/options/serviceBank.ts","../../../../../../../typescript/fragments/mainForm/fields/select/CarriersField.ts","../../../../../../../typescript/fragments/mainForm/fields/select/CountriesField.ts","../../../../../../../typescript/fragments/mainForm/fields/select/RoadsField.ts","../../../../../../../typescript/fragments/mainForm/fields/select/StationsField.ts","../../../../../../../typescript/fragments/mainForm/MainForm.ts","../../../../../../../typescript/utils/api/validation.ts","../../../../../../../typescript/fragments/abstract/ExistedFragment.ts","../../../../../../../typescript/fragments/report/Head.ts","../../../../../../../typescript/fragments/inputs/Text.ts","../../../../../../../typescript/fragments/report/content/Table.ts","../../../../../../../typescript/fragments/report/content/Chart.ts","../../../../../../../typescript/fragments/report/Body.ts","../../../../../../../typescript/fragments/report/ReportSlot.ts","../../../../../../../typescript/utils/api/reportsAPI.ts","../../../../../../../typescript/index.ts","../../../../../../../typescript/fragments/Application.ts"],"sourcesContent":["export function resolveCSS(name: string){\n    const source = `./css/${name}.css`\n    const headElement = document.querySelector(\"head\")\n    if(headElement.querySelector(`link[href=\"${source}\"]`) === null) {\n        const styleEl = document.createElement(\"link\")\n        styleEl.setAttribute(\"rel\", \"stylesheet\")\n        styleEl.setAttribute(\"href\", source)\n        headElement.appendChild(styleEl)\n    }\n}","export abstract class Fragment {\n\n    private coreElement: HTMLElement\n    private insertCallback: (() => void)|void\n\n    protected set core(element: HTMLElement){\n        if(!this.coreElement){\n            this.coreElement = element\n            this.insertCallback = !!this.insertCallback ? this.insertCallback() : null\n        }\n        else throw new Error(\"The core cannot be reassigned\")\n    }\n    get core(): typeof this.coreElement{\n        return this.coreElement\n    }\n\n    protected constructor(location: FragmentLocation) {\n        this.insertCallback = () => {\n            if(!!location.position)\n                location.target.insertAdjacentElement(location.position, this.coreElement)\n            else\n                location.target.replaceWith(this.coreElement)\n        }\n    }\n\n    set class(className: string){\n        this.core.className = className\n    }\n    get class(): string{\n        return this.core.className\n    }\n    addClass   =(className: string) => this.core.classList.add(className)\n    removeClass=(className: string) => this.core.classList.remove(className)\n    toggleClass=(className: string) => this.core.classList.toggle(className)\n}","import swal, {SweetAlertResult} from \"sweetalert2\"\nimport {type SweetAlertOptions, type SweetAlertPosition} from \"sweetalert2\"\nimport {resolveCSS} from \"./resolver\"\n\nresolveCSS(\"third-party/sweetalert2\")\n\nlet mouseEvent: MouseEvent\ndocument.addEventListener(\"mousemove\", event => mouseEvent = event)\n\nexport function popupMessage(title?: string, text?: string){\n    popupSweetModal({title, text})\n}\n\nexport function popupList(title?: string, list?: string[], footer?: string){\n    popupSweetModal({\n        title,\n        html:`<ul>${list.map(item => `<li>${item}</li>`).join(\"\")}</ul>`,\n        footer\n    })\n}\n\nexport function popupTimeoutAction(text?: string, confirmButtonText?: string, onConfirm?: () => void){\n    popupSweetModal({\n        text, confirmButtonText,\n        showConfirmButton: true,\n        timer: 3000,\n        timerProgressBar: true,\n        backdrop: false\n    }).then(result => {\n        if(result.isConfirmed)\n            onConfirm()\n    })\n}\n\nexport function popupError(title?: string, text?: string){\n    popupSweetModal({title, text, icon: \"error\"})\n}\n\nexport function popupHttpDataError(html?: string, footer?: string){\n    popupSweetModal({\n        title: \"Ошибка получения данных\",\n        icon: \"error\", html, footer\n    })\n}\n\nfunction popupSweetModal(options: SweetAlertOptions): Promise<SweetAlertResult>{\n    const position = getSweetMousePosition()\n    return swal.fire({\n        confirmButtonColor: \"var(--primary-color)\",\n        position,\n        showClass: {popup: 'animate__animated '+getAnimationShowClass(position)},\n        hideClass: {popup: 'animate__animated animate__zoomOut'},\n        showCloseButton: true,\n        allowEnterKey: false,\n        showConfirmButton: false,\n        ...options\n    })\n}\n\nfunction getSweetMousePosition(): SweetAlertPosition{\n    if(!mouseEvent) return \"center\"\n\n    const { clientX, clientY } = mouseEvent,\n        screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,\n        screenHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight,\n        horizontalPosition = clientX <= screenWidth / 3 ? 'left' : clientX >= (screenWidth / 3) * 2 ? 'right' : 'center',\n        verticalPosition = clientY <= screenHeight / 3 ? 'top' : clientY >= (screenHeight / 3) * 2 ? 'bottom' : 'center',\n        position = `${verticalPosition}-${horizontalPosition}`\n\n    return position === \"top-center\" ? \"top\" : position === \"bottom-center\" ? \"bottom\" : position as SweetAlertPosition\n}\n\nfunction getAnimationShowClass(position: SweetAlertPosition): string{\n    switch (position) {\n        case \"top-left\"     : return \"animate__fadeInTopLeft\"\n        case \"top\"          : return \"animate__fadeInDown\"\n        case \"top-right\"    : return \"animate__fadeInTopRight\"\n        case \"center-left\"  : return \"animate__fadeInLeft\"\n        case \"center\"       : return \"animate__fadeIn\"\n        case \"center-right\" : return \"animate__fadeInRight\"\n        case \"bottom-left\"  : return \"animate__fadeInBottomLeft\"\n        case \"bottom\"       : return \"animate__fadeInUp\"\n        case \"bottom-right\" : return \"animate__fadeInBottomRight\"\n        default             : return \"\"\n    }\n}","import {resolveCSS} from \"../../utils/resolver\"\nimport {popupList, popupTimeoutAction} from \"../../utils/modal\"\nimport {Fragment} from \"../abstract/Fragment\"\n\nexport default class Header extends Fragment{\n\n    constructor(location: FragmentLocation) {\n        super(location)\n        this.core = location.target\n        resolveCSS(\"header\")\n        this.activateResetButton()\n        this.activateInfoButton()\n        this.activateHelpButton()\n    }\n\n    private activateResetButton(){\n        this.activateButton(\"reset\", () => location.reload())\n    }\n\n    private activateInfoButton(){\n        this.activateButton(\"info\", button => {\n            console.log(button)\n            popupList(\n                \"Информация о приложении\",\n                [\n                    \"Версия программы: \"          + button.getAttribute(\"version\"),\n                    \"Дата последнего обновления: \"+ button.getAttribute(\"update-date\"),\n                    \"Технолог: \"                  + button.getAttribute(\"technologist-name\")\n                ])})\n    }\n\n    private activateHelpButton(){\n        this.activateButton(\"help\", button => {\n            popupTimeoutAction(\n                \"Руководство\",\n                \"Скачать инструкцию\",\n                () => downloadUserManual(button.getAttribute(\"instruction-path\"))\n            )\n        })\n    }\n\n    private activateButton(buttonClassName: string, onClick: (clickedButton?: HTMLButtonElement) => void){\n        const buttonElement: HTMLButtonElement = this.core.querySelector(\"button.\"+buttonClassName)\n        buttonElement.addEventListener(\"click\", event => onClick(buttonElement))\n    }\n}\n\nfunction downloadUserManual(href){\n    const link = document.createElement('a')\n    link.href = href\n    link.target = '_blank'\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n}","// Returns created element with specific tag name and attributes\nexport function createElement<T extends HTMLElement>(tagName: string, textContent: string = \"\", ...attributes: Attribute[]): T{\n    const element = document.createElement(tagName) as T\n    if(textContent) element.textContent = textContent\n    attributes?.forEach(attribute =>\n        element.setAttribute(\n            Object.keys(attribute)[0],\n            String(Object.values(attribute)[0])\n        )\n    )\n    return element\n}\n\nexport function createDivElement(...attributes: Attribute[]): HTMLDivElement{\n    return createElement(\"div\", \"\", ...attributes)\n}\n\nexport function createButtonElement(textContent: string = \"\", ...attributes: Attribute[]): HTMLButtonElement{\n    return createElement(\"button\", textContent, ...attributes)\n}\n\nexport function createInputElement(type: string, ...attributes: Attribute[]): HTMLInputElement{\n    return createElement(\"input\", \"\", {type}, ...attributes)\n}\n\nexport function createLabelElement(textContent: string = \"\", ...attributes: Attribute[]): HTMLLabelElement{\n    return createElement(\"label\", textContent, ...attributes)\n}\n\nexport function createImageElement(src: string = \"\", alt: string = \"not found\", ...attributes: Attribute[]): HTMLImageElement{\n    return createElement(\"img\", \"\", {src}, ...attributes)\n}\n\n// Removes all child elements\nexport function emptyElement(element: Element, withText: boolean = true){\n    const text = element.textContent\n    while(element.firstElementChild !== null)\n        element.firstElementChild.remove()\n\n    if(!withText) element.textContent = text\n}\n\n// Returns startName with serial number\nexport function generateUniqueId(startName: string = \"element\"){\n    let serialNumber = -1,\n        name: string\n\n    do name = startName +\"-\"+ serialNumber++\n    while (document.getElementById(name) !== null)\n\n    return name\n}","import {Fragment} from \"./Fragment\"\n\nexport abstract class InputFragment<V> extends Fragment{\n\n    private _value: V\n    private valueEventCallbacks: ((value?: V) => void)[] = []\n    get value(): V {\n        return this._value\n    }\n\n    protected set value(value: V){\n        this._value = value\n        this.valueEventCallbacks.forEach(callback => callback(value))\n    }\n\n    protected constructor(protected readonly location: FragmentLocation) { super(location) }\n\n    subscribe(onValueEvent: (value: V) => void, runOnInit: boolean = true){\n        this.valueEventCallbacks.push(onValueEvent)\n        if(runOnInit)\n            onValueEvent(this.value)\n    }\n\n    protected debounce(callback: () => void, delay: number = 100): () => void {\n        let timeoutId: NodeJS.Timeout;\n        return () => {\n            clearTimeout(timeoutId)\n            timeoutId = setTimeout(callback, delay)\n        }\n    }\n}","import {createButtonElement, createImageElement} from \"../../utils/DOMWizard\"\nimport {InputFragment} from \"../abstract/InputFragment\"\n\nexport class Button extends InputFragment<void> {\n\n    private imageElement: HTMLImageElement\n\n    constructor(location: FragmentLocation) {\n        super(location)\n        this.core = createButtonElement()\n        this.core.addEventListener(\"click\", () => {\n            if(this.isAvailable)\n                this.value = this.value\n        })\n    }\n\n    set isAvailable(available: boolean){\n        if(available)\n            this.core.classList.remove(\"unavailable\")\n        else this.core.classList.add(\"unavailable\")\n    }\n\n    get isAvailable(): boolean{\n        return !this.core.classList.contains(\"unavailable\")\n    }\n\n    set hint(hint: string){\n        this.core.setAttribute(\"title\", hint)\n    }\n\n    set text(text: string){\n        this.core.textContent = text\n    }\n    get text(): string{\n        return this.core.textContent\n    }\n\n    set image(src: string|null){\n        this.imageElement.remove()\n        if(!!src) {\n            this.imageElement = createImageElement(src)\n            this.core.appendChild(this.imageElement)\n        }\n    }\n    get image(): string{\n        return this.imageElement?.src\n    }\n}","// Returns vararg items as a Set of the vararg items\nexport function setOf<T>(...items: T[]): Set<T>{\n    return new Set(items)\n}\n\n// Returns a Map of the vararg Pair entries\nexport function mapOf<K, V>(...entries: Pair<K, V>[]): Map<K, V>{\n    return new Map(entries.map(entry => [entry.first, entry.second]))\n}\n\n// Returns two arguments as a Pair object\nexport function pairOf<F, S>(first: F, second: S): Pair<F, S>{\n    return {first, second}\n}\n\n// Returns a basic number from gotten string if this is possible, or 0 if not\nexport function numberOf(word: string|number): number {\n    return isNaN(Number(word)) ? 0 : Number(word)\n}\n\n// Returns a Map consisting of the vararg Maps\nexport function concatMaps(...maps: Map<any, any>[]): Map<any, any>{\n    const buffer = []\n    maps.forEach(map => buffer.push(...map.entries()))\n    return new Map(buffer)\n}\n\n// Returns sorted by key Map\nexport function sortMap<K, V>(contentMap: Map<K, V>): Map<K, V>{\n    return new Map([...contentMap.entries()].sort(\n        (a : [K, V], b : [K, V]) : number => a[0] > b[0] ? 1 : a[0] < b[0] ? -1 : 0\n    ))\n}\n\nexport function filterMap<K, V>(map: Map<K, V>, filter: (value: V, key: K) => boolean): Map<K, V> {\n    return new Map(Array.from(map).filter(([key, value]) => filter(value, key)))\n}\n\nexport function stringify<T>(value: T): string{\n    if(value === null || value === undefined)\n        return \"\"\n    if(typeof value !== \"object\")\n        return String(value)\n    if(value instanceof Set)\n        return Array.from(value).join(\", \")\n    if (value instanceof Date)\n        return stringifyDate(value)\n\n    return value.toString()\n}\n\nexport function stringifyDate(date: Date): string {\n    const year = date.getFullYear(),\n        month = date.getMonth() + 1,\n        day = date.getDate()\n    return `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day}`\n}\n\nexport function javaSetToSet(javaSet: string): Set<string>{\n    return setOf(...splitJavaCollection(javaSet))\n}\n\nexport function javaMapToMap(javaMap: string): Map<string, string>{\n    return mapOf(\n        ...splitJavaCollection(javaMap)\n        .map(pair => {\n            const entry = pair.split(\"=\")\n            return pairOf(entry[0], entry[1])\n        })\n    )\n}\n\nexport function splitJavaCollection(javaCollection: string): string[]{\n    return javaCollection\n        .slice(1, -1) // Removing '{' and '}' in the both sides of the string\n        .split(\", \")\n}\n\nexport function setCursorToLoading() {\n    document.documentElement.style.cursor = 'wait'\n}\n\nexport function setCursorToDefault() {\n    document.documentElement.style.cursor = 'default'\n}","import {resolveCSS} from \"../../utils/resolver\"\nimport {numberOf, stringifyDate} from \"../../utils/misc\"\nimport {easepick} from \"@easepick/core\"\nimport {AmpPlugin} from \"@easepick/amp-plugin\"\nimport {RangePlugin} from \"@easepick/range-plugin\"\nimport {LockPlugin} from \"@easepick/lock-plugin\"\nimport {DateTime} from \"@easepick/datetime\"\nimport {InputFragment} from \"../abstract/InputFragment\"\nimport {createDivElement} from \"../../utils/DOMWizard\"\n\nresolveCSS(\"third-party/easepick\")\n\nexport default class DateInput extends InputFragment<DateRange>{\n\n    constructor(location: FragmentLocation, config: DateInputConfig) {\n        super(location)\n        this.core = createDivElement({class: \"datepicker\"})\n        if(!config.defaultRange)\n            config.defaultRange = [stringifyDate(new Date()), stringifyDate(new Date())]\n\n        this.value = config.defaultRange\n        applyPicker(this.core, config, dateRange => {\n            this.value = dateRange\n        })\n    }\n}\n\nfunction applyPicker(core: HTMLElement, config: DateInputConfig, onSelect: (dateRange: DateRange) => void){\n    new easepick.create({\n        element: core,\n        format: \"DD.MM.YYYY\",\n        calendars: 2,\n        grid: 2,\n        zIndex: 100,\n        plugins: [AmpPlugin, RangePlugin, LockPlugin],\n        lang: 'ru',\n        AmpPlugin: {\n            darkMode: false,\n            resetButton: true,\n            dropdown: {\n                minYear: 2010, maxYear: null, months: true, years: true\n            }\n        },\n        RangePlugin: {\n            startDate: new DateTime(config.defaultRange[0]),\n            endDate: new DateTime(config.defaultRange[1]),\n            locale: {\n                one: 'день',\n                few: 'дня',\n                many: 'дней'\n            },\n            delimiter: \" - \"\n        },\n        LockPlugin: {\n            minDays: 1,\n            maxDays: config.maxDays\n        },\n        css: [\n            \"css/third-party/easepick.css\"\n        ],\n        setup(picker) {\n            picker.on(\"select\", (e) => {\n                onSelect([stringifyDate(e.detail.start), stringifyDate(e.detail.end)])\n                setTimeout(() => picker.hide(), 10)\n            })\n        }\n    })\n}","import {InputFragment} from \"../../abstract/InputFragment\"\nimport {Fragment} from \"../../abstract/Fragment\"\nimport {createLabelElement} from \"../../../utils/DOMWizard\";\n\nexport abstract class Field<T extends InputFragment<any>> extends Fragment{\n\n    readonly input: T\n\n    private readonly warningLabel: HTMLLabelElement\n\n    protected constructor(location: FragmentLocation,\n                          InputClass: new(location: FragmentLocation, config: InputConfig) => T,\n                          inputConfig: InputConfig\n    ) {\n        super(location)\n        this.core = location.target\n        this.input = new InputClass({target: location.target, position: \"beforeend\"}, inputConfig)\n        this.warningLabel = createLabelElement()\n        this.core.appendChild(this.warningLabel)\n    }\n\n    makeValid(){\n        this.warningLabel.textContent = \"\"\n        this.core.classList.remove(\"wrong\")\n    }\n\n    makeInvalid(message?: string){\n        this.warningLabel.textContent = message\n        this.core.classList.add(\"wrong\")\n    }\n}","import DateInput from \"../../inputs/DateInput\"\nimport {numberOf} from \"../../../utils/misc\"\nimport {Field} from \"./Field\";\n\nexport class DateField extends Field<DateInput>{\n\n    constructor(location: FragmentLocation, configElement: HTMLElement) {\n        super(location, DateInput, {\n            maxDays: numberOf(configElement.getAttribute(\"max-days\"))\n        })\n    }\n}","import {InputFragment} from \"../abstract/InputFragment\"\nimport {createDivElement, createInputElement, createLabelElement, generateUniqueId} from \"../../utils/DOMWizard\"\n\nexport default class Checkbox extends InputFragment<boolean>{\n\n    private checkBoxElement = createInputElement(\"checkbox\", {id: generateUniqueId(\"checkbox\")})\n    private labelElement    = createLabelElement(\"\", {for: this.checkBoxElement.id})\n\n    constructor(location: FragmentLocation, config: CheckboxInputConfig) {\n        super(location)\n        this.core = createDivElement({class: \"checkbox\"})\n        this.core.append(this.checkBoxElement, this.labelElement)\n        this.label = config.label\n        const updateValue=() => this.value = this.checkBoxElement.checked\n        updateValue()\n        this.checkBoxElement.addEventListener(\"change\", updateValue)\n    }\n\n    set label(name: string){\n        this.labelElement.textContent = name\n    }\n}","import Checkbox from \"../../inputs/Checkbox\"\nimport {Field} from \"./Field\"\n\nexport class CheckboxField extends Field<Checkbox>{\n\n    constructor(location: FragmentLocation, configElement: HTMLElement) {\n        super(location, Checkbox, {\n            label: configElement.getAttribute(\"label\")\n        })\n    }\n}","import {resolveCSS} from \"../../utils/resolver\"\nimport {InputFragment} from \"../abstract/InputFragment\"\nimport {createDivElement} from \"../../utils/DOMWizard\"\nimport {stringify} from \"../../utils/misc\"\n\nresolveCSS(\"third-party/virtual-select\")\n\n// When multiselect turned on then value is OptionKey else value is Set<OptionKey>\nexport default class Select extends InputFragment<OptionKey|Set<OptionKey>>{\n\n    constructor(location: FragmentLocation, config: SelectInputConfig) {\n        super(location)\n        this.core = createDivElement({class: \"select\"})\n        this.value = null\n        // this.value = config.multiple === true ? new Set() : \"\"\n        applyVirtualSelect(this.core, config)\n        this.core.addEventListener(\"change\", event => {\n            const newValue: OptionKey|Set<OptionKey> = config.multiple === true\n                // @ts-ignore !!! Resolved by html import !!!\n                ? new Set(typeof event.currentTarget.value === \"object\" ? event.currentTarget.value : [event.currentTarget.value])\n                // @ts-ignore !!! Resolved by html import !!!\n                : event.currentTarget.value\n            // Need to check real changes to prevent doubling\n            if(stringify(this.value) !== stringify(newValue))\n                this.value = newValue\n        })\n    }\n\n    protected optionsRetrievalCallbacks: Set<() => Promise<Options>> = new Set()\n\n    setOptions(options: Options){\n        const enabledOptionsCache: Set<OptionKey> = this.value === null ? new Set() : this.value instanceof Set ? this.value : new Set([this.value])\n        if(!!options && options.size > 0) {\n            const defaultOptions: Set<OptionKey> = new Set(options.get(\"default\")?.split(\",\"))\n            options.delete(\"default\")\n            // @ts-ignore !!! Resolved by html import !!!\n            this.core.setOptions(mapToVirtualSelectOptions(options))\n            this.setSelected(enabledOptionsCache.size > 0 ? enabledOptionsCache : defaultOptions)\n            // @ts-ignore !!! Resolved by html import !!!\n            this.core.enable()\n        }\n        else {\n            // @ts-ignore !!! Resolved by html import !!!\n            this.core.disable()\n            // @ts-ignore !!! Resolved by html import !!!\n            this.core.reset()\n            this.core.blur()\n        }\n    }\n\n    setSelected(values: Set<OptionKey> = new Set()){\n        // @ts-ignore !!! Resolved by html import !!!\n        this.core.setValue(Array.from(values))\n    }\n}\n\nfunction applyVirtualSelect(core: HTMLElement, config: SelectInputConfig){\n    // @ts-ignore !!! Resolved by html import !!!\n    VirtualSelect.init({\n        ele: core,\n        additionalClasses: \"multiselect\",\n        disabled: true,\n        autofocus: false,\n        markSearchResults: true,\n        optionsCount: 6,\n        multiple: config.multiple,\n        search: config.search,\n        hasOptionDescription: config.showCodes,\n        disableSelectAll: config.disableSelectAll,\n        maxValues: config.maxValues,\n\n        placeholder: \"Выберите\",\n        noOptionsText: \"Варианты не найдены\",\n        noSearchResultsText: \"Результатов не найдено\",\n        selectAllText: \"Выбрать все\",\n        searchPlaceholderText: \"Поиск...\",\n        optionsSelectedText: \"(выбрано)\",\n        optionSelectedText: \"вариант выбран\",\n        allOptionsSelectedText: \"Все\",\n        clearButtonText: \"Очистить\",\n        moreText: \"ещё...\"\n    })\n}\n\nfunction mapToVirtualSelectOptions(map: Map<string, string>): any[]{\n    return [...map.entries()].map(entry => {\n        return {\n            label: entry[1],\n            value: entry[0],\n            alias: entry[0],\n            description: entry[0]\n        }\n    })\n}","import wretch from \"wretch\"\nimport {popupHttpDataError} from \"../../modal\"\nimport {setCursorToDefault, setCursorToLoading} from \"../../misc\"\n\nexport const fetchEndpointOptions = (url: string, headers?: Map<string, string>): Promise<Options> => {\n        setCursorToLoading()\n        return wretch(url)\n            .headers(headers ? Object.fromEntries(headers) : {})\n            .get()\n            .json(json => new Map<OptionKey, OptionLabel>(Object.entries(json)))\n            .catch(error => {\n                popupHttpDataError(error, \"Не удалось загрузить список опций\")\n                return new Map()\n            })\n            .finally(() => setCursorToDefault())\n}","import Select from \"../../../inputs/Select\"\nimport {concatMaps, javaSetToSet, numberOf, stringify} from \"../../../../utils/misc\"\nimport {InputFragment} from \"../../../abstract/InputFragment\"\nimport {fetchEndpointOptions} from \"../../../../utils/api/options/endpointOptions\"\nimport {Field} from \"../Field\";\n\nexport class SelectField extends Field<Select>{\n    constructor(location: FragmentLocation,\n                protected configElement: HTMLElement) {\n        const getBoolAttr=(attributeName: string): boolean => configElement.getAttribute(attributeName) === \"true\"\n        super(location, Select, {\n            maxValues: numberOf(configElement.getAttribute(\"max-values\")),\n            multiple: getBoolAttr(\"multiselect\"),\n            search: getBoolAttr(\"search\"),\n            showCodes: getBoolAttr(\"show-codes\"),\n            disableSelectAll: getBoolAttr(\"disable-select-all\")\n        } as SelectInputConfig)\n    }\n\n    optionsRetrieving = false\n\n    private endpointConfigElement: HTMLElement = this.configElement.querySelector(\"endpoint\")\n    private endpointPath: string = this.endpointConfigElement?.querySelector(\"path\")?.textContent\n    private endpointSubscribedFields: Map<string, Field<InputFragment<any>>|null> = new Map(this.endpointConfigElement ?\n        [...this.endpointConfigElement.querySelectorAll<HTMLElement>(\"subscriptions field\")]\n            .map(fieldElement => [fieldElement.textContent, null]) : null)\n\n    resolveSubscribedFields(getFieldFn: (key: string) => Field<InputFragment<any>>){\n        this.endpointSubscribedFields.forEach((_, key) => {\n            this.endpointSubscribedFields.set(key, getFieldFn(key))\n        })\n    }\n\n    listenSubscribedFields(){\n        if(!!this.endpointPath) {\n            if (this.endpointSubscribedFields.size > 0) {\n                const headers: Map<string, string> = new Map()\n                this.endpointSubscribedFields.forEach(<T>(field: Field<InputFragment<any>>, key) =>\n                    field.input.subscribe(value => {\n                        headers.set(key, value != null ? stringify(value) : null)\n                        if (this.optionsRetrieving === true)\n                            this.retrieveOptionsPromise(\n                                \"endpoint\", fetchEndpointOptions(this.endpointPath, headers))\n                    }))\n            } else this.retrieveOptionsPromise(\"endpoint\", fetchEndpointOptions(this.endpointPath))\n        }\n    }\n\n    private optionsBuffer: Map<string, Options> = new Map()\n    protected retrieveOptionsPromise(optionsGroupName: string, promise: Promise<Options>){\n        promise.then(options => {\n            this.optionsBuffer.set(optionsGroupName, options)\n            this.input.setOptions(concatMaps(...this.optionsBuffer.values()))\n        })\n    }\n}","import {SelectField} from \"./SelectField\"\nimport {DateField} from \"../DateField\"\nimport {InputFragment} from \"../../../abstract/InputFragment\"\nimport {stringify} from \"../../../../utils/misc\";\nimport {Field} from \"../Field\";\n\nexport abstract class BankField extends SelectField{\n    protected constructor(location: FragmentLocation, configElement: HTMLElement) {\n        super(location, configElement)\n    }\n\n    protected bankConfigElement: HTMLElement = this.configElement.querySelector(\"bank\")\n\n    private dateFieldKey = this.bankConfigElement.querySelector(\"subscriptions date\")?.textContent\n    protected dateFieldSubscription: DateField = null\n\n    override resolveSubscribedFields(getFieldFn: (key: string) => Field<InputFragment<any>>) {\n        super.resolveSubscribedFields(getFieldFn)\n        this.dateFieldSubscription = getFieldFn(this.dateFieldKey)\n    }\n\n    protected resolveBankSubscribing(fetchOptionsFn: (...subscriptionValues: any[]) => Promise<Options>,\n                                     ...subscriptionFields: Field<InputFragment<any>>[]){\n\n        subscriptionFields.forEach(field =>\n            field.input.subscribe(value => {\n                for (const subscription of subscriptionFields) {\n                    if (subscription.input.value === null || stringify(subscription.input.value).length <= 0) {\n                        this.input.setOptions(null)\n                        return\n                    }\n                }\n                this.retrieveOptionsPromise(\"bank\",\n                    fetchOptionsFn(...subscriptionFields.map(subscription => subscription.input.value)))\n            }))\n    }\n}","// This code exports four functions that can be used to fetch carriers, countries, roads, and stations from a service bank API.\n// The code also defines several interfaces for different types of objects.\nimport wretch from \"wretch\"\nimport {popupHttpDataError} from \"../../modal\";\nimport {setCursorToDefault, setCursorToLoading} from \"../../misc\";\nconst serviceBankURL = `${document.location.origin}/servicebank/getdata`\n\nexport const fetchCarriersByDate = (date: DateRange): Promise<Map<OptionKey, OptionLabel>> =>\n    fetchOptions(\"perList\", date,\n        (item) => [\n        // Each key consists of countryKey.carrierKey\n        `${item[\"gos\"]}.${item[\"skp\"]}`,\n        item[\"nazvp\"]\n        ],\n        null,null,\n        \"Не удалось загрузить список перевозчиков\")\n\nexport const fetchCountriesByDate = (date: DateRange, postSovietOnly: boolean): Promise<Options> =>\n    fetchOptions(\"gosList\", date,\n        (item) => [item[\"g_kod\"], item[\"g_name\"]],\n        {\"g_prsng\": \"1\"},\n        (item) => postSovietOnly ? item[\"g_prsng\"] == \"1\" : true,\n        \"Не удалось загрузить список государств\")\n\nexport const fetchRoadsByDateAndCountries = async (date: DateRange,\n                                                   countryKeys: OptionKey|Set<OptionKey>): Promise<Options> => {\n    const fetchRoads=(countryKey) =>\n        fetchOptions(\"dorList\", date,\n            item => [\n                // Each key consists of countryKey.roadKey\n                `${countryKey}.${item[\"d_kod\"]}`,\n                item[\"d_name\"]\n            ],\n            {\n                \"gos\": countryKey\n            }, null,\n            \"Не удалось загрузить список дорог\"\n        )\n    if (countryKeys instanceof Set)\n        return mergePromises([...countryKeys].map(countryKey => fetchRoads(countryKey)))\n\n    return fetchRoads(countryKeys)\n}\n\n\nexport const fetchStationsByDateAndRoads = async (date: DateRange,\n                                                  roadKeys: OptionKey|Set<OptionKey>,\n                                                  extraProperty?: Pair<string, string>): Promise<Options> =>\n    mergePromises(\n        [...mapRoadsByCountryCodeAndRoadCodes(roadKeys)].map(([countryValue, roadValues]) =>\n            fetchOptions(\"stanList\", date,\n                (item) => [item[\"stan\"], item[\"pnazv\"]],\n                {\n                    \"gos\": countryValue,\n                    \"dor\": roadValues.join(\",\"),\n                    // [extraProperty.first]: extraProperty.second,\n                    // [transferType === TransferType.BAGGAGE ? \"pr_bo\" : \"prpop\"]: \"1\"\n                    \"pr_bo\": \"1\"\n                }, null,\n                \"Не удалось загрузить список станций\")\n        )\n    )\n\n\nconst fetchOptions = (listName: string,\n                      date: DateRange,\n                      parseItemFn: (item: any) => [OptionKey, OptionLabel],\n                      extraProperties = {},\n                      filter?: (item: any) => boolean,\n                      errorFooter?: string): Promise<Options> => {\n    setCursorToLoading()\n    return wretch(serviceBankURL)\n        .post({\n            [listName]: [{\"data\": date[0], ...extraProperties}]\n        })\n        .json(json => {\n            const firstChildKey = Object.keys(json)[0]\n            return new Map((json[firstChildKey] as Array<any>)\n                .filter((item) => filter ? filter(item) : true)\n                .map((item) => parseItemFn(item)))\n        })\n        .catch(error => {\n            popupHttpDataError(error, errorFooter)\n            return new Map()\n        })\n        .finally(() => setCursorToDefault())\n}\n\nfunction mergePromises(promises: Promise<Map<OptionKey, OptionLabel>>[]): Promise<Options> {\n    return Promise.all(promises)\n        .then((results) => {\n            const mergedResult = new Map<OptionKey, OptionLabel>();\n            results.forEach((result) => {\n                result.forEach((value, key) => {\n                    mergedResult.set(key, value);\n                });\n            });\n            return mergedResult;\n        })\n        .catch((error) => {\n            // Обработка ошибок\n        }) as Promise<Options>\n}\n\n\nfunction mapRoadsByCountryCodeAndRoadCodes (roads: OptionKey|Set<OptionKey>) {\n    const codesMap = new Map<OptionKey, string[]>()\n    const parseRoad = (road: OptionKey) => {\n        const roadValueEntries = road.split(\".\"),\n            countryValue = roadValueEntries[0],\n            roadValue = roadValueEntries[1]\n\n        if (!codesMap.has(countryValue)) {\n            codesMap.set(countryValue, [])\n        }\n        codesMap.get(countryValue)?.push(roadValue)\n    }\n    if(roads instanceof Set)\n        roads.forEach(road => parseRoad(road))\n    else parseRoad(roads)\n\n    return codesMap\n}","import {BankField} from \"./BankField\"\nimport {fetchCarriersByDate} from \"../../../../utils/api/options/serviceBank\"\nimport {createLabelElement} from \"../../../../utils/DOMWizard\";\n\nexport class CarriersField extends BankField{\n    constructor(location: FragmentLocation, configElement: HTMLElement) {\n        super(location,configElement)\n    }\n\n    override listenSubscribedFields() {\n        super.listenSubscribedFields()\n        this.resolveBankSubscribing(fetchCarriersByDate, this.dateFieldSubscription)\n    }\n}","import {BankField} from \"./BankField\"\nimport {fetchCountriesByDate} from \"../../../../utils/api/options/serviceBank\"\nimport {InputFragment} from \"../../../abstract/InputFragment\"\nimport {Field} from \"../Field\"\n\nexport class CountriesField extends BankField {\n\n    constructor(location: FragmentLocation, configElement: HTMLElement) {\n        super(location,configElement)\n    }\n\n    private postSovietKey = this.bankConfigElement.querySelector(\"subscriptions postsoviet\")?.textContent\n    private postSovietSubscription\n\n    override resolveSubscribedFields(getFieldFn: (key: string) => Field<InputFragment<any>>) {\n        super.resolveSubscribedFields(getFieldFn)\n        this.postSovietSubscription = getFieldFn(this.postSovietKey)\n    }\n\n    override listenSubscribedFields() {\n        super.listenSubscribedFields()\n        this.resolveBankSubscribing(fetchCountriesByDate, this.dateFieldSubscription, this.postSovietSubscription)\n    }\n}","import {BankField} from \"./BankField\"\nimport {InputFragment} from \"../../../abstract/InputFragment\"\nimport {fetchRoadsByDateAndCountries} from \"../../../../utils/api/options/serviceBank\"\nimport {Field} from \"../Field\"\n\nexport class RoadsField extends BankField {\n\n    constructor(location: FragmentLocation, configElement: HTMLElement) {\n        super(location,configElement)\n    }\n\n    private countriesKey = this.bankConfigElement.querySelector(\"subscriptions countries\")?.textContent\n    private countriesSubscription\n\n    override resolveSubscribedFields(getFieldFn: (key: string) => Field<InputFragment<any>>) {\n        super.resolveSubscribedFields(getFieldFn)\n        this.countriesSubscription = getFieldFn(this.countriesKey)\n    }\n\n    override listenSubscribedFields() {\n        super.listenSubscribedFields()\n        this.resolveBankSubscribing(fetchRoadsByDateAndCountries, this.dateFieldSubscription, this.countriesSubscription)\n    }\n}","import {BankField} from \"./BankField\"\nimport {InputFragment} from \"../../../abstract/InputFragment\"\nimport {fetchStationsByDateAndRoads} from \"../../../../utils/api/options/serviceBank\"\nimport {Field} from \"../Field\";\nimport {createLabelElement} from \"../../../../utils/DOMWizard\";\n\nexport class StationsField extends BankField {\n\n    constructor(location: FragmentLocation, configElement: HTMLElement) {\n        super(location,configElement)\n    }\n\n    private roadsKey = this.bankConfigElement.querySelector(\"subscriptions roads\")?.textContent\n    private roadsSubscription\n\n    override resolveSubscribedFields(getFieldFn: (key: string) => Field<InputFragment<any>>) {\n        super.resolveSubscribedFields(getFieldFn)\n        this.roadsSubscription = getFieldFn(this.roadsKey)\n    }\n\n    override listenSubscribedFields() {\n        super.listenSubscribedFields()\n        this.resolveBankSubscribing(fetchStationsByDateAndRoads, this.dateFieldSubscription, this.roadsSubscription)\n    }\n}","import {resolveCSS} from \"../../utils/resolver\"\nimport {Button} from \"../inputs/Button\"\nimport {InputFragment} from \"../abstract/InputFragment\"\nimport {Text} from \"../inputs/Text\"\nimport {DateField} from \"./fields/DateField\"\nimport {CheckboxField} from \"./fields/CheckboxField\"\nimport {SelectField} from \"./fields/select/SelectField\"\nimport {CarriersField} from \"./fields/select/CarriersField\"\nimport {CountriesField} from \"./fields/select/CountriesField\"\nimport {RoadsField} from \"./fields/select/RoadsField\"\nimport {StationsField} from \"./fields/select/StationsField\"\nimport {validateFieldValues} from \"../../utils/api/validation\";\nimport {stringify} from \"../../utils/misc\";\nimport {Field} from \"./fields/Field\";\n\nresolveCSS(\"main-form\")\n\nexport default class MainForm extends InputFragment<MainFormValues>{\n\n    readonly confirmButton: Button\n\n    private readonly validationPath: string\n\n    constructor(location: FragmentLocation) {\n        super(location)\n        this.core = location.target\n        this.value = new Map()\n        this.confirmButton = new Button({target: this.core, position: \"afterend\"})\n        this.confirmButton.addClass(\"confirm\")\n        this.confirmButton.text = this.core.getAttribute(\"confirm-button-text\")\n        this.resolveFields()\n        this.resolveFieldsSubscriptions()\n        this.validationPath = this.core.getAttribute(\"validation-path\")\n    }\n\n    private fields: Map<string, Field<InputFragment<any>>> = new Map()\n\n    private resolveFields(){\n        this.core.querySelectorAll(\".section\").forEach(sectionElement => {\n            const sectionKey = sectionElement.getAttribute(\"key\")\n            sectionElement.querySelectorAll(\".field\").forEach(fieldElement => {\n                const fieldKey = fieldElement.getAttribute(\"key\")\n                this.fields.set(`${sectionKey}.${fieldKey}`, resolveField(fieldElement as HTMLElement))\n            })\n        })\n    }\n\n    private resolveFieldsSubscriptions(){\n        this.fields.forEach((field, key) => {\n            if(field instanceof SelectField) {\n                field.resolveSubscribedFields(key => this.fields.get(key))\n                field.listenSubscribedFields()\n                field.optionsRetrieving = true\n            }\n            field.input.subscribe(value => {\n                this.value.set(key, value)\n                this.validateFields()\n            })\n        })\n    }\n\n    private validateFields(){\n        this.confirmButton.isAvailable = false\n        if(!!this.validationPath){\n            validateFieldValues(this.validationPath, this.value).then(result => {\n                this.fields.forEach(field => field.makeValid())\n                if(result instanceof Map)\n                    result.forEach((message, fieldKey) => this.fields.get(fieldKey).makeInvalid(message))\n                else if(result === true)\n                    this.confirmButton.isAvailable = true\n            })\n        }\n    }\n}\n\nfunction resolveField(fieldElement: HTMLElement): Field<InputFragment<any>>{\n    const containsClass = (className: string) => fieldElement.classList.contains(className)\n    const location: FragmentLocation = {target: fieldElement}\n    const configElement: HTMLElement = fieldElement.querySelector(\"config\")\n    return containsClass(\"date\") ? new DateField(location, configElement)\n        : containsClass(\"checkbox\") ? new CheckboxField(location, configElement)\n            : resolveSelectField(location, configElement)\n}\n\nfunction resolveSelectField(location: FragmentLocation, configElement: HTMLElement): SelectField{\n    switch (configElement.querySelector(\"bank\")?.getAttribute(\"type\")){\n        case \"carriers\":  return new CarriersField(location, configElement)\n        case \"countries\": return new CountriesField(location, configElement)\n        case \"roads\":     return new RoadsField(location, configElement)\n        case \"stations\":  return new StationsField(location, configElement)\n    }\n    return new SelectField(location, configElement)\n}","import wretch from \"wretch\"\nimport {setCursorToDefault, setCursorToLoading} from \"../misc\"\nimport {popupHttpDataError} from \"../modal\"\n\nexport function validateFieldValues(path: string, fieldValues: MainFormValues): Promise<boolean|Map<OptionKey, string>>{\n    setCursorToLoading()\n    return wretch(path)\n        .json(Object.fromEntries(fieldValues))\n        .post()\n        .forbidden(error => new Map(Object.entries(error.json)))\n        .text(() => true)\n        .catch(error => {\n            popupHttpDataError(error, \"Ошибка валидации\")\n            return false\n        })\n        .finally(() => setCursorToDefault())\n}","import {Fragment} from \"./Fragment\"\n\nexport abstract class ExistedFragment extends Fragment{\n    protected constructor(core: HTMLElement) {\n        super({target: core})\n        this.core = core\n    }\n}","import {ExistedFragment} from \"../abstract/ExistedFragment\"\nimport {emptyElement} from \"../../utils/DOMWizard\";\nimport {Button} from \"../inputs/Button\";\n\nexport class Head extends ExistedFragment{\n\n    private readonly originTitleText: string\n    private readonly titleElement: HTMLParagraphElement\n    private readonly buttonsElement: HTMLDivElement\n\n    constructor(core: HTMLDivElement) {\n        super(core)\n        this.titleElement = core.querySelector(\"p\")\n        this.originTitleText = this.titleElement.textContent\n        this.buttonsElement = core.querySelector(\"div.buttons\")\n    }\n\n    set title(text: string){\n        this.titleElement.textContent = text\n    }\n\n    applyGraphButton(): Button{\n        const button = this.applyButton(\"img/graph.svg\", \"Графическое представление\")\n        return button\n    }\n\n    applyExportButton(): Button{\n        const button = this.applyButton(\"img/download.svg\", \"Экспортировать\")\n        return button\n    }\n\n    applyCollapseButton(): Button{\n        const button = this.applyButton(\"img/collapse.svg\", \"Свернуть\")\n        return button\n    }\n\n    applyFullscreenButton(): Button{\n        const button = this.applyButton(\"img/expand.svg\", \"Развернуть на весь экран\")\n        return button\n    }\n\n    applyToTopButton(): Button{\n        const button = this.applyButton(\"img/to_top.svg\", \"Наверх\")\n        return button\n    }\n\n    private applyButton(image: string, hint: string): Button {\n        const button = new Button({target: this.buttonsElement, position: \"beforeend\"})\n        button.image = image\n        button.hint = hint\n        return button\n    }\n\n    reset(){\n        this.title = this.originTitleText\n        emptyElement(this.buttonsElement)\n    }\n}","import {createButtonElement, createDivElement, createInputElement} from \"../../utils/DOMWizard\"\nimport {InputFragment} from \"../abstract/InputFragment\"\n\nexport class Text extends InputFragment<string>{\n\n    private textInputElement    = createInputElement(\"text\")\n    private resetButtonElement = createButtonElement( \"❌\",{class: \"reset\"})\n\n    constructor(location: FragmentLocation) {\n        super(location)\n        this.core = createDivElement({class: \"text\"})\n        this.core.append(this.textInputElement, this.resetButtonElement)\n        this.textInputElement.addEventListener(\"input\",\n            this.debounce(() => this.value = this.textInputElement.value)\n        )\n        this.resetButtonElement.addEventListener(\"click\",\n            () => this.value = this.textInputElement.value = \"\"\n        )\n    }\n}","import {Fragment} from \"../../abstract/Fragment\"\nimport {emptyElement, createElement} from \"../../../utils/DOMWizard\"\nimport {concatMaps, filterMap, numberOf, sortMap} from \"../../../utils/misc\"\nimport {Text} from \"../../inputs/Text\"\n\nexport class Table extends Fragment{\n\n    protected thead: HTMLTableSectionElement = createElement(\"thead\")\n    protected tbody: HTMLTableSectionElement = createElement(\"tbody\")\n    protected tfoot: HTMLTableSectionElement = createElement(\"tfoot\")\n\n    protected bodyContent: TableBody = new Map()\n\n    // Key is filtrated column, value is filter text value\n    protected filtersMap: Map<number, string> = new Map()\n\n    constructor(location: FragmentLocation, model?: TableModel) {\n        super(location)\n        this.core = createElement(\"table\")\n        this.core.append(this.thead, this.tfoot, this.tbody)\n        if(model){\n            this.head = model.head\n            this.body = model.body\n            if(model.total)\n                this.total = model.total.length > 0 ? model.total : this.calculateTotal()\n        }\n    }\n\n    set head(head: TableHead){\n        emptyElement(this.thead)\n        head.forEach(headRow => {\n            let columnId: number = 0\n            this.thead.appendChild(\n                this.createHTMLRow(headRow.map(\n                    headCell => {\n                        const htmlHeadCell = this.createHTMLHeadCell(headCell.content, headCell.rowSpan, headCell.colSpan)\n                        if (headCell.hasFilter === true) this.setFilter(htmlHeadCell, columnId)\n                        columnId = columnId + htmlHeadCell.colSpan\n                        return htmlHeadCell\n                    })\n                )\n            )\n        })\n    }\n\n    set body(bodyContent: TableBody){\n        emptyElement(this.tbody)\n        this.bodyContent = new Map()\n        this.addBody(bodyContent)\n    }\n\n    private addBody(bodyContent: TableBody){\n        this.bodyContent = concatMaps(this.bodyContent, bodyContent)\n        sortMap(this.filterBodyContent(this.bodyContent)).forEach((valueCells, primaryCells) =>\n            this.tbody.append(this.createHTMLRow(\n                primaryCells.map(cell => this.createHTMLCell(cell, \"primary\")).concat(\n                    valueCells.map(cell => this.createHTMLCell(String(cell))))))\n        )\n        this.groupPrimaryCells()\n    }\n\n    set total(total: ValueCell[]){\n        this.tfoot.querySelector(\".total\")?.remove()\n        this.tfoot.appendChild(this.createHTMLTotalRow(total.map(value => this.createHTMLCell(value))))\n    }\n\n    calculateTotal(): ValueCell[]{\n        const total: ValueCell[] = []\n        this.bodyContent.forEach(values=> values.forEach((value, i) => {\n            total[i] = total[i] ? numberOf(total[i]) + numberOf(value) : value\n        }))\n        return total\n    }\n\n    private createHTMLTotalRow(htmlCells: HTMLTableCellElement[]): HTMLTableRowElement{\n        const primaryTotalCell = this.createHTMLCell(\"Всего\")\n        primaryTotalCell.colSpan = this.tbody.querySelector(\"tr\").querySelectorAll(\".primary\").length\n        return this.createHTMLRow([primaryTotalCell, ...htmlCells], \"total\")\n    }\n\n    private createHTMLRow(htmlCells: HTMLTableCellElement[], cssClass?: string): HTMLTableRowElement{\n        const tr: HTMLTableRowElement = createElement(\"tr\", \"\", {class: cssClass})\n        tr.append(...htmlCells)\n        return tr\n    }\n\n    private createHTMLHeadCell(cellContent: string, rowSpan: number = 1, colSpan: number = 1): HTMLTableCellElement{\n        return createElement(\"th\", cellContent, {rowspan: rowSpan}, {colspan: colSpan})\n    }\n\n    private createHTMLCell(cellContent: string|number, cssClass?: string): HTMLTableCellElement {\n        return createElement(\"td\", String(cellContent), {class: cssClass})\n    }\n\n    private setFilter(htmlHeadCell: HTMLTableCellElement, targetColumnId: number){\n        const filterFragment = new Text({target: htmlHeadCell})\n        filterFragment.subscribe(value => {\n            this.filtersMap.set(targetColumnId, value)\n            this.body = this.bodyContent\n        })\n    }\n\n    private filterBodyContent(bodyContent: TableBody): TableBody{\n        return filterMap(bodyContent, (valueCells, primaryCells) => {\n            const cellTexts = primaryCells.concat(valueCells.map(v => String(v)))\n            for (let i = 0; i < cellTexts.length; i++) {\n                const filterText = this.filtersMap.get(i)\n                if(!cellTexts[i].toLowerCase().includes(filterText ? filterText.toLowerCase() : \"\"))\n                    return false\n            }\n            return true\n        })\n    }\n\n    private groupPrimaryCells(startHtmlRow: HTMLTableRowElement = this.tbody.firstElementChild as HTMLTableRowElement,\n                              endHtmlRow: HTMLTableRowElement = this.tbody.lastElementChild as HTMLTableRowElement,\n                              nesting: number = 0){\n        if(startHtmlRow === endHtmlRow) return\n        const primaryHtmlCell = startHtmlRow.cells[nesting]\n        if(!primaryHtmlCell?.classList?.contains(\"primary\")) return\n        let nextHtmlRow = startHtmlRow\n        do {\n            nextHtmlRow = nextHtmlRow.nextElementSibling as HTMLTableRowElement\n            const nextPrimaryHtmlCell = nextHtmlRow.cells[0]\n            if(primaryHtmlCell.textContent === nextPrimaryHtmlCell.textContent){\n                primaryHtmlCell.rowSpan++\n                nextPrimaryHtmlCell.hidden = true\n            } else {\n                this.groupPrimaryCells(startHtmlRow, nextHtmlRow, nesting + 1)\n                this.groupPrimaryCells(nextHtmlRow, endHtmlRow)\n                return\n            }\n        }\n        while (nextHtmlRow !== endHtmlRow)\n    }\n}","import {Fragment} from \"../../abstract/Fragment\"\n\nexport class Chart extends Fragment{\n    constructor(location: FragmentLocation, model?: ChartModel) {\n        super(location)\n    }\n}","import {ExistedFragment} from \"../abstract/ExistedFragment\"\nimport {createDivElement, emptyElement} from \"../../utils/DOMWizard\";\nimport {Table} from \"./content/Table\";\nimport {Chart} from \"./content/Chart\";\n\nexport class Body extends ExistedFragment{\n\n    private _collapsed: boolean = false\n    private tableModelCache: TableModel\n    private chartsModelCache: ChartModel[]\n\n    constructor(core: HTMLDivElement) {\n        super(core)\n    }\n\n    showLoading(){\n        this.core.appendChild(createDivElement({class: \"loading\"}))\n    }\n\n    applyTable(model: TableModel): Table{\n        this.tableModelCache = model\n        return new Table({target: this.core, position: \"beforeend\"}, model)\n    }\n\n    applyCharts(models: ChartModel[]): Chart[]{\n        this.chartsModelCache = models\n        const chartsWrapper = createDivElement({class: \"charts\"})\n        this.core.appendChild(chartsWrapper)\n        return models.map(model => new Chart({target: chartsWrapper, position: \"afterbegin\"}, model))\n    }\n\n    get collapsed(): typeof this._collapsed{\n        return this._collapsed\n    }\n\n    set collapsed(collapsed: typeof this._collapsed){\n        this._collapsed = collapsed\n        if(this.collapsed) emptyElement(this.core)\n        else {\n            if(this.tableModelCache) this.applyTable(this.tableModelCache)\n            if(this.chartsModelCache) this.applyCharts(this.chartsModelCache)\n        }\n    }\n\n    toggleCollapse=() => this.collapsed = !this.collapsed\n\n\n    reset(){\n        this.tableModelCache = undefined\n        this.chartsModelCache = undefined\n        emptyElement(this.core)\n    }\n}","import {Fragment} from \"../abstract/Fragment\"\nimport {createDivElement, emptyElement} from \"../../utils/DOMWizard\"\nimport {fetchReport} from \"../../utils/api/reportsAPI\"\nimport {Head} from \"./Head\"\nimport {Body} from \"./Body\"\n\nexport default class ReportSlot extends Fragment{\n\n    protected readonly path: string\n    protected readonly head: Head\n    protected readonly body: Body\n\n    constructor(public location: FragmentLocation) {\n        super(location)\n        this.core = location.target\n        this.path = this.core.getAttribute(\"path\")\n        this.head = new Head(this.core.querySelector(\".head\"))\n        this.body = new Body(this.core.querySelector(\".body\"))\n    }\n\n    applyNewReportByValues(values: FormValues){\n        this.reset()\n        this.body.showLoading()\n        fetchReport(this.path, values).then(model => this.report = model)\n    }\n\n    private set report(model: ReportModel){\n        this.reset()\n        if(model.title)\n            this.head.title = model.title\n        if(model.table)\n            this.body.applyTable(model.table)\n        if(model.charts)\n            this.body.applyCharts(model.charts)\n\n        this.applyButtons(!!model.table, !!model.charts)\n    }\n\n    private applyButtons(hasTable: boolean, hasCharts: boolean){\n        this.head.applyCollapseButton().subscribe(() => this.body.toggleCollapse())\n        this.head.applyFullscreenButton()\n        this.head.applyToTopButton()\n    }\n\n    private reset(){\n        this.head.reset()\n        this.body.reset()\n    }\n}","import wretch from \"wretch\"\nimport {setCursorToDefault, setCursorToLoading} from \"../misc\"\nimport {popupHttpDataError} from \"../modal\"\n\nexport const fetchReport = (path: string, mainFormValues: FormValues): Promise<Report> => {\n    setCursorToLoading()\n    return wretch(path)\n        .post(mainFormValues)\n        .json(json => json)\n        .catch(error => popupHttpDataError(error, \"Не удалось загрузить отчёт\"))\n        .finally(setCursorToDefault)\n}\n\nexport const convertReportToXlsx=(report) => {\n    setCursorToLoading()\n    wretch(\"converter/xlsx\")\n        .post(report)\n        .blob(blob => {\n            const aElement = document.createElement('a')\n            aElement.setAttribute('download', report.title + \".xlsx\")\n            const href = URL.createObjectURL(blob)\n            aElement.href = href\n            aElement.setAttribute('target', '_blank')\n            aElement.click()\n            URL.revokeObjectURL(href)\n        })\n        .finally(setCursorToDefault)\n}","import {resolveCSS} from \"./utils/resolver\"\nimport {Application} from \"./fragments/Application\"\n\nresolveCSS(\"global\")\nresolveCSS(\"inputs\")\nresolveCSS(\"states\")\nresolveCSS(\"third-party/animate\")\n\nconst application = new Application({target: document.body})","import {Fragment} from \"./abstract/Fragment\"\nimport Header from \"./header/Header\"\nimport MainForm from \"./mainForm/MainForm\"\nimport ReportSlot from \"./report/ReportSlot\"\nimport {fetchReport} from \"../utils/api/reportsAPI\"\n\nexport class Application extends Fragment{\n\n    readonly header: Header\n    readonly mainForm: MainForm\n    readonly reportSlots: Map<string, ReportSlot>\n\n    constructor(location: FragmentLocation) {\n        super(location)\n        this.core = location.target\n        this.header = this.createHeader()\n        this.mainForm = this.createMainForm()\n        this.reportSlots = this.createReportSlots()\n    }\n\n    private createHeader = (): Header => new Header({target: document.getElementById(\"header\")})\n\n    private createMainForm(): MainForm {\n        const mainForm = new MainForm({target: document.getElementById(\"main-form\") as HTMLFormElement})\n        mainForm.confirmButton.subscribe(() => {\n            // The main form apply the \"main\" report only\n            this.reportSlots.get(\"main\").applyNewReportByValues(mainForm.value)\n        }, false)\n\n        return mainForm\n    }\n\n    private createReportSlots=(): typeof this.reportSlots => new Map(\n        [...this.core.querySelectorAll<HTMLDivElement>(\"div.report\")].map(reportSlotElement =>\n            [reportSlotElement.getAttribute(\"key\"), new ReportSlot({target: reportSlotElement})])\n    )\n}"],"names":["resolveCSS","name","source","headElement","document","querySelector","styleEl","createElement","setAttribute","appendChild","Fragment","core","element","this","coreElement","Error","insertCallback","constructor","location","addClass","className","classList","add","removeClass","remove","toggleClass","toggle","position","target","insertAdjacentElement","replaceWith","class","mouseEvent","popupHttpDataError","html","footer","popupSweetModal","title","icon","options","clientX","clientY","screenWidth","window","innerWidth","documentElement","clientWidth","body","screenHeight","innerHeight","clientHeight","getSweetMousePosition","swal","fire","Object","assign","confirmButtonColor","showClass","popup","getAnimationShowClass","hideClass","showCloseButton","allowEnterKey","showConfirmButton","addEventListener","event","Header","super","activateResetButton","activateInfoButton","activateHelpButton","activateButton","reload","button","list","console","log","getAttribute","map","item","join","onConfirm","href","link","click","removeChild","downloadUserManual","text","confirmButtonText","timer","timerProgressBar","backdrop","then","result","isConfirmed","buttonClassName","onClick","buttonElement","tagName","textContent","attributes","forEach","attribute","keys","String","values","createDivElement","createButtonElement","createInputElement","type","createLabelElement","emptyElement","withText","firstElementChild","generateUniqueId","startName","serialNumber","getElementById","InputFragment","value","_value","valueEventCallbacks","callback","subscribe","onValueEvent","runOnInit","push","debounce","delay","timeoutId","clearTimeout","setTimeout","Button","isAvailable","available","contains","hint","image","src","imageElement","alt","createImageElement","_a","numberOf","word","isNaN","Number","concatMaps","maps","buffer","entries","Map","stringify","Set","Array","from","Date","stringifyDate","toString","date","year","getFullYear","month","getMonth","day","getDate","setCursorToLoading","style","cursor","setCursorToDefault","DateInput","config","defaultRange","onSelect","easepick","create","format","calendars","grid","zIndex","plugins","AmpPlugin","RangePlugin","LockPlugin","lang","darkMode","resetButton","dropdown","minYear","maxYear","months","years","startDate","DateTime","endDate","locale","one","few","many","delimiter","minDays","maxDays","css","setup","picker","on","e","detail","start","end","hide","applyPicker","dateRange","Field","InputClass","inputConfig","input","warningLabel","makeValid","makeInvalid","message","DateField","configElement","Checkbox","checkBoxElement","id","labelElement","for","append","label","updateValue","checked","CheckboxField","Select","optionsRetrievalCallbacks","VirtualSelect","init","ele","additionalClasses","disabled","autofocus","markSearchResults","optionsCount","multiple","search","hasOptionDescription","showCodes","disableSelectAll","maxValues","placeholder","noOptionsText","noSearchResultsText","selectAllText","searchPlaceholderText","optionsSelectedText","optionSelectedText","allOptionsSelectedText","clearButtonText","moreText","applyVirtualSelect","newValue","currentTarget","setOptions","enabledOptionsCache","size","defaultOptions","get","split","delete","entry","alias","description","setSelected","enable","disable","reset","blur","setValue","fetchEndpointOptions","url","headers","wretch","fromEntries","json","catch","error","finally","SelectField","getBoolAttr","attributeName","optionsRetrieving","endpointConfigElement","endpointPath","_b","endpointSubscribedFields","querySelectorAll","fieldElement","optionsBuffer","resolveSubscribedFields","getFieldFn","_","key","set","listenSubscribedFields","field","retrieveOptionsPromise","optionsGroupName","promise","BankField","bankConfigElement","dateFieldKey","dateFieldSubscription","resolveBankSubscribing","fetchOptionsFn","subscriptionFields","subscription","length","serviceBankURL","origin","fetchCarriersByDate","fetchOptions","fetchCountriesByDate","postSovietOnly","g_prsng","fetchRoadsByDateAndCountries","async","countryKeys","fetchRoads","countryKey","gos","mergePromises","fetchStationsByDateAndRoads","roadKeys","extraProperty","mapRoadsByCountryCodeAndRoadCodes","countryValue","roadValues","dor","pr_bo","listName","parseItemFn","extraProperties","filter","errorFooter","post","data","firstChildKey","promises","Promise","all","results","mergedResult","roads","codesMap","parseRoad","road","roadValueEntries","roadValue","has","CarriersField","CountriesField","postSovietKey","postSovietSubscription","RoadsField","countriesKey","countriesSubscription","StationsField","roadsKey","roadsSubscription","MainForm","fields","confirmButton","resolveFields","resolveFieldsSubscriptions","validationPath","sectionElement","sectionKey","fieldKey","containsClass","resolveSelectField","resolveField","validateFields","path","fieldValues","forbidden","ExistedFragment","Head","titleElement","originTitleText","buttonsElement","applyGraphButton","applyButton","applyExportButton","applyCollapseButton","applyFullscreenButton","applyToTopButton","Text","textInputElement","resetButtonElement","Table","model","thead","tbody","tfoot","bodyContent","filtersMap","head","total","calculateTotal","headRow","columnId","createHTMLRow","headCell","htmlHeadCell","createHTMLHeadCell","content","rowSpan","colSpan","hasFilter","setFilter","addBody","contentMap","filterBodyContent","sort","a","b","valueCells","primaryCells","cell","createHTMLCell","concat","groupPrimaryCells","createHTMLTotalRow","i","htmlCells","primaryTotalCell","cssClass","tr","cellContent","rowspan","colspan","targetColumnId","cellTexts","v","filterText","toLowerCase","includes","startHtmlRow","endHtmlRow","lastElementChild","nesting","primaryHtmlCell","cells","nextHtmlRow","nextElementSibling","nextPrimaryHtmlCell","hidden","Chart","Body","_collapsed","toggleCollapse","collapsed","showLoading","applyTable","tableModelCache","applyCharts","models","chartsModelCache","chartsWrapper","undefined","ReportSlot","applyNewReportByValues","mainFormValues","report","table","charts","applyButtons","hasTable","hasCharts","createHeader","createReportSlots","reportSlotElement","header","mainForm","createMainForm","reportSlots"],"mappings":"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"}