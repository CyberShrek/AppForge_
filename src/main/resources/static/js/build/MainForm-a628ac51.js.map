{"version":3,"file":"MainForm-a628ac51.js","sources":["../../../../../../../typescript/utils/misc.ts","../../../../../../../typescript/entities/events.ts","../../../../../../../typescript/fragments/mainForm/section/fields/Field.ts","../../../../../../../typescript/fragments/mainForm/section/fields/Datepicker.ts","../../../../../../../typescript/utils/api/serviceBank.ts","../../../../../../../typescript/fragments/mainForm/section/fields/Select.ts","../../../../../../../typescript/fragments/mainForm/section/fields/CheckBox.ts","../../../../../../../typescript/fragments/mainForm/section/Section.ts","../../../../../../../typescript/fragments/mainForm/section/CustomSection.ts","../../../../../../../typescript/fragments/mainForm/Form.ts","../../../../../../../typescript/fragments/mainForm/MainForm.ts"],"sourcesContent":["export function setOf<T>(...items: T[]): Set<T>{\n    return new Set(items)\n}\n\nexport function mapOf<K, V>(...pairs: Pair<K, V>[]): Map<K, V>{\n    return new Map(pairs.map(pair => [pair.first, pair.second]))\n}\n\nexport function pairOf<F, S>(first: F, second: S): Pair<F, S>{\n    return {first, second}\n}\n\nexport function numberOf(word: string): number {\n    return isNaN(Number(word)) ? 0 : Number(word)\n}\n\nexport function concatMaps(...maps: Map<any, any>[]): Map<any, any>{\n    const buffer = []\n    maps.forEach(map => buffer.push(...map.entries()))\n    return new Map(buffer)\n}\n\nexport function stringifyDate(date: Date): string {\n    const year = date.getFullYear(),\n        month = date.getMonth() + 1,\n        day = date.getDate()\n    return `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day}`\n}\n\nexport function javaMapToMap(javaMap: string): Map<string, string>{\n    return mapOf(\n        ...javaMap\n        .slice(1, -1) // Removing '{' and '}' in the both sides of the string\n        .split(\", \")\n        .map(pair => {\n            const entry = pair.split(\"=\")\n            return pairOf(entry[0], entry[1])\n        })\n    )\n}\n\nexport function mapToOptions(map: Map<string, string>, showKeys: boolean = false): Option[]{\n    return [...map.entries()].map(entry => {\n        return {\n            label: entry[1],\n            value: entry[0],\n            alias: entry[0],\n            description: showKeys === true ? entry[0] : null\n        }\n    })\n}\n\nexport function optionsToMap(options: Option[]): Map<string, string>{\n    const map: Map<string, string> = new Map()\n    options.forEach(option => map.set(option.value, option.label))\n    return map\n}","export const updateEvent = new Event(\"update\")","import {Section} from \"../Section\"\nimport {updateEvent} from \"../../../../entities/events\"\n\n\nexport abstract class Field implements Fragment{\n\n    abstract readonly value: any\n\n    protected constructor(public core: HTMLElement,\n                          public section: Section){}\n\n    protected dispatchUpdate = () => this.core.dispatchEvent(updateEvent)\n\n    subscribeToFields(keys: Set<Pair<SectionKey, FieldKey>>, onUpdate: (value) => void){\n        keys.forEach(pair => this.subscribeToField(pair.first, pair.second, onUpdate))\n    }\n\n    subscribeToField(sectionKey: SectionKey, fieldKey: FieldKey, onUpdate: (value) => void){\n\n        const field = this.findFieldOrThrowError(sectionKey, fieldKey)\n        field.core.addEventListener(updateEvent.type, () => onUpdate(field.value))\n    }\n\n    private findFieldOrThrowError(sectionKey: SectionKey, fieldKey: FieldKey): Field{\n        const section = this.section.form.sections.get(sectionKey)\n        if(!section) throw Error(`Не удалось найти секцию с ключом \"${sectionKey}\"`)\n        const field = section.fields.get(fieldKey)\n        if(!field) throw Error(`Не удалось найти поле с ключом \"${sectionKey}.${fieldKey}\"`)\n        return field\n    }\n}","import {resolveCSS} from \"../../../../utils/resolver\"\nimport {easepick} from \"@easepick/core\"\nimport {RangePlugin} from \"@easepick/range-plugin\"\nimport {LockPlugin} from \"@easepick/lock-plugin\"\nimport {AmpPlugin} from \"@easepick/amp-plugin\"\nimport {DateTime} from \"@easepick/datetime\"\nimport {stringifyDate, numberOf} from \"../../../../utils/misc\"\nimport {Field} from \"./Field\"\nimport {Section} from \"../Section\"\n\nresolveCSS(\"third-party/easepick\")\n\nexport default class Datepicker extends Field{\n\n    value: DateRange\n    constructor(public core: HTMLElement,\n                public section: Section) { super(core, section)\n\n        applyPicker(core, (startDate, endDate) => {\n            this.value = {\n                start: stringifyDate(startDate),\n                end: stringifyDate(endDate)\n            }\n            this.dispatchUpdate()\n        })\n    }\n}\n\nfunction applyPicker(core: HTMLElement, onSelect: (startDate, endDate) => void){\n    new easepick.create({\n        element: core,\n        format: \"DD.MM.YYYY\",\n        calendars: 2,\n        grid: 2,\n        zIndex: 100,\n        plugins: [RangePlugin, LockPlugin, AmpPlugin],\n        lang: 'ru',\n        AmpPlugin: {\n            darkMode: false,\n            resetButton: true,\n            dropdown: {\n                minYear: 2010, maxYear: null, months: true, years: true\n            }\n        },\n        RangePlugin: {\n            startDate: new DateTime(),\n            endDate: new DateTime(),\n            locale: {\n                one: 'день',\n                few: 'дня',\n                many: 'дней'\n            },\n            delimiter: \" - \"\n        },\n        LockPlugin: {\n            minDays: 1,\n            maxDays: numberOf(core.getAttribute(\"max-days\"))\n        },\n        css: [\n            \"css/third-party/easepick.css\"\n        ],\n        setup(picker) {\n            picker.on(\"select\", (e) => {\n                onSelect(e.detail.start, e.detail.end)\n                setTimeout(() => picker.hide(), 10)\n            })\n        }\n    })\n}","// This code exports four functions that can be used to fetch carriers, countries, roads, and stations from a service bank API.\n// The code also defines several interfaces for different types of objects.\nimport wretch from \"wretch\"\nimport {popupError, popupHttpDataError} from \"../modal\";\nimport {pairOf} from \"../misc\";\nconst serviceBankURL = `${document.location.origin}/servicebank/getdata`\n\nexport const fetchCarriersByDate = (date: Date|string): Promise<Option[]> =>\n    fetchOptions(\"perList\", date, (item) => ({\n        label: item[\"nazvp\"],\n        // Each value consists of countryValue.carrierValue\n        value: `${item[\"gos\"]}.${item[\"skp\"]}`\n    }), null,\n        \"Не удалось загрузить список перевозчиков\")\n\nexport const fetchCountriesByDate = (date: Date|string, postUssrOnly: boolean): Promise<Option[]> =>\n    fetchOptions(\"gosList\", date, (item) => ({\n        label: item[\"g_name\"],\n        value: item[\"g_kod\"]\n    }), null,\n        \"Не удалось загрузить список стран\")\n\nexport const fetchRoadsByCountriesAndDate = async (countryValues: Option[\"value\"][],\n                                                   date: Date|string): Promise<Option[]> =>\n    (await Promise.all(\n        countryValues.map( (countryValue) =>\n            fetchOptions(\"dorList\", date, item => ({\n                label: item[\"d_name\"],\n                // Each value consists of countryValue.roadValue\n                value: `${countryValue}.${item[\"d_kod\"]}`\n            }), {\n                \"gos\": countryValue\n            },\n                \"Не удалось загрузить список дорог\")\n        ))).flat()\n\nexport const fetchStationsByRoadsAndDate = async (roadValues: Option[\"value\"][],\n                                                  date: Date|string,\n                                                  extraProperty?: Pair<string, string>): Promise<Option[]> =>\n    (await Promise.all(\n        Array.from(mapRoadsByCountryCodeAndRoadCodes(roadValues)).map(([countryValue, roadValues]) =>\n            fetchOptions(\"stanList\", date, (item) => ({\n                label: item[\"pnazv\"],\n                value: item[\"stan\"]\n            }), {\n                \"gos\": countryValue,\n                \"dor\": roadValues.join(\",\"),\n                // [extraProperty.first]: extraProperty.second,\n                    // [transferType === TransferType.BAGGAGE ? \"pr_bo\" : \"prpop\"]: \"1\"\n                \"pr_bo\" :\"1\"\n            },\n                \"Не удалось загрузить список станций\")\n        )\n    )).flat()\n\n\nconst fetchOptions = (listName: string,\n                      date: Date|string,\n                      parseItemFn: (item: any) => Option,\n                      extraProperties = {},\n                      errorFooter?: string): Promise<Option[]> =>\n    wretch(serviceBankURL)\n        .post({\n            [listName]: [{\"data\": date, ...extraProperties}]\n        })\n        .json(json => {\n            const firstChildKey = Object.keys(json)[0]\n            return (json[firstChildKey] as Array<any>).map((item) => {\n                const option = parseItemFn(item)\n                option.description = option.value\n                option.alias = option.value\n                return option\n            })\n        })\n        .catch(error => {\n            popupHttpDataError(error, errorFooter)\n            throw error\n        })\n\n\nconst mapRoadsByCountryCodeAndRoadCodes = (roads: Option[\"value\"][]) => {\n    const codesMap = new Map<Option[\"value\"], string[]>()\n    for (const road of roads) {\n        const roadValueEntries = road.split(\".\"),\n            countryValue = roadValueEntries[0],\n            roadValue = roadValueEntries[1]\n\n        if (!codesMap.has(countryValue)) {\n            codesMap.set(countryValue, [])\n        }\n        codesMap.get(countryValue)?.push(roadValue)\n    }\n    return codesMap}","import {Field} from \"./Field\"\nimport {Section} from \"../Section\"\nimport {javaMapToMap, mapToOptions} from \"../../../../utils/misc\"\nimport {resolveCSS} from \"../../../../utils/resolver\"\nimport {\n    fetchCarriersByDate,\n    fetchCountriesByDate,\n    fetchRoadsByCountriesAndDate, fetchStationsByRoadsAndDate\n} from \"../../../../utils/api/serviceBank\";\nresolveCSS(\"third-party/virtual-select.min\")\n\nexport default class Select extends Field{\n\n    value: Option[\"value\"][]\n\n    private staticMap: Map<string, string>\n\n    constructor(public core: HTMLElement,\n                public section: Section) {super(core, section)\n\n        this.initStaticMap()\n\n        section.form.onMount(() => {\n            this.subscribeToAllNecessaryFields()\n            applyVirtualSelectToElement(core)\n            this.interceptChangeEvents()\n            if(this.staticMap)\n                this.setMap(this.staticMap)\n        })\n    }\n\n    setMap(map: Map<string, string>){\n        this.setOptions(mapToOptions(map))\n    }\n\n    setOptions(options: Option[]){\n        const enabledOptionsCache = this.value\n        if(options && options.length > 0) {\n            // @ts-ignore !!! Resolved by html import !!!\n            this.core.setOptions(options)\n            this.selectOptions(enabledOptionsCache)\n            // @ts-ignore !!! Resolved by html import !!!\n            this.core.enable()\n        }\n        else {\n            // @ts-ignore !!! Resolved by html import !!!\n            this.core.disable()\n            // @ts-ignore !!! Resolved by html import !!!\n            this.core.reset()\n            this.core.blur()\n        }\n    }\n\n    selectOptions(values: Option[\"value\"][]){\n        // @ts-ignore !!! Resolved by html import !!!\n        this.core.setValue(values)\n    }\n\n    private initStaticMap(){\n        const staticElement = this.core.querySelector(\"static\")\n        if(staticElement !== null)\n            this.staticMap = javaMapToMap(staticElement.textContent)\n    }\n\n    private interceptChangeEvents(){\n        const updateValues=(values: typeof this.value) => {\n            this.value = values\n            this.dispatchUpdate()\n        }\n\n        this.core.addEventListener(\"change\", function() {\n            // @ts-ignore !!! Resolved by html import !!!\n            updateValues(this.value)\n        })\n    }\n\n    private subscribeToAllNecessaryFields(){\n        this.tryToSetCarriers()\n        this.tryToSetCountries()\n        this.tryToSetRoads()\n        this.tryToSetStations()\n    }\n\n    private tryToSetCarriers(){\n        const carriersElement = this.core.querySelector(\"config > carriers\")\n        if(carriersElement !== null){\n            const dateFieldLocation: string[] = carriersElement.querySelector(\"subscribes date\").textContent.split(\".\")\n            this.subscribeToField(\n                dateFieldLocation[0],\n                dateFieldLocation[1],\n                (range: DateRange)  => this.updateCarriers(range.start)\n            )\n        }\n    }\n\n    private tryToSetCountries(){\n        const countriesElement = this.core.querySelector(\"config > countries\")\n        if(countriesElement !== null){\n            const dateFieldLocation: string[] = countriesElement.querySelector(\"subscribes date\").textContent.split(\".\")\n            this.subscribeToField(\n                dateFieldLocation[0],\n                dateFieldLocation[1],\n                (range: DateRange)  => this.updateCountries(range.start)\n            )\n        }\n    }\n\n    private tryToSetRoads(){\n        const roadsElement = this.core.querySelector(\"config > roads\")\n        if(roadsElement !== null){\n            let subscribedDateValue: DateRange[\"start\"],\n                subscribedCountriesValue: typeof this.value\n\n            const dateFieldLocation: string[] = roadsElement.querySelector(\"subscribes date\").textContent.split(\".\")\n            this.subscribeToField(\n                dateFieldLocation[0],\n                dateFieldLocation[1],\n                (range: DateRange)  => {\n                    subscribedDateValue = range.start\n                }\n            )\n            const countriesLocation: string[] = roadsElement.querySelector(\"subscribes countries\").textContent.split(\".\")\n            this.subscribeToField(\n                countriesLocation[0],\n                countriesLocation[1],\n                (values: typeof this.value)  => {\n                    subscribedCountriesValue = values\n                    if(subscribedDateValue !== undefined){\n                        this.updateRoads(subscribedCountriesValue, subscribedDateValue)\n                    }\n                }\n            )\n        }\n    }\n\n    private tryToSetStations(){\n        const stationsElement = this.core.querySelector(\"config > stations\")\n        if(stationsElement !== null){\n            let subscribedDateValue: DateRange[\"start\"],\n                subscribedRoadsValue: typeof this.value\n\n            const dateFieldLocation: string[] = stationsElement.querySelector(\"subscribes date\").textContent.split(\".\")\n            this.subscribeToField(\n                dateFieldLocation[0],\n                dateFieldLocation[1],\n                (range: DateRange)  => {\n                    subscribedDateValue = range.start\n                }\n            )\n            const countriesLocation: string[] = stationsElement.querySelector(\"subscribes roads\").textContent.split(\".\")\n            this.subscribeToField(\n                countriesLocation[0],\n                countriesLocation[1],\n                (values: typeof this.value)  => {\n                    subscribedRoadsValue = values\n                    if(subscribedDateValue !== undefined){\n                        this.updateStations(subscribedRoadsValue, subscribedDateValue)\n                    }\n                }\n            )\n        }\n    }\n\n    private updateCarriers(date: DateRange[\"start\"]){\n        fetchCarriersByDate(date).then(carriers => this.setOptions(carriers))\n    }\n\n    private updateCountries(date: DateRange[\"start\"]){\n        fetchCountriesByDate(date, false).then(countries => this.setOptions(countries))\n    }\n\n    private updateRoads(countries: typeof this.value, date: DateRange[\"start\"]){\n        fetchRoadsByCountriesAndDate(countries, date).then(countries => this.setOptions(countries))\n    }\n\n    private updateStations(roads: typeof this.value, date: DateRange[\"start\"]){\n        fetchStationsByRoadsAndDate(roads, date).then(countries => this.setOptions(countries))\n    }\n}\n\nfunction applyVirtualSelectToElement(core: HTMLElement){\n    const configElement = core.querySelector(\"config\")\n    // @ts-ignore !!! Resolved by html import !!!\n    VirtualSelect.init({\n        ele: core,\n        multiple: true,\n        additionalClasses: \"multiselect\",\n        search: true,\n        disabled: true,\n        autofocus: false,\n        markSearchResults: true,\n        optionsCount: 6,\n        showSelectedOptionsFirst:true,\n        hasOptionDescription: configElement.getAttribute(\"show-codes\"),\n\n        placeholder: \"Выберите\",\n        noOptionsText: \"Варианты не найдены\",\n        noSearchResultsText: \"Результатов не найдено\",\n        selectAllText: \"Выбрать все\",\n        searchPlaceholderText: \"Поиск...\",\n        optionsSelectedText: \"(выбрано)\",\n        optionSelectedText: \"вариант выбран\",\n        allOptionsSelectedText: \"Все\",\n        clearButtonText: \"Очистить\",\n        moreText: \"ещё...\"\n    })\n}","import {Field} from \"./Field\"\nimport {Section} from \"../Section\"\n\nexport default class CheckBox extends Field{\n\n    value\n    constructor(public core: HTMLElement,\n                public section: Section) { super(core, section)\n    }\n}","import {Field} from \"./fields/Field\"\nimport {Form} from \"../Form\"\n\nexport abstract class Section implements Fragment{\n\n    fields: Map<FieldKey, Field> = new Map()\n\n    protected constructor(public core: HTMLElement,\n                          public form: Form) {}\n}","import Datepicker from \"./fields/Datepicker\"\nimport Select from \"./fields/Select\"\nimport CheckBox from \"./fields/CheckBox\"\nimport {Section} from \"./Section\"\nimport {Form} from \"../Form\"\nimport {Field} from \"./fields/Field\"\n\nexport class CustomSection extends Section{\n    constructor(public core: HTMLElement,\n                public form: Form) { super(core, form)\n        core.querySelectorAll<HTMLElement>(\".field\").forEach(fieldElement =>\n            this.fields.set(\n                fieldElement.getAttribute(\"key\"),\n                this.defineField(fieldElement)\n            )\n        )\n    }\n\n    private defineField(fieldCore: HTMLElement): Field{\n        if(fieldCore.classList.contains(\"datepicker\")) return new Datepicker(fieldCore, this)\n        if(fieldCore.classList.contains(\"select\")) return new Select(fieldCore, this)\n        if(fieldCore.classList.contains(\"checkbox\")) return new CheckBox(fieldCore, this)\n    }\n}","import {Section} from \"./section/Section\"\n\nexport class Form implements Fragment{\n\n    sections: Map<SectionKey, Section> = new Map()\n\n    private onMountExecutesList: (() => void)[] = []\n\n    protected constructor(public core: HTMLFormElement) {}\n\n    onMount(execute: () => void){\n        this.onMountExecutesList.push(execute)\n    }\n\n    protected mount = () => {\n        this.onMountExecutesList.forEach(execute => execute())\n        this.onMountExecutesList = null\n    }\n}","import {resolveCSS} from \"../../utils/resolver\"\nimport {CustomSection} from \"./section/CustomSection\"\nimport {Form} from \"./Form\";\n\nresolveCSS(\"main-form\")\n\nexport default class MainForm extends Form{\n\n    constructor(public core: HTMLFormElement) { super(core)\n\n        core.querySelectorAll<HTMLElement>(\".section\").forEach(\n            sectionCore =>\n                this.sections.set(\n                    sectionCore.getAttribute(\"key\"),\n                    new CustomSection(sectionCore, this)\n                )\n        )\n\n        this.mount()\n    }\n}"],"names":["numberOf","word","isNaN","Number","stringifyDate","date","year","getFullYear","month","getMonth","day","getDate","javaMapToMap","javaMap","pairs","Map","map","pair","first","second","mapOf","slice","split","entry","updateEvent","Event","Field","constructor","core","section","this","dispatchUpdate","dispatchEvent","subscribeToFields","keys","onUpdate","forEach","subscribeToField","sectionKey","fieldKey","field","findFieldOrThrowError","addEventListener","type","value","form","sections","get","Error","fields","resolveCSS","Datepicker","super","onSelect","easepick","create","element","format","calendars","grid","zIndex","plugins","RangePlugin","LockPlugin","AmpPlugin","lang","darkMode","resetButton","dropdown","minYear","maxYear","months","years","startDate","DateTime","endDate","locale","one","few","many","delimiter","minDays","maxDays","getAttribute","css","setup","picker","on","e","detail","start","end","setTimeout","hide","applyPicker","serviceBankURL","document","location","origin","fetchOptions","listName","parseItemFn","extraProperties","errorFooter","wretch","post","Object","assign","data","json","item","option","description","alias","catch","error","popupHttpDataError","mapRoadsByCountryCodeAndRoadCodes","roads","codesMap","road","roadValueEntries","countryValue","roadValue","has","set","_a","push","Select","initStaticMap","onMount","subscribeToAllNecessaryFields","configElement","querySelector","VirtualSelect","init","ele","multiple","additionalClasses","search","disabled","autofocus","markSearchResults","optionsCount","showSelectedOptionsFirst","hasOptionDescription","placeholder","noOptionsText","noSearchResultsText","selectAllText","searchPlaceholderText","optionsSelectedText","optionSelectedText","allOptionsSelectedText","clearButtonText","moreText","applyVirtualSelectToElement","interceptChangeEvents","staticMap","setMap","setOptions","showKeys","entries","label","mapToOptions","options","enabledOptionsCache","length","selectOptions","enable","disable","reset","blur","values","setValue","staticElement","textContent","updateValues","tryToSetCarriers","tryToSetCountries","tryToSetRoads","tryToSetStations","carriersElement","dateFieldLocation","range","updateCarriers","countriesElement","updateCountries","roadsElement","subscribedDateValue","subscribedCountriesValue","countriesLocation","undefined","updateRoads","stationsElement","subscribedRoadsValue","updateStations","fetchCarriersByDate","then","carriers","postUssrOnly","fetchCountriesByDate","countries","async","countryValues","Promise","all","gos","flat","fetchRoadsByCountriesAndDate","roadValues","extraProperty","Array","from","dor","join","pr_bo","fetchStationsByRoadsAndDate","CheckBox","Section","CustomSection","querySelectorAll","fieldElement","defineField","fieldCore","classList","contains","Form","onMountExecutesList","mount","execute","MainForm","sectionCore"],"mappings":"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"}