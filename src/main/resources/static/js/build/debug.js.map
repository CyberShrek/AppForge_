{"version":3,"file":"debug.js","sources":["../../../../../../../typescript/utils/resolver.ts","../../../../../../../typescript/fragments/abstract/HTMLFragment.ts","../../../../../../../typescript/debug.ts"],"sourcesContent":["export function resolveCSS(name: string){\n    const source = `./css/${name}.css`\n    const headElement = document.querySelector(\"head\")\n    if(headElement.querySelector(`link[href=\"${source}\"]`) === null) {\n        const styleEl = document.createElement(\"link\")\n        styleEl.setAttribute(\"rel\", \"stylesheet\")\n        styleEl.setAttribute(\"href\", source)\n        headElement.appendChild(styleEl)\n    }\n}","export abstract class HTMLFragment<ElementType extends HTMLElement> {\n\n     // Simple html string for the core element\n     protected readonly _html: string\n\n\n     // The core element\n     // @ts-ignore\n     readonly element: ElementType = document.createElement(\"p\")\n\n     constructor(protected options?: FragmentOptions) {}\n\n     render(){\n          this.element.innerHTML = this.html\n          this.onRender()\n     }\n\n     protected abstract get html(): string\n\n     protected onRender = () => {}\n}\n\nexport abstract class Factory{\n     static create(fragmentClass: new(options?: FragmentOptions) => HTMLFragment<any>, options?: FragmentOptions){\n          const frag = new fragmentClass(options)\n          frag.render()\n          return frag\n     }\n}","import {resolveCSS} from \"./utils/resolver\"\nimport {Factory, HTMLFragment} from \"./fragments/abstract/HTMLFragment\"\n\nresolveCSS(\"global\")\nresolveCSS(\"inputs\")\nresolveCSS(\"states\")\nresolveCSS(\"third-party/animate\")\nresolveCSS(\"misc\")\n\nclass InnerFragment extends HTMLFragment<HTMLDivElement>{\n    html = `<div>inner</div>`\n}\n\nclass DebugFragment extends HTMLFragment<HTMLDivElement>{\n\n    innerFragment = new InnerFragment()\n\n    html = `<div>outer</div>`\n}\n\ndocument.body.appendChild(Factory.create(DebugFragment).element)\n\n\n// const reportSlot = new ReportSlot({target: document.querySelector(\"div.report\")})\n\n// reportSlot.applyNewReport({\n//     charts: [\n//     //     {\n//     //     data: {a: 123, b: 444, c: 3334},\n//     //     config: {\n//     //         title: \"Debug\",\n//     //         graphs: [\n//     //             {\n//     //                 type: \"bar\",\n//     //                 color: \"red\",\n//     //                 name: \"debug\"\n//     //             }\n//     //         ]\n//     //     }\n//     // },{\n//     //     data: {a: 344, b: 4244, c: 23, d: 4, e: 1233},\n//     //     config: {\n//     //         title: \"Debug\",\n//     //         graphs: [\n//     //             {\n//     //                 type: \"bar\",\n//     //                 color: \"blue\",\n//     //                 name: \"debug\"\n//     //             }\n//     //         ]\n//     //     }\n//     // },\n//         {\n//         title: \"Debug\",\n//         diagram: [\n//             {\n//                 type: \"line\",\n//                 name: \"debug\"\n//             },\n//             {\n//                 type: \"pie\",\n//                 name: \"debug2\"\n//             }\n//         ],\n//         data: {a: [344, 44], b: [244, 51], c: [23, 134], d: [4, 100], e: [233, 10]}\n//     }],\n//     table: {\n//         data: createTableData(2, 5, 100),\n//         total: [],\n//         head: [\n//             [{text: \"Primary\", colspan: 2}, {text: \"Values\", colspan: 5}],\n//             [{text: \"1\", addFilter: true},{text: \"2\", addFilter: true},\n//                 {text: \"1\"}, {text: \"2\"}, {text: \"3\"}, {text: \"4\"}, {text: \"5\"}]\n//         ],\n//         primaryColumnsNumber: 2,\n//         groupedColumnsNumber: 1,\n//         xlsxExport: null\n//     }\n// })\n\nfunction createTableData(primaryCellsSize: number, valueCellsSize: number, tableHeight: number): TableData {\n    const tableData: TableData = []\n    for(let i : number = 0; i < tableHeight; i++){\n        const primaryCells: string[] = [];\n        for(let j : number = 0; j < primaryCellsSize; j++) {\n            primaryCells[j] = randomWord()\n        }\n        const valueCells: number[] = []\n        for(let j : number = 0; j < valueCellsSize; j++)\n            valueCells[j] = Math.floor(Math.random()*1000);\n        tableData[i] = [...primaryCells, ...valueCells]\n    }\n    return tableData\n}\n\nfunction randomWord():string {\n    const words :string [] = ['Вахта','Вакцина','Отечество','Владения','Овца','Решительность',\n        'Рана','Опасность','Производство','Коммерция','Звание','Начало','Институт',\n        'Происшествие','Икона','Полнота','Консерва','Доставка','Адмирал','Ассамблея',\n        'Избыток','Муниципалитет','Руководство','Мышцы','Заболевание','Отзыв','Натура',\n        'Дискотека','Монахиня'];\n    return words[Math.floor(Math.random()*(words.length-1))];\n}"],"names":["resolveCSS","name","source","headElement","document","querySelector","styleEl","createElement","setAttribute","appendChild","HTMLFragment","constructor","options","this","element","onRender","render","innerHTML","html","InnerFragment","body","static","fragmentClass","frag","create","innerFragment"],"mappings":"AAAM,SAAUA,EAAWC,GACvB,MAAMC,EAAS,SAASD,QAClBE,EAAcC,SAASC,cAAc,QAC3C,GAA2D,OAAxDF,EAAYE,cAAc,cAAcH,OAAsB,CAC7D,MAAMI,EAAUF,SAASG,cAAc,QACvCD,EAAQE,aAAa,MAAO,cAC5BF,EAAQE,aAAa,OAAQN,GAC7BC,EAAYM,YAAYH,EAC3B,CACL,OCTsBI,EAUjBC,YAAsBC,GAAAC,KAAOD,QAAPA,EAFbC,KAAAC,QAAuBV,SAASG,cAAc,KAW7CM,KAAAE,SAAW,MAT8B,CAEnDC,SACKH,KAAKC,QAAQG,UAAYJ,KAAKK,KAC9BL,KAAKE,UACT,ECZNf,EAAW,UACXA,EAAW,UACXA,EAAW,UACXA,EAAW,uBACXA,EAAW,QAEX,MAAMmB,UAAsBT,EAA5BC,kCACIE,KAAIK,KAAG,kBACV,EASDd,SAASgB,KAAKX,kBDGTY,cAAcC,EAAoEV,GAC7E,MAAMW,EAAO,IAAID,EAAcV,GAE/B,OADAW,EAAKP,SACEO,CACX,GCP4BC,OAPlC,cAA4Bd,EAA5BC,kCAEIE,KAAAY,cAAgB,IAAIN,EAEpBN,KAAIK,KAAG,kBACV,IAEuDJ"}