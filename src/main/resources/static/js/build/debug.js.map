{"version":3,"file":"debug.js","sources":["../../../../../../../typescript/fragments/core/Fragment.ts","../../../../../../../typescript/utils/DOMWizard.ts","../../../../../../../typescript/utils/misc.ts","../../../../../../../typescript/fragments/core/InputFragment.ts","../../../../../../../typescript/fragments/inputs/TextInput.ts","../../../../../../../typescript/utils/resolver.ts","../../../../../../../typescript/debug.ts","../../../../../../../typescript/fragments/report/content/TableFragment.ts"],"sourcesContent":["export abstract class Fragment {\r\n    protected constructor(\r\n        protected readonly core: HTMLElement,\r\n        protected readonly location?: FragmentLocation\r\n    ) {\r\n        if(location)\r\n            (location.target instanceof Fragment\r\n                ? location.target.core!\r\n                : location.target)\r\n                .insertAdjacentElement(location.position ? location.position : \"beforeend\", core)\r\n    }\r\n}","// Returns created element with specific tag name and attributes\r\nexport function createElement<T extends HTMLElement>(tagName: string, textContent: string = \"\", ...attributes: Attribute[]): T{\r\n    const element = document.createElement(tagName) as T\r\n    if(textContent) element.textContent = textContent\r\n    attributes?.forEach(attribute =>\r\n        element.setAttribute(\r\n            Object.keys(attribute)[0],\r\n            String(Object.values(attribute)[0])\r\n        )\r\n    )\r\n    return element\r\n}\r\n\r\n// Removes all child elements\r\nexport function emptyElement(element: Element){\r\n    while(element.firstElementChild !== null)\r\n        element.firstElementChild.remove()\r\n}","// Returns vararg items as a Set of the vararg items\r\nexport function setOf<T>(...items: T[]): Set<T>{\r\n    return new Set(items)\r\n}\r\n\r\n// Returns a Map of the vararg Pair entries\r\nexport function mapOf<K, V>(...entries: Pair<K, V>[]): Map<K, V>{\r\n    return new Map(entries.map(entry => [entry.first, entry.second]))\r\n}\r\n\r\n// Returns two arguments as a Pair object\r\nexport function pairOf<F, S>(first: F, second: S): Pair<F, S>{\r\n    return {first, second}\r\n}\r\n\r\n// Returns a basic number from gotten string if this is possible, or 0 if not\r\nexport function numberOf(word: string|number): number {\r\n    return isNaN(Number(word)) ? 0 : Number(word)\r\n}\r\n\r\n// Returns a Map consisting of the vararg Maps\r\nexport function concatMaps(...maps: Map<any, any>[]): Map<any, any>{\r\n    const buffer = []\r\n    maps.forEach(map => buffer.push(...map.entries()))\r\n    return new Map(buffer)\r\n}\r\n\r\n// Returns sorted by key Map\r\nexport function sortMap<K, V>(contentMap: Map<K, V>): Map<K, V>{\r\n    return new Map([...contentMap.entries()].sort(\r\n        (a : [K, V], b : [K, V]) : number => a[0] > b[0] ? 1 : a[0] < b[0] ? -1 : 0\r\n    ))\r\n}\r\n\r\nexport function filterMap<K, V>(map: Map<K, V>, filter: (value: V, key: K) => boolean): Map<K, V> {\r\n    return new Map(Array.from(map).filter(([key, value]) => filter(value, key)))\r\n}\r\n\r\nexport function stringifyDate(date: Date): string {\r\n    const year = date.getFullYear(),\r\n        month = date.getMonth() + 1,\r\n        day = date.getDate()\r\n    return `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day}`\r\n}\r\n\r\nexport function javaSetToSet(javaSet: string): Set<string>{\r\n    return setOf(...splitJavaCollection(javaSet))\r\n}\r\n\r\nexport function javaMapToMap(javaMap: string): Map<string, string>{\r\n    return mapOf(\r\n        ...splitJavaCollection(javaMap)\r\n        .map(pair => {\r\n            const entry = pair.split(\"=\")\r\n            return pairOf(entry[0], entry[1])\r\n        })\r\n    )\r\n}\r\n\r\nexport function splitJavaCollection(javaCollection: string): string[]{\r\n    return javaCollection\r\n        .slice(1, -1) // Removing '{' and '}' in the both sides of the string\r\n        .split(\", \")\r\n}\r\n\r\nexport function mapToOptions(map: Map<string, string>): Option[]{\r\n    return [...map.entries()].map(entry => entryToOption(entry))\r\n}\r\n\r\nexport function jsonToOptions(json: object): Option[]{\r\n    return Object.entries(json).map(entry => entryToOption(entry))\r\n}\r\n\r\nexport function entryToOption(entry: [string, string]): Option  {\r\n   return  {\r\n       label: entry[1],\r\n       value: entry[0],\r\n       alias: entry[0],\r\n       description: entry[0]\r\n    }\r\n}\r\n\r\nexport function optionsToMap(options: Option[]): Map<string, string>{\r\n    const map: Map<string, string> = new Map()\r\n    options.forEach(option => map.set(option.value, option.label))\r\n    return map\r\n}\r\n\r\nexport function setCursorToLoading() {\r\n    document.documentElement.style.cursor = 'wait'\r\n}\r\n\r\nexport function setCursorToDefault() {\r\n    document.documentElement.style.cursor = 'default'\r\n}","import {Fragment} from \"./Fragment\"\r\n\r\nexport abstract class InputFragment<V> extends Fragment{\r\n\r\n    private _value: V\r\n    private valueChangeCallbacks: ((value: V) => void)[] = []\r\n    get value(): V {\r\n        return this._value\r\n    }\r\n    protected set value(value: V){\r\n        this._value = value\r\n        this.valueChangeCallbacks.forEach(callback => callback(value))\r\n    }\r\n\r\n    protected constructor(protected readonly core: HTMLInputElement,\r\n                          protected readonly location?: FragmentLocation) { super(core, location) }\r\n\r\n    subscribe(onValueChange: (value: V) => void){\r\n        this.valueChangeCallbacks.push(onValueChange)\r\n        if(this.value)\r\n            onValueChange(this.value)\r\n    }\r\n\r\n    protected debounce(callback: () => void, delay: number = 100): () => void {\r\n        let timeoutId: NodeJS.Timeout;\r\n        return () => {\r\n            clearTimeout(timeoutId)\r\n            timeoutId = setTimeout(callback, delay)\r\n        }\r\n    }\r\n}","import {createElement} from \"../../utils/DOMWizard\"\r\nimport {InputFragment} from \"../core/InputFragment\";\r\n\r\nexport class TextInput extends InputFragment<string>{\r\n\r\n    private textInputElement: HTMLInputElement   = createElement(\"input\", \"\",{type: \"text\"})\r\n    private resetButtonElement: HTMLButtonElement = createElement(\"button\", \"❌\",{class: \"reset\"})\r\n\r\n    constructor(location: FragmentLocation) {\r\n        super(createElement(\"div\", \"\",{class: \"text-input\"}), location)\r\n        this.core.append(this.textInputElement, this.resetButtonElement)\r\n        this.textInputElement.addEventListener(\"input\",\r\n            this.debounce(() => this.value = this.textInputElement.value)\r\n        )\r\n        this.resetButtonElement.addEventListener(\"click\",\r\n            () => this.value = this.textInputElement.value = \"\"\r\n        )\r\n    }\r\n}","export function resolveCSS(name: string){\r\n    const source = `./css/${name}.css`\r\n    const headElement = document.querySelector(\"head\")\r\n    if(headElement.querySelector(`link[href=\"${source}\"]`) === null) {\r\n        const styleEl = document.createElement(\"link\")\r\n        styleEl.setAttribute(\"rel\", \"stylesheet\")\r\n        styleEl.setAttribute(\"href\", source)\r\n        headElement.appendChild(styleEl)\r\n    }\r\n}","import {TableFragment} from \"./fragments/report/content/TableFragment\";\r\nimport {setOf} from \"./utils/misc\"\r\nimport {resolveCSS} from \"./utils/resolver\"\r\nimport {TextInput} from \"./fragments/inputs/TextInput\";\r\n\r\nresolveCSS(\"global\")\r\nresolveCSS(\"inputs\")\r\nresolveCSS(\"states\")\r\nresolveCSS(\"third-party/animate\")\r\nresolveCSS(\"report/table\")\r\n\r\nconst debugElement: HTMLElement = document.querySelector(\"debug\")\r\ndebugElement.className = \"report\"\r\n\r\n// const textInput = new TextInput({target: debugElement})\r\n// textInput.subscribe(value => console.log(value))\r\n\r\nconst tableFragment = new TableFragment({\r\n    target: debugElement\r\n})\r\n\r\ntableFragment.setHead(setOf(\r\n    [{content: \"Primary\", colSpan: 2}, {content: \"Values\", colSpan: 5}],\r\n    [{content: \"1\", hasFilter: true}, {content: \"2\", hasFilter: true}, {content: \"1\", hasFilter: true}, {content: \"2\", hasFilter: true}, {content: \"3\", hasFilter: true}, {content: \"4\", hasFilter: true}, {content: \"5\", hasFilter: true}]\r\n))\r\ntableFragment.setBody(createContentMap(2, 5, 30))\r\ntableFragment.setTotal()\r\n\r\n\r\n\r\n// создание и заполнение MAP\r\nfunction createContentMap(primaryCellsSize: number, valueCellsSize: number, tableSize: number): TableBody {\r\n    const contentMap: TableBody = new Map();\r\n    for(let i : number = 0; i < tableSize; i++){\r\n        const primaryCells: string[] = [];\r\n        for(let j : number = 0; j < primaryCellsSize; j++) {\r\n            primaryCells[j] = (primaryCells.length > 0 ? primaryCells[j-1]+\".\" : \"\")+randomWord()\r\n        }\r\n        const valueCells: number[] = []\r\n        for(let j : number = 0; j < valueCellsSize; j++)\r\n            valueCells[j] = Math.floor(Math.random()*1000);\r\n        contentMap.set(primaryCells, valueCells);\r\n    }\r\n    return contentMap;\r\n}\r\n\r\n//рандомная строка\r\nfunction randomWord():string {\r\n    const words :string [] = ['Вахта','Вакцина','Отечество','Владения','Овца','Решительность',\r\n        'Рана','Опасность','Производство','Коммерция','Звание','Начало','Институт',\r\n        'Происшествие','Икона','Полнота','Консерва','Доставка','Адмирал','Ассамблея',\r\n        'Избыток','Муниципалитет','Руководство','Мышцы','Заболевание','Отзыв','Натура',\r\n        'Дискотека','Монахиня'];\r\n    return words[Math.floor(Math.random()*(words.length-1))];\r\n}","import {Fragment} from \"../../core/Fragment\"\r\nimport {emptyElement, createElement} from \"../../../utils/DOMWizard\"\r\nimport {concatMaps, filterMap, numberOf, sortMap} from \"../../../utils/misc\"\r\nimport {TextInput} from \"../../inputs/TextInput\";\r\n\r\nexport class TableFragment extends Fragment{\r\n\r\n    protected thead: HTMLTableSectionElement = createElement(\"thead\")\r\n    protected tbody: HTMLTableSectionElement = createElement(\"tbody\")\r\n    protected tfoot: HTMLTableSectionElement = createElement(\"tfoot\")\r\n\r\n    protected bodyContent: TableBody = new Map()\r\n\r\n    // Key is filtrated column, value is filter text value\r\n    protected filtersMap: Map<number, string> = new Map()\r\n\r\n    constructor(location: FragmentLocation) {\r\n        super(createElement(\"table\"), location)\r\n        this.core.append(this.thead, this.tfoot, this.tbody)\r\n    }\r\n\r\n    setHead(head: TableHead){\r\n        emptyElement(this.thead)\r\n        head.forEach(headRow => {\r\n            let columnId: number = 0\r\n            this.thead.appendChild(\r\n                this.createHTMLRow(headRow.map(\r\n                    headCell => {\r\n                        const htmlHeadCell = this.createHTMLHeadCell(headCell.content, headCell.rowSpan, headCell.colSpan)\r\n                        if (headCell.hasFilter === true) {\r\n                            console.log(\"has\")\r\n                            this.setFilter(htmlHeadCell, columnId)\r\n                        }\r\n                        columnId = columnId + htmlHeadCell.colSpan\r\n                        return htmlHeadCell\r\n                    })\r\n                )\r\n            )\r\n        })\r\n    }\r\n\r\n    setBody(bodyContent: TableBody){\r\n        emptyElement(this.tbody)\r\n        this.bodyContent = new Map()\r\n        this.addBody(bodyContent)\r\n    }\r\n\r\n    addBody(bodyContent: TableBody){\r\n        this.bodyContent = concatMaps(this.bodyContent, bodyContent)\r\n        sortMap(this.filterBodyContent(this.bodyContent)).forEach((valueCells, primaryCells) =>\r\n            this.tbody.append(this.createHTMLRow(\r\n                primaryCells.map(cell => this.createHTMLCell(cell, \"primary\")).concat(\r\n                    valueCells.map(cell => this.createHTMLCell(String(cell))))))\r\n        )\r\n        this.groupPrimaryCells()\r\n    }\r\n\r\n    setTotal(total?: ValueCell[]){\r\n        if(!total){\r\n            total = []\r\n            this.bodyContent.forEach(values=> values.forEach((value, i) => {\r\n                total[i] = total[i] ? numberOf(total[i]) + numberOf(value) : value\r\n            }))\r\n        }\r\n        this.tfoot.querySelector(\".total\")?.remove()\r\n        this.tfoot.appendChild(this.createHTMLTotalRow(total.map(value => this.createHTMLCell(value))))\r\n    }\r\n\r\n    private createHTMLTotalRow(htmlCells: HTMLTableCellElement[]): HTMLTableRowElement{\r\n        const primaryTotalCell = this.createHTMLCell(\"Всего\")\r\n        primaryTotalCell.colSpan = this.tbody.querySelector(\"tr\").querySelectorAll(\".primary\").length\r\n        return this.createHTMLRow([primaryTotalCell, ...htmlCells], \"total\")\r\n    }\r\n\r\n    private createHTMLRow(htmlCells: HTMLTableCellElement[], cssClass?: string): HTMLTableRowElement{\r\n        const tr: HTMLTableRowElement = createElement(\"tr\", \"\", {class: cssClass})\r\n        tr.append(...htmlCells)\r\n        return tr\r\n    }\r\n\r\n    private createHTMLHeadCell(cellContent: string, rowSpan: number = 1, colSpan: number = 1): HTMLTableCellElement{\r\n        return createElement(\"th\", cellContent, {rowspan: rowSpan}, {colspan: colSpan})\r\n    }\r\n\r\n    private createHTMLCell(cellContent: string|number, cssClass?: string): HTMLTableCellElement {\r\n        return createElement(\"td\", String(cellContent), {class: cssClass})\r\n    }\r\n\r\n    private setFilter(htmlHeadCell: HTMLTableCellElement, targetColumnId: number){\r\n        const filterFragment = new TextInput({target: htmlHeadCell})\r\n        filterFragment.subscribe(value => {\r\n            this.filtersMap.set(targetColumnId, value)\r\n            this.setBody(this.bodyContent)\r\n        })\r\n    }\r\n\r\n    private filterBodyContent(bodyContent: TableBody): TableBody{\r\n        return filterMap(bodyContent, (valueCells, primaryCells) => {\r\n            const cellTexts = primaryCells.concat(valueCells.map(v => String(v)))\r\n            for (let i = 0; i < cellTexts.length; i++) {\r\n                const filterText = this.filtersMap.get(i)\r\n                if(!cellTexts[i].toLowerCase().includes(filterText ? filterText.toLowerCase() : \"\"))\r\n                    return false\r\n            }\r\n            return true\r\n        })\r\n    }\r\n\r\n    private groupPrimaryCells(startHtmlRow: HTMLTableRowElement = this.tbody.firstElementChild as HTMLTableRowElement,\r\n                              endHtmlRow: HTMLTableRowElement = this.tbody.lastElementChild as HTMLTableRowElement,\r\n                              nesting: number = 0){\r\n        if(startHtmlRow === endHtmlRow) return\r\n        const primaryHtmlCell = startHtmlRow.cells[nesting]\r\n        if(!primaryHtmlCell?.classList?.contains(\"primary\")) return\r\n        let nextHtmlRow = startHtmlRow\r\n        do {\r\n            nextHtmlRow = nextHtmlRow.nextElementSibling as HTMLTableRowElement\r\n            const nextPrimaryHtmlCell = nextHtmlRow.cells[0]\r\n            if(primaryHtmlCell.textContent === nextPrimaryHtmlCell.textContent){\r\n                primaryHtmlCell.rowSpan++\r\n                nextPrimaryHtmlCell.hidden = true\r\n            } else {\r\n                this.groupPrimaryCells(startHtmlRow, nextHtmlRow, nesting + 1)\r\n                this.groupPrimaryCells(nextHtmlRow, endHtmlRow)\r\n                return\r\n            }\r\n        }\r\n        while (nextHtmlRow !== endHtmlRow)\r\n    }\r\n}"],"names":["Fragment","constructor","core","location","this","target","insertAdjacentElement","position","createElement","tagName","textContent","attributes","element","document","forEach","attribute","setAttribute","Object","keys","String","values","emptyElement","firstElementChild","remove","numberOf","word","isNaN","Number","InputFragment","value","_value","valueChangeCallbacks","callback","super","subscribe","onValueChange","push","debounce","delay","timeoutId","clearTimeout","setTimeout","TextInput","class","textInputElement","type","resetButtonElement","append","addEventListener","resolveCSS","name","source","headElement","querySelector","styleEl","appendChild","debugElement","className","tableFragment","thead","tbody","tfoot","bodyContent","Map","filtersMap","setHead","head","headRow","columnId","createHTMLRow","map","headCell","htmlHeadCell","createHTMLHeadCell","content","rowSpan","colSpan","hasFilter","console","log","setFilter","setBody","addBody","contentMap","maps","buffer","entries","concatMaps","filterBodyContent","sort","a","b","valueCells","primaryCells","cell","createHTMLCell","concat","groupPrimaryCells","setTotal","total","i","_a","createHTMLTotalRow","htmlCells","primaryTotalCell","querySelectorAll","length","cssClass","tr","cellContent","rowspan","colspan","targetColumnId","set","filter","cellTexts","v","filterText","get","toLowerCase","includes","Array","from","key","startHtmlRow","endHtmlRow","lastElementChild","nesting","primaryHtmlCell","cells","classList","contains","nextHtmlRow","nextElementSibling","nextPrimaryHtmlCell","hidden","randomWord","words","Math","floor","random","items","Set","setOf","primaryCellsSize","valueCellsSize","tableSize","j","createContentMap"],"mappings":"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"}