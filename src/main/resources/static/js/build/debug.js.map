{"version":3,"file":"debug.js","sources":["../../../../../../../typescript/fragments/Fragment.ts","../../../../../../../typescript/utils/domWizard.ts","../../../../../../../typescript/utils/misc.ts","../../../../../../../typescript/utils/resolver.ts","../../../../../../../typescript/debug.ts","../../../../../../../typescript/fragments/report/content/TableFragment.ts"],"sourcesContent":["import {FragmentLocation} from \"../entities/Fragment\"\n\nexport abstract class Fragment {\n    protected constructor(\n        protected core: HTMLElement,\n        protected location?: FragmentLocation,\n        protected slot?: HTMLElement\n    ) {\n        if(location)\n            (location.target instanceof Fragment\n                ? location.target.slot!\n                : location.target)\n                .insertAdjacentElement(location.position ? location.position : \"beforeend\", core)\n    }\n}","export function createElement<T extends HTMLElement>(tagName: string, classes?: string, attributes?: Map<string, string>): T{\n    const element = document.createElement(tagName) as T\n    if(classes) element.className = classes\n    attributes?.forEach(attributeEntry => element.setAttribute(attributeEntry[0], attributeEntry[1]))\n    return element\n}\n\nexport function createButton(classes?: string, attributes?: Map<string, string>): HTMLButtonElement{\n    return createElement(\"button\", classes, attributes) as HTMLButtonElement\n}\n\n// Removes all child elements\nexport function emptyElement(element: Element){\n    while(element.firstElementChild !== null)\n        element.firstElementChild.remove()\n}","export function setOf<T>(...items: T[]): Set<T>{\n    return new Set(items)\n}\n\nexport function mapOf<K, V>(...pairs: Pair<K, V>[]): Map<K, V>{\n    return new Map(pairs.map(pair => [pair.first, pair.second]))\n}\n\nexport function pairOf<F, S>(first: F, second: S): Pair<F, S>{\n    return {first, second}\n}\n\nexport function numberOf(word: string): number {\n    return isNaN(Number(word)) ? 0 : Number(word)\n}\n\nexport function concatMaps(...maps: Map<any, any>[]): Map<any, any>{\n    const buffer = []\n    maps.forEach(map => buffer.push(...map.entries()))\n    return new Map(buffer)\n}\n\nexport function stringifyDate(date: Date): string {\n    const year = date.getFullYear(),\n        month = date.getMonth() + 1,\n        day = date.getDate()\n    return `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day}`\n}\n\nexport function javaSetToSet(javaSet: string): Set<string>{\n    return setOf(...splitJavaCollection(javaSet))\n}\n\nexport function javaMapToMap(javaMap: string): Map<string, string>{\n    return mapOf(\n        ...splitJavaCollection(javaMap)\n        .map(pair => {\n            const entry = pair.split(\"=\")\n            return pairOf(entry[0], entry[1])\n        })\n    )\n}\n\nexport function sortMap<K, V>(contentMap: Map<K, V>): Map<K, V>{\n    return new Map([...contentMap.entries()].sort(\n        (a : [K, V], b : [K, V]) : number => a[0] > b[0] ? 1 : a[0] < b[0] ? -1 : 0\n    ))\n}\n\nexport function splitJavaCollection(javaCollection: string): string[]{\n    return javaCollection\n        .slice(1, -1) // Removing '{' and '}' in the both sides of the string\n        .split(\", \")\n}\n\nexport function mapToOptions(map: Map<string, string>): Option[]{\n    return [...map.entries()].map(entry => entryToOption(entry))\n}\n\nexport function jsonToOptions(json: object): Option[]{\n    return Object.entries(json).map(entry => entryToOption(entry))\n}\n\nexport function entryToOption(entry: [string, string]): Option  {\n   return  {\n       label: entry[1],\n       value: entry[0],\n       alias: entry[0],\n       description: entry[0]\n    }\n}\n\nexport function optionsToMap(options: Option[]): Map<string, string>{\n    const map: Map<string, string> = new Map()\n    options.forEach(option => map.set(option.value, option.label))\n    return map\n}\n\nexport function setCursorToLoading() {\n    document.documentElement.style.cursor = 'wait'\n}\n\nexport function setCursorToDefault() {\n    document.documentElement.style.cursor = 'default'\n}","export function resolveCSS(name: string){\n    const source = `./css/${name}.css`\n    const headElement = document.querySelector(\"head\")\n    if(headElement.querySelector(`link[href=\"${source}\"]`) === null) {\n        const styleEl = document.createElement(\"link\")\n        styleEl.setAttribute(\"rel\", \"stylesheet\")\n        styleEl.setAttribute(\"href\", source)\n        headElement.appendChild(styleEl)\n    }\n}","import {TableFragment} from \"./fragments/report/content/TableFragment\";\nimport {setOf} from \"./utils/misc\"\nimport {resolveCSS} from \"./utils/resolver\"\n\nresolveCSS(\"global\")\nresolveCSS(\"inputs\")\nresolveCSS(\"states\")\nresolveCSS(\"third-party/animate\")\nresolveCSS(\"report/table\")\n\nconst debugElement: HTMLElement = document.querySelector(\"debug\"),\n    tableFragment = new TableFragment({\n        target: debugElement\n    })\n\ndebugElement.className = \"report\"\n\ntableFragment.setHead(setOf(\n    [{content: \"Primary\", colSpan: 3}, {content: \"Values\", colSpan: 5}],\n    [{content: \"1\"}, {content: \"2\"}, {content: \"3\"}, {content: \"1\"}, {content: \"2\"}, {content: \"3\"}, {content: \"4\"}, {content: \"5\"}]\n))\ntableFragment.setBody(createContentMap(3, 5, 30))\ntableFragment.setTotal()\n\n\n\n// создание и заполнение MAP\nfunction createContentMap(primaryCellsSize: number, valueCellsSize: number, tableSize: number): TableBody {\n    const contentMap: TableBody = new Map();\n    for(let i : number = 0; i < tableSize; i++){\n        const primaryCells: string[] = [];\n        for(let j : number = 0; j < primaryCellsSize; j++) {\n            primaryCells[j] = (primaryCells.length > 0 ? primaryCells[j-1]+\".\" : \"\")+randomWord()\n        }\n        const valueCells: number[] = []\n        for(let j : number = 0; j < valueCellsSize; j++)\n            valueCells[j] = Math.floor(Math.random()*1000);\n        contentMap.set(primaryCells, valueCells);\n    }\n    return contentMap;\n}\n\n//рандомная строка\nfunction randomWord():string {\n    const words :string [] = ['Вахта','Вакцина','Отечество','Владения','Овца','Решительность',\n        'Рана','Опасность','Производство','Коммерция','Звание','Начало','Институт',\n        'Происшествие','Икона','Полнота','Консерва','Доставка','Адмирал','Ассамблея',\n        'Избыток','Муниципалитет','Руководство','Мышцы','Заболевание','Отзыв','Натура',\n        'Дискотека','Монахиня'];\n    return words[Math.floor(Math.random()*(words.length-1))];\n}","import {Fragment} from \"../../Fragment\"\nimport {FragmentLocation} from \"../../../entities/Fragment\"\nimport {emptyElement, createElement} from \"../../../utils/domWizard\"\nimport {concatMaps, mapOf, numberOf, sortMap} from \"../../../utils/misc\"\n\nexport class TableFragment extends Fragment{\n\n    protected thead: HTMLTableSectionElement = createElement(\"thead\")\n    protected tbody: HTMLTableSectionElement = createElement(\"tbody\")\n    protected tfoot: HTMLTableSectionElement = createElement(\"tfoot\")\n\n    private bodyContent: TableBody = mapOf()\n\n    // Allows to filter the bodyContent. Key is column id\n    private filters: Map<number, HTMLInputElement>\n\n    constructor(location: FragmentLocation) {\n        super(createElement(\"table\"), location)\n        this.core.append(this.thead, this.tfoot, this.tbody)\n        this.slot = this.tfoot\n    }\n\n    setHead(head: TableHead){\n        emptyElement(this.thead)\n        head.forEach(headRow => this.thead.appendChild(\n            this.createHTMLRow(headRow.map(\n                headCell => this.createHeadHTMLCell(headCell.content, headCell.rowSpan, headCell.colSpan)\n            ))\n        ))\n    }\n\n    setBody(bodyContent: TableBody){\n        emptyElement(this.tbody)\n        this.bodyContent = mapOf()\n        this.addBody(bodyContent)\n    }\n\n    addBody(bodyContent: TableBody){\n        this.bodyContent = sortMap(concatMaps(this.bodyContent, bodyContent))\n        this.bodyContent.forEach((valueCells, primaryCells) =>\n            this.tbody.append(this.createHTMLRow(\n                primaryCells.map(cell => this.createHTMLPrimaryCell(cell)).concat(\n                    valueCells.map(cell => this.createHTMLCell(String(cell))))))\n        )\n        this.groupPrimaryCells()\n    }\n\n    setTotal(total?: ValueCell[]){\n        if(!total){\n            total = []\n            this.bodyContent.forEach(values=> values.forEach((value, i) => {\n                total[i] = total[i] ? numberOf(total[i]) + numberOf(value) : value\n            }))\n        }\n        this.tfoot.querySelector(\".total\")?.remove()\n        this.tfoot.appendChild(this.createTotalHTMLRow(total.map(value => this.createHTMLCell(value))))\n    }\n\n    private createHTMLRow(htmlCells?: HTMLTableCellElement[]): HTMLTableRowElement{\n        const tr: HTMLTableRowElement = createElement(\"tr\")\n        if(htmlCells)\n            tr.append(...htmlCells)\n\n        return tr\n    }\n\n    private createTotalHTMLRow(htmlCells: HTMLTableCellElement[]): HTMLTableRowElement{\n        const primaryTotalCell = this.createHTMLCell(\"Всего\")\n        primaryTotalCell.colSpan = this.tbody.querySelector(\"tr\").querySelectorAll(\".primary\").length\n        const totalHtmlRow = this.createHTMLRow([primaryTotalCell, ...htmlCells])\n        totalHtmlRow.className = \"total\"\n        return totalHtmlRow\n    }\n\n    private createHeadHTMLCell(cellContent: string, rowSpan?: number, colSpan?: number){\n        const th: HTMLTableCellElement = this.createHTMLCell(cellContent, true)\n        if(rowSpan) th.rowSpan = rowSpan\n        if(colSpan) th.colSpan = colSpan\n        return th\n    }\n\n    private createHTMLPrimaryCell(cellContent: string): HTMLTableCellElement{\n        const td: HTMLTableCellElement = this.createHTMLCell(cellContent)\n        td.className = \"primary\"\n        return td\n    }\n\n    private createHTMLCell(cellContent: string|number, isHead: boolean = false): HTMLTableCellElement{\n        const td: HTMLTableCellElement = createElement(isHead === true ? \"th\" : \"td\")\n        td.textContent = String(cellContent)\n        return td\n    }\n\n    private groupPrimaryCells(startHtmlRow: HTMLTableRowElement = this.tbody.firstElementChild as HTMLTableRowElement,\n                              endHtmlRow: HTMLTableRowElement = this.tbody.lastElementChild as HTMLTableRowElement,\n                              nesting: number = 0){\n        if(startHtmlRow === endHtmlRow) return\n        const primaryHtmlCell = startHtmlRow.cells[nesting]\n\n        if(!primaryHtmlCell?.classList?.contains(\"primary\")) return\n        let nextHtmlRow = startHtmlRow\n        do {\n            nextHtmlRow = nextHtmlRow.nextElementSibling as HTMLTableRowElement\n            const nextPrimaryHtmlCell = nextHtmlRow.cells[0]\n            if(primaryHtmlCell.textContent === nextPrimaryHtmlCell.textContent){\n                primaryHtmlCell.rowSpan++\n                nextPrimaryHtmlCell.hidden = true\n            } else {\n                this.groupPrimaryCells(startHtmlRow, nextHtmlRow, nesting + 1)\n                this.groupPrimaryCells(nextHtmlRow, endHtmlRow)\n                return\n            }\n        }\n        while (nextHtmlRow !== endHtmlRow)\n    }\n}"],"names":["Fragment","constructor","core","location","slot","this","target","insertAdjacentElement","position","createElement","tagName","classes","attributes","element","document","className","forEach","attributeEntry","setAttribute","emptyElement","firstElementChild","remove","mapOf","pairs","Map","map","pair","first","second","numberOf","word","isNaN","Number","resolveCSS","name","source","headElement","querySelector","styleEl","appendChild","debugElement","tableFragment","super","thead","tbody","tfoot","bodyContent","append","setHead","head","headRow","createHTMLRow","headCell","createHeadHTMLCell","content","rowSpan","colSpan","setBody","addBody","contentMap","maps","buffer","push","entries","concatMaps","sort","a","b","valueCells","primaryCells","cell","createHTMLPrimaryCell","concat","createHTMLCell","String","groupPrimaryCells","setTotal","total","values","value","i","_a","createTotalHTMLRow","htmlCells","tr","primaryTotalCell","querySelectorAll","length","totalHtmlRow","cellContent","th","td","isHead","textContent","startHtmlRow","endHtmlRow","lastElementChild","nesting","primaryHtmlCell","cells","classList","contains","nextHtmlRow","nextElementSibling","nextPrimaryHtmlCell","hidden","randomWord","words","Math","floor","random","items","Set","setOf","primaryCellsSize","valueCellsSize","tableSize","j","set","createContentMap"],"mappings":"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"}