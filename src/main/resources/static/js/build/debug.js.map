{"version":3,"file":"debug.js","sources":["../../../../../../../typescript/fragments/abstract/Fragment.ts","../../../../../../../typescript/utils/DOMWizard.ts","../../../../../../../typescript/utils/misc.ts","../../../../../../../typescript/fragments/abstract/InputFragment.ts","../../../../../../../typescript/fragments/inputs/Text.ts","../../../../../../../typescript/utils/resolver.ts","../../../../../../../typescript/debug.ts","../../../../../../../typescript/fragments/report/content/TableFragment.ts"],"sourcesContent":["export abstract class Fragment {\n\n    private coreElement: HTMLElement\n    private insertCallback: (() => void)|void\n\n    protected set core(element: HTMLElement){\n        if(!this.coreElement){\n            this.coreElement = element\n            this.insertCallback = !!this.insertCallback ? this.insertCallback() : null\n        }\n        else throw new Error(\"The core cannot be reassigned\")\n    }\n    get core(): typeof this.coreElement{\n        return this.coreElement\n    }\n\n    protected constructor(location: FragmentLocation) {\n        this.insertCallback = () => {\n            if(!!location.position)\n                location.target.insertAdjacentElement(location.position, this.coreElement)\n            else\n                location.target.replaceWith(this.coreElement)\n        }\n    }\n\n    set class(className: string){\n        this.core.className = className\n    }\n    get class(): string{\n        return this.core.className\n    }\n    addClass   =(className: string) => this.core.classList.add(className)\n    removeClass=(className: string) => this.core.classList.remove(className)\n    toggleClass=(className: string) => this.core.classList.toggle(className)\n}","// Returns created element with specific tag name and attributes\nexport function createElement<T extends HTMLElement>(tagName: string, textContent: string = \"\", ...attributes: Attribute[]): T{\n    const element = document.createElement(tagName) as T\n    if(textContent) element.textContent = textContent\n    attributes?.forEach(attribute =>\n        element.setAttribute(\n            Object.keys(attribute)[0],\n            String(Object.values(attribute)[0])\n        )\n    )\n    return element\n}\n\nexport function createDivElement(...attributes: Attribute[]): HTMLDivElement{\n    return createElement(\"div\", \"\", ...attributes)\n}\n\nexport function createButtonElement(textContent: string = \"\", ...attributes: Attribute[]): HTMLButtonElement{\n    return createElement(\"button\", textContent, ...attributes)\n}\n\nexport function createInputElement(type: string, ...attributes: Attribute[]): HTMLInputElement{\n    return createElement(\"input\", \"\", {type}, ...attributes)\n}\n\nexport function createLabelElement(textContent: string = \"\", ...attributes: Attribute[]): HTMLLabelElement{\n    return createElement(\"label\", textContent, ...attributes)\n}\n\nexport function createImageElement(src: string = \"\", alt: string = \"not found\", ...attributes: Attribute[]): HTMLImageElement{\n    return createElement(\"img\", \"\", {src}, ...attributes)\n}\n\n// Removes all child elements\nexport function emptyElement(element: Element){\n    while(element.firstElementChild !== null)\n        element.firstElementChild.remove()\n}\n\n// Returns startName with serial number\nexport function generateUniqueId(startName: string = \"element\"){\n    let serialNumber = -1,\n        name: string\n\n    do name = startName +\"-\"+ serialNumber++\n    while (document.getElementById(name) !== null)\n\n    return name\n}","// Returns vararg items as a Set of the vararg items\nexport function setOf<T>(...items: T[]): Set<T>{\n    return new Set(items)\n}\n\n// Returns a Map of the vararg Pair entries\nexport function mapOf<K, V>(...entries: Pair<K, V>[]): Map<K, V>{\n    return new Map(entries.map(entry => [entry.first, entry.second]))\n}\n\n// Returns two arguments as a Pair object\nexport function pairOf<F, S>(first: F, second: S): Pair<F, S>{\n    return {first, second}\n}\n\n// Returns a basic number from gotten string if this is possible, or 0 if not\nexport function numberOf(word: string|number): number {\n    return isNaN(Number(word)) ? 0 : Number(word)\n}\n\n// Returns a Map consisting of the vararg Maps\nexport function concatMaps(...maps: Map<any, any>[]): Map<any, any>{\n    const buffer = []\n    maps.forEach(map => buffer.push(...map.entries()))\n    return new Map(buffer)\n}\n\n// Returns sorted by key Map\nexport function sortMap<K, V>(contentMap: Map<K, V>): Map<K, V>{\n    return new Map([...contentMap.entries()].sort(\n        (a : [K, V], b : [K, V]) : number => a[0] > b[0] ? 1 : a[0] < b[0] ? -1 : 0\n    ))\n}\n\nexport function filterMap<K, V>(map: Map<K, V>, filter: (value: V, key: K) => boolean): Map<K, V> {\n    return new Map(Array.from(map).filter(([key, value]) => filter(value, key)))\n}\n\nexport function stringifyDate(date: Date): string {\n    const year = date.getFullYear(),\n        month = date.getMonth() + 1,\n        day = date.getDate()\n    return `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day}`\n}\n\nexport function javaSetToSet(javaSet: string): Set<string>{\n    return setOf(...splitJavaCollection(javaSet))\n}\n\nexport function javaMapToMap(javaMap: string): Map<string, string>{\n    return mapOf(\n        ...splitJavaCollection(javaMap)\n        .map(pair => {\n            const entry = pair.split(\"=\")\n            return pairOf(entry[0], entry[1])\n        })\n    )\n}\n\nexport function splitJavaCollection(javaCollection: string): string[]{\n    return javaCollection\n        .slice(1, -1) // Removing '{' and '}' in the both sides of the string\n        .split(\", \")\n}\n\nexport function setCursorToLoading() {\n    document.documentElement.style.cursor = 'wait'\n}\n\nexport function setCursorToDefault() {\n    document.documentElement.style.cursor = 'default'\n}","import {Fragment} from \"./Fragment\"\n\nexport abstract class InputFragment<V> extends Fragment{\n\n    private _value: V\n    private valueEventCallbacks: ((value?: V) => void)[] = []\n    get value(): V {\n        return this._value\n    }\n    protected set value(value: V){\n        this._value = value\n        this.valueEventCallbacks.forEach(callback => callback(value))\n    }\n\n    protected constructor(protected readonly location: FragmentLocation) { super(location) }\n\n    subscribe(onValueEvent: (value: V) => void){\n        this.valueEventCallbacks.push(onValueEvent)\n        if(this.value)\n            onValueEvent(this.value)\n    }\n\n    protected debounce(callback: () => void, delay: number = 100): () => void {\n        let timeoutId: NodeJS.Timeout;\n        return () => {\n            clearTimeout(timeoutId)\n            timeoutId = setTimeout(callback, delay)\n        }\n    }\n}","import {createButtonElement, createDivElement, createInputElement} from \"../../utils/DOMWizard\"\nimport {InputFragment} from \"../abstract/InputFragment\"\n\nexport class Text extends InputFragment<string>{\n\n    private textInputElement    = createInputElement(\"text\")\n    private resetButtonElement = createButtonElement( \"❌\",{class: \"reset\"})\n\n    constructor(location: FragmentLocation) {\n        super(location)\n        this.core = createDivElement({class: \"text\"})\n        this.core.append(this.textInputElement, this.resetButtonElement)\n        this.textInputElement.addEventListener(\"input\",\n            this.debounce(() => this.value = this.textInputElement.value)\n        )\n        this.resetButtonElement.addEventListener(\"click\",\n            () => this.value = this.textInputElement.value = \"\"\n        )\n    }\n}","export function resolveCSS(name: string){\n    const source = `./css/${name}.css`\n    const headElement = document.querySelector(\"head\")\n    if(headElement.querySelector(`link[href=\"${source}\"]`) === null) {\n        const styleEl = document.createElement(\"link\")\n        styleEl.setAttribute(\"rel\", \"stylesheet\")\n        styleEl.setAttribute(\"href\", source)\n        headElement.appendChild(styleEl)\n    }\n}","import {TableFragment} from \"./fragments/report/content/TableFragment\";\nimport {setOf} from \"./utils/misc\"\nimport {resolveCSS} from \"./utils/resolver\"\nimport {Text} from \"./fragments/inputs/Text\";\n\nresolveCSS(\"global\")\nresolveCSS(\"inputs\")\nresolveCSS(\"states\")\nresolveCSS(\"third-party/animate\")\nresolveCSS(\"report/table\")\n\nconst debugElement: HTMLElement = document.querySelector(\"debug\")\ndebugElement.className = \"report\"\n\n// const textInput = new Text({target: debugElement})\n// textInput.subscribe(value => console.log(value))\n\nconst tableFragment = new TableFragment({\n    target: debugElement\n})\n\ntableFragment.setHead(setOf(\n    [{content: \"Primary\", colSpan: 2}, {content: \"Values\", colSpan: 5}],\n    [{content: \"1\", hasFilter: true}, {content: \"2\", hasFilter: true}, {content: \"1\", hasFilter: true}, {content: \"2\", hasFilter: true}, {content: \"3\", hasFilter: true}, {content: \"4\", hasFilter: true}, {content: \"5\", hasFilter: true}]\n))\ntableFragment.setBody(createContentMap(2, 5, 30))\ntableFragment.setTotal()\n\n\n\n// создание и заполнение MAP\nfunction createContentMap(primaryCellsSize: number, valueCellsSize: number, tableSize: number): TableBody {\n    const contentMap: TableBody = new Map();\n    for(let i : number = 0; i < tableSize; i++){\n        const primaryCells: string[] = [];\n        for(let j : number = 0; j < primaryCellsSize; j++) {\n            primaryCells[j] = (primaryCells.length > 0 ? primaryCells[j-1]+\".\" : \"\")+randomWord()\n        }\n        const valueCells: number[] = []\n        for(let j : number = 0; j < valueCellsSize; j++)\n            valueCells[j] = Math.floor(Math.random()*1000);\n        contentMap.set(primaryCells, valueCells);\n    }\n    return contentMap;\n}\n\n//рандомная строка\nfunction randomWord():string {\n    const words :string [] = ['Вахта','Вакцина','Отечество','Владения','Овца','Решительность',\n        'Рана','Опасность','Производство','Коммерция','Звание','Начало','Институт',\n        'Происшествие','Икона','Полнота','Консерва','Доставка','Адмирал','Ассамблея',\n        'Избыток','Муниципалитет','Руководство','Мышцы','Заболевание','Отзыв','Натура',\n        'Дискотека','Монахиня'];\n    return words[Math.floor(Math.random()*(words.length-1))];\n}","import {Fragment} from \"../../abstract/Fragment\"\nimport {emptyElement, createElement} from \"../../../utils/DOMWizard\"\nimport {concatMaps, filterMap, numberOf, sortMap} from \"../../../utils/misc\"\nimport {Text} from \"../../inputs/Text\"\n\nexport class TableFragment extends Fragment{\n\n    protected thead: HTMLTableSectionElement = createElement(\"thead\")\n    protected tbody: HTMLTableSectionElement = createElement(\"tbody\")\n    protected tfoot: HTMLTableSectionElement = createElement(\"tfoot\")\n\n    protected bodyContent: TableBody = new Map()\n\n    // Key is filtrated column, value is filter text value\n    protected filtersMap: Map<number, string> = new Map()\n\n    constructor(location: FragmentLocation) {\n        super(location)\n        this.core = createElement(\"table\")\n        this.core.append(this.thead, this.tfoot, this.tbody)\n    }\n\n    setHead(head: TableHead){\n        emptyElement(this.thead)\n        head.forEach(headRow => {\n            let columnId: number = 0\n            this.thead.appendChild(\n                this.createHTMLRow(headRow.map(\n                    headCell => {\n                        const htmlHeadCell = this.createHTMLHeadCell(headCell.content, headCell.rowSpan, headCell.colSpan)\n                        if (headCell.hasFilter === true) this.setFilter(htmlHeadCell, columnId)\n                        columnId = columnId + htmlHeadCell.colSpan\n                        return htmlHeadCell\n                    })\n                )\n            )\n        })\n    }\n\n    setBody(bodyContent: TableBody){\n        emptyElement(this.tbody)\n        this.bodyContent = new Map()\n        this.addBody(bodyContent)\n    }\n\n    addBody(bodyContent: TableBody){\n        this.bodyContent = concatMaps(this.bodyContent, bodyContent)\n        sortMap(this.filterBodyContent(this.bodyContent)).forEach((valueCells, primaryCells) =>\n            this.tbody.append(this.createHTMLRow(\n                primaryCells.map(cell => this.createHTMLCell(cell, \"primary\")).concat(\n                    valueCells.map(cell => this.createHTMLCell(String(cell))))))\n        )\n        this.groupPrimaryCells()\n    }\n\n    setTotal(total?: ValueCell[]){\n        if(!total){\n            total = []\n            this.bodyContent.forEach(values=> values.forEach((value, i) => {\n                total[i] = total[i] ? numberOf(total[i]) + numberOf(value) : value\n            }))\n        }\n        this.tfoot.querySelector(\".total\")?.remove()\n        this.tfoot.appendChild(this.createHTMLTotalRow(total.map(value => this.createHTMLCell(value))))\n    }\n\n    private createHTMLTotalRow(htmlCells: HTMLTableCellElement[]): HTMLTableRowElement{\n        const primaryTotalCell = this.createHTMLCell(\"Всего\")\n        primaryTotalCell.colSpan = this.tbody.querySelector(\"tr\").querySelectorAll(\".primary\").length\n        return this.createHTMLRow([primaryTotalCell, ...htmlCells], \"total\")\n    }\n\n    private createHTMLRow(htmlCells: HTMLTableCellElement[], cssClass?: string): HTMLTableRowElement{\n        const tr: HTMLTableRowElement = createElement(\"tr\", \"\", {class: cssClass})\n        tr.append(...htmlCells)\n        return tr\n    }\n\n    private createHTMLHeadCell(cellContent: string, rowSpan: number = 1, colSpan: number = 1): HTMLTableCellElement{\n        return createElement(\"th\", cellContent, {rowspan: rowSpan}, {colspan: colSpan})\n    }\n\n    private createHTMLCell(cellContent: string|number, cssClass?: string): HTMLTableCellElement {\n        return createElement(\"td\", String(cellContent), {class: cssClass})\n    }\n\n    private setFilter(htmlHeadCell: HTMLTableCellElement, targetColumnId: number){\n        const filterFragment = new Text({target: htmlHeadCell})\n        filterFragment.subscribe(value => {\n            this.filtersMap.set(targetColumnId, value)\n            this.setBody(this.bodyContent)\n        })\n    }\n\n    private filterBodyContent(bodyContent: TableBody): TableBody{\n        return filterMap(bodyContent, (valueCells, primaryCells) => {\n            const cellTexts = primaryCells.concat(valueCells.map(v => String(v)))\n            for (let i = 0; i < cellTexts.length; i++) {\n                const filterText = this.filtersMap.get(i)\n                if(!cellTexts[i].toLowerCase().includes(filterText ? filterText.toLowerCase() : \"\"))\n                    return false\n            }\n            return true\n        })\n    }\n\n    private groupPrimaryCells(startHtmlRow: HTMLTableRowElement = this.tbody.firstElementChild as HTMLTableRowElement,\n                              endHtmlRow: HTMLTableRowElement = this.tbody.lastElementChild as HTMLTableRowElement,\n                              nesting: number = 0){\n        if(startHtmlRow === endHtmlRow) return\n        const primaryHtmlCell = startHtmlRow.cells[nesting]\n        if(!primaryHtmlCell?.classList?.contains(\"primary\")) return\n        let nextHtmlRow = startHtmlRow\n        do {\n            nextHtmlRow = nextHtmlRow.nextElementSibling as HTMLTableRowElement\n            const nextPrimaryHtmlCell = nextHtmlRow.cells[0]\n            if(primaryHtmlCell.textContent === nextPrimaryHtmlCell.textContent){\n                primaryHtmlCell.rowSpan++\n                nextPrimaryHtmlCell.hidden = true\n            } else {\n                this.groupPrimaryCells(startHtmlRow, nextHtmlRow, nesting + 1)\n                this.groupPrimaryCells(nextHtmlRow, endHtmlRow)\n                return\n            }\n        }\n        while (nextHtmlRow !== endHtmlRow)\n    }\n}"],"names":["Fragment","core","element","this","coreElement","Error","insertCallback","constructor","location","addClass","className","classList","add","removeClass","remove","toggleClass","toggle","position","target","insertAdjacentElement","replaceWith","class","createElement","tagName","textContent","attributes","document","forEach","attribute","setAttribute","Object","keys","String","values","emptyElement","firstElementChild","numberOf","word","isNaN","Number","InputFragment","value","_value","valueEventCallbacks","callback","super","subscribe","onValueEvent","push","debounce","delay","timeoutId","clearTimeout","setTimeout","Text","textInputElement","type","createInputElement","resetButtonElement","createButtonElement","createDivElement","append","addEventListener","resolveCSS","name","source","headElement","querySelector","styleEl","appendChild","debugElement","tableFragment","thead","tbody","tfoot","bodyContent","Map","filtersMap","setHead","head","headRow","columnId","createHTMLRow","map","headCell","htmlHeadCell","createHTMLHeadCell","content","rowSpan","colSpan","hasFilter","setFilter","setBody","addBody","contentMap","maps","buffer","entries","concatMaps","filterBodyContent","sort","a","b","valueCells","primaryCells","cell","createHTMLCell","concat","groupPrimaryCells","setTotal","total","i","_a","createHTMLTotalRow","htmlCells","primaryTotalCell","querySelectorAll","length","cssClass","tr","cellContent","rowspan","colspan","targetColumnId","set","filter","cellTexts","v","filterText","get","toLowerCase","includes","Array","from","key","startHtmlRow","endHtmlRow","lastElementChild","nesting","primaryHtmlCell","cells","contains","nextHtmlRow","nextElementSibling","nextPrimaryHtmlCell","hidden","randomWord","words","Math","floor","random","items","Set","setOf","primaryCellsSize","valueCellsSize","tableSize","j","createContentMap"],"mappings":"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"}