{"version":3,"file":"debug.js","sources":["../../../../../../../typescript/fragments/Fragment.ts","../../../../../../../typescript/utils/DOMWizard.ts","../../../../../../../typescript/utils/misc.ts","../../../../../../../typescript/utils/resolver.ts","../../../../../../../typescript/debug.ts","../../../../../../../typescript/fragments/report/content/TableFragment.ts"],"sourcesContent":["export abstract class Fragment {\n    protected constructor(\n        protected readonly core: HTMLElement,\n        protected readonly location?: FragmentLocation\n    ) {\n        if(location)\n            (location.target instanceof Fragment\n                ? location.target.core!\n                : location.target)\n                .insertAdjacentElement(location.position ? location.position : \"beforeend\", core)\n    }\n}","// Returns created element with specific tag name and attributes\nexport function createElement<T extends HTMLElement>(tagName: string, textContent: string = \"\", ...attributes: Attribute[]): T{\n    const element = document.createElement(tagName) as T\n    if(textContent) element.textContent = textContent\n    attributes?.forEach(attribute =>\n        element.setAttribute(\n            Object.keys(attribute)[0],\n            String(Object.values(attribute)[0])\n        )\n    )\n    return element\n}\n\n// Removes all child elements\nexport function emptyElement(element: Element){\n    while(element.firstElementChild !== null)\n        element.firstElementChild.remove()\n}","// Returns vararg items as a Set of the vararg items\nexport function setOf<T>(...items: T[]): Set<T>{\n    return new Set(items)\n}\n\n// Returns a Map of the vararg Pair entries\nexport function mapOf<K, V>(...entries: Pair<K, V>[]): Map<K, V>{\n    return new Map(entries.map(entry => [entry.first, entry.second]))\n}\n\n// Returns two arguments as a Pair object\nexport function pairOf<F, S>(first: F, second: S): Pair<F, S>{\n    return {first, second}\n}\n\n// Returns a basic number from gotten string if this is possible, or 0 if not\nexport function numberOf(word: string|number): number {\n    return isNaN(Number(word)) ? 0 : Number(word)\n}\n\n// Returns a Map consisting of the vararg Maps\nexport function concatMaps(...maps: Map<any, any>[]): Map<any, any>{\n    const buffer = []\n    maps.forEach(map => buffer.push(...map.entries()))\n    return new Map(buffer)\n}\n\n// Returns sorted by key Map\nexport function sortMap<K, V>(contentMap: Map<K, V>): Map<K, V>{\n    return new Map([...contentMap.entries()].sort(\n        (a : [K, V], b : [K, V]) : number => a[0] > b[0] ? 1 : a[0] < b[0] ? -1 : 0\n    ))\n}\n\n\nexport function stringifyDate(date: Date): string {\n    const year = date.getFullYear(),\n        month = date.getMonth() + 1,\n        day = date.getDate()\n    return `${year}-${month < 10 ? '0' : ''}${month}-${day < 10 ? '0' : ''}${day}`\n}\n\nexport function javaSetToSet(javaSet: string): Set<string>{\n    return setOf(...splitJavaCollection(javaSet))\n}\n\nexport function javaMapToMap(javaMap: string): Map<string, string>{\n    return mapOf(\n        ...splitJavaCollection(javaMap)\n        .map(pair => {\n            const entry = pair.split(\"=\")\n            return pairOf(entry[0], entry[1])\n        })\n    )\n}\n\nexport function splitJavaCollection(javaCollection: string): string[]{\n    return javaCollection\n        .slice(1, -1) // Removing '{' and '}' in the both sides of the string\n        .split(\", \")\n}\n\nexport function mapToOptions(map: Map<string, string>): Option[]{\n    return [...map.entries()].map(entry => entryToOption(entry))\n}\n\nexport function jsonToOptions(json: object): Option[]{\n    return Object.entries(json).map(entry => entryToOption(entry))\n}\n\nexport function entryToOption(entry: [string, string]): Option  {\n   return  {\n       label: entry[1],\n       value: entry[0],\n       alias: entry[0],\n       description: entry[0]\n    }\n}\n\nexport function optionsToMap(options: Option[]): Map<string, string>{\n    const map: Map<string, string> = new Map()\n    options.forEach(option => map.set(option.value, option.label))\n    return map\n}\n\nexport function setCursorToLoading() {\n    document.documentElement.style.cursor = 'wait'\n}\n\nexport function setCursorToDefault() {\n    document.documentElement.style.cursor = 'default'\n}","export function resolveCSS(name: string){\n    const source = `./css/${name}.css`\n    const headElement = document.querySelector(\"head\")\n    if(headElement.querySelector(`link[href=\"${source}\"]`) === null) {\n        const styleEl = document.createElement(\"link\")\n        styleEl.setAttribute(\"rel\", \"stylesheet\")\n        styleEl.setAttribute(\"href\", source)\n        headElement.appendChild(styleEl)\n    }\n}","import {TableFragment} from \"./fragments/report/content/TableFragment\";\nimport {setOf} from \"./utils/misc\"\nimport {resolveCSS} from \"./utils/resolver\"\n\nresolveCSS(\"global\")\nresolveCSS(\"inputs\")\nresolveCSS(\"states\")\nresolveCSS(\"third-party/animate\")\nresolveCSS(\"report/table\")\n\nconst debugElement: HTMLElement = document.querySelector(\"debug\"),\n    tableFragment = new TableFragment({\n        target: debugElement\n    })\n\ndebugElement.className = \"report\"\n\ntableFragment.setHead(setOf(\n    [{content: \"Primary\", colSpan: 2}, {content: \"Values\", colSpan: 5}],\n    [{content: \"1\"}, {content: \"2\"}, {content: \"1\"}, {content: \"2\"}, {content: \"3\"}, {content: \"4\"}, {content: \"5\"}]\n))\ntableFragment.setBody(createContentMap(2, 5, 30))\ntableFragment.setTotal()\n\n\n\n// создание и заполнение MAP\nfunction createContentMap(primaryCellsSize: number, valueCellsSize: number, tableSize: number): TableBody {\n    const contentMap: TableBody = new Map();\n    for(let i : number = 0; i < tableSize; i++){\n        const primaryCells: string[] = [];\n        for(let j : number = 0; j < primaryCellsSize; j++) {\n            primaryCells[j] = (primaryCells.length > 0 ? primaryCells[j-1]+\".\" : \"\")+randomWord()\n        }\n        const valueCells: number[] = []\n        for(let j : number = 0; j < valueCellsSize; j++)\n            valueCells[j] = Math.floor(Math.random()*1000);\n        contentMap.set(primaryCells, valueCells);\n    }\n    return contentMap;\n}\n\n//рандомная строка\nfunction randomWord():string {\n    const words :string [] = ['Вахта','Вакцина','Отечество','Владения','Овца','Решительность',\n        'Рана','Опасность','Производство','Коммерция','Звание','Начало','Институт',\n        'Происшествие','Икона','Полнота','Консерва','Доставка','Адмирал','Ассамблея',\n        'Избыток','Муниципалитет','Руководство','Мышцы','Заболевание','Отзыв','Натура',\n        'Дискотека','Монахиня'];\n    return words[Math.floor(Math.random()*(words.length-1))];\n}","import {Fragment} from \"../../Fragment\"\nimport {emptyElement, createElement} from \"../../../utils/DOMWizard\"\nimport {concatMaps, numberOf, sortMap} from \"../../../utils/misc\"\n\nexport class TableFragment extends Fragment{\n\n    protected thead: HTMLTableSectionElement = createElement(\"thead\")\n    protected tbody: HTMLTableSectionElement = createElement(\"tbody\")\n    protected tfoot: HTMLTableSectionElement = createElement(\"tfoot\")\n\n    protected bodyContent: TableBody = new Map()\n\n    constructor(location: FragmentLocation) {\n        super(createElement(\"table\"), location)\n        this.core.append(this.thead, this.tfoot, this.tbody)\n    }\n\n    setHead(head: TableHead){\n        emptyElement(this.thead)\n        head.forEach(headRow =>\n            this.thead.appendChild(\n                this.createHTMLRow(headRow.map(\n                    headCell => this.createHTMLHeadCell(headCell.content, headCell.rowSpan, headCell.colSpan))\n                )\n            )\n        )\n    }\n\n    setBody(bodyContent: TableBody){\n        emptyElement(this.tbody)\n        this.bodyContent = new Map()\n        this.addBody(bodyContent)\n    }\n\n    addBody(bodyContent: TableBody){\n        this.bodyContent = sortMap(concatMaps(this.bodyContent, bodyContent))\n        this.bodyContent.forEach((valueCells, primaryCells) =>\n            this.tbody.append(this.createHTMLRow(\n                primaryCells.map(cell => this.createHTMLCell(cell, \"primary\")).concat(\n                    valueCells.map(cell => this.createHTMLCell(String(cell))))))\n        )\n        this.groupPrimaryCells()\n    }\n\n    setTotal(total?: ValueCell[]){\n        if(!total){\n            total = []\n            this.bodyContent.forEach(values=> values.forEach((value, i) => {\n                total[i] = total[i] ? numberOf(total[i]) + numberOf(value) : value\n            }))\n        }\n        this.tfoot.querySelector(\".total\")?.remove()\n        this.tfoot.appendChild(this.createHTMLTotalRow(total.map(value => this.createHTMLCell(value))))\n    }\n\n    private createHTMLTotalRow(htmlCells: HTMLTableCellElement[]): HTMLTableRowElement{\n        const primaryTotalCell = this.createHTMLCell(\"Всего\")\n        primaryTotalCell.colSpan = this.tbody.querySelector(\"tr\").querySelectorAll(\".primary\").length\n        return this.createHTMLRow([primaryTotalCell, ...htmlCells], \"total\")\n    }\n\n    private createHTMLRow(htmlCells: HTMLTableCellElement[], cssClass?: string): HTMLTableRowElement{\n        const tr: HTMLTableRowElement = createElement(\"tr\", \"\", {class: cssClass})\n        tr.append(...htmlCells)\n        return tr\n    }\n\n    private createHTMLHeadCell(cellContent: string, rowSpan: number = 1, colSpan: number = 1): HTMLTableCellElement{\n        return createElement(\"th\", cellContent, {rowspan: rowSpan}, {colspan: colSpan})\n    }\n\n    private createHTMLCell(cellContent: string|number, cssClass?: string): HTMLTableCellElement {\n        return createElement(\"td\", String(cellContent), {class: cssClass})\n    }\n\n    private groupPrimaryCells(startHtmlRow: HTMLTableRowElement = this.tbody.firstElementChild as HTMLTableRowElement,\n                              endHtmlRow: HTMLTableRowElement = this.tbody.lastElementChild as HTMLTableRowElement,\n                              nesting: number = 0){\n        if(startHtmlRow === endHtmlRow) return\n        const primaryHtmlCell = startHtmlRow.cells[nesting]\n        if(!primaryHtmlCell?.classList?.contains(\"primary\")) return\n        let nextHtmlRow = startHtmlRow\n        do {\n            nextHtmlRow = nextHtmlRow.nextElementSibling as HTMLTableRowElement\n            const nextPrimaryHtmlCell = nextHtmlRow.cells[0]\n            if(primaryHtmlCell.textContent === nextPrimaryHtmlCell.textContent){\n                primaryHtmlCell.rowSpan++\n                nextPrimaryHtmlCell.hidden = true\n            } else {\n                this.groupPrimaryCells(startHtmlRow, nextHtmlRow, nesting + 1)\n                this.groupPrimaryCells(nextHtmlRow, endHtmlRow)\n                return\n            }\n        }\n        while (nextHtmlRow !== endHtmlRow)\n    }\n}"],"names":["Fragment","constructor","core","location","this","target","insertAdjacentElement","position","createElement","tagName","textContent","attributes","element","document","forEach","attribute","setAttribute","Object","keys","String","values","emptyElement","firstElementChild","remove","numberOf","word","isNaN","Number","resolveCSS","name","source","headElement","querySelector","styleEl","appendChild","debugElement","tableFragment","super","thead","tbody","tfoot","bodyContent","Map","append","setHead","head","headRow","createHTMLRow","map","headCell","createHTMLHeadCell","content","rowSpan","colSpan","setBody","addBody","contentMap","maps","buffer","push","entries","concatMaps","sort","a","b","valueCells","primaryCells","cell","createHTMLCell","concat","groupPrimaryCells","setTotal","total","value","i","_a","createHTMLTotalRow","htmlCells","primaryTotalCell","querySelectorAll","length","cssClass","tr","class","cellContent","rowspan","colspan","startHtmlRow","endHtmlRow","lastElementChild","nesting","primaryHtmlCell","cells","classList","contains","nextHtmlRow","nextElementSibling","nextPrimaryHtmlCell","hidden","randomWord","words","Math","floor","random","className","items","Set","setOf","primaryCellsSize","valueCellsSize","tableSize","j","set","createContentMap"],"mappings":"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"}