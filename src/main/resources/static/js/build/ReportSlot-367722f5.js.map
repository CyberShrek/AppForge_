{"version":3,"file":"ReportSlot-367722f5.js","sources":["../../../../../../../typescript/fragments/report/ReportSlot.ts"],"sourcesContent":["import {Fragment} from \"../abstract/Fragment\"\n\nexport default class ReportSlot extends Fragment{\n    constructor(public location: FragmentLocation) {\n        super(location)\n    }\n}\n\nclass Report {\n    totalRow\n    rows = []\n    isEmpty\n    // (fetchedReport) is a table with header — basic array of column names, and body — rows whose are basic arrays too.\n    // (ReportRowClass) is a class used for totalRow and rows.\n    // (getTotalCell) is a function used for finding the total row via cell \"TOTAL\"\n    constructor(fetchedReport, getTotalCell) {\n        // Iterating through the all rows\n        for(const row of fetchedReportToRows(fetchedReport)){\n            if(!this.totalRow && getTotalCell(row).trim() === \"TOTAL\")\n                this.totalRow = row\n            else\n                this.rows.push(row)\n        }\n        this.isEmpty= this.rows.length === 0\n    }\n}\n\nclass ReportRow{\n    constructor(rowArray, columnNamedIndexes) {\n        for (const namedIndex in columnNamedIndexes) {\n            this[namedIndex] = rowArray[columnNamedIndexes[namedIndex]]\n        }\n    }\n}\n\nfunction fetchedReportToRows(reportTable){\n    const columnNamedIndexes = getColumnNamedIndexesOfHeader(reportTable.header)\n    return reportTable.body\n        .map(rowArray => new ReportRow(rowArray, columnNamedIndexes))\n}\n\n// Takes a header row array, find indexes by its values and returns an object having all these indexes as js fields\nfunction getColumnNamedIndexesOfHeader(header){\n    const indexes = {}\n    for (let i = 0; i < header.length; i++) {\n        indexes[header[i]] = i\n    }\n    return indexes\n}"],"names":["ReportSlot","Fragment","constructor","location","super","this"],"mappings":"2CAEqB,MAAAA,UAAmBC,EACpCC,YAAmBC,GACfC,MAAMD,GADSE,KAAQF,SAARA,CAElB"}