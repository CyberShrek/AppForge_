{"version":3,"file":"StationsServiceBank-3d6f7955.js","sources":["../../../../../../../typescript/api/OptionsAccessor.ts","../../../../../../../typescript/api/serviceBankOptions/AbstractServiceBank.ts","../../../../../../../typescript/api/serviceBankOptions/CarriersServiceBank.ts","../../../../../../../typescript/api/serviceBankOptions/CountriesServiceBank.ts","../../../../../../../typescript/api/serviceBankOptions/RegionsServiceBank.ts","../../../../../../../typescript/api/serviceBankOptions/RoadsServiceBank.ts","../../../../../../../typescript/api/serviceBankOptions/StationsServiceBank.ts"],"sourcesContent":["import {JsonAccessor} from \"./abstract/JsonAccessor\"\r\nimport {jsonToMap} from \"../util/data\";\r\n\r\nexport class OptionsAccessor extends JsonAccessor{\r\n\r\n    constructor(public path: string) {\r\n        super()\r\n        this.method = \"POST\"\r\n        this.errorFooter = \"Не удалось загрузить список опций\"\r\n    }\r\n\r\n    override fetch(properties?: {[property: string]: any}): Promise<OptionsMap> {\r\n        return super.fetch(properties).then(optionsJson => jsonToMap(optionsJson))\r\n    }\r\n}","import {userInfo} from \"../../store/userInfo\";\r\nimport {OptionsAccessor} from \"../OptionsAccessor\"\r\n\r\nexport abstract class AbstractServiceBank extends OptionsAccessor{\r\n\r\n    abstract userAssociatedOptionKeys: OptionKey[]\r\n\r\n    protected properties: ServiceBankSetup[\"properties\"]\r\n\r\n    protected dataCondition = () => this.properties?.date?.length > 0\r\n\r\n    protected abstract mainConditions: (() => boolean)[]\r\n\r\n    protected abstract requestStep: {\r\n        listName: string\r\n        specificBodiesFn?: () => {}[]\r\n    }\r\n\r\n    protected abstract userCheckPermission?: {\r\n        propertyName: string\r\n        propertyValue: string | number | boolean\r\n    }\r\n\r\n    protected abstract responseStep: {\r\n        parseItemToOptionFn: (items: any) => string[]\r\n        filterFn?: (item: any) => boolean\r\n        errorMessageEnding: string\r\n    }\r\n\r\n    constructor() {\r\n        super(`${document.location.origin}/servicebank/getdata`)\r\n    }\r\n\r\n    override fetch(properties?: ServiceBankSetup[\"properties\"]): Promise<OptionsMap> {\r\n        this.properties  = properties\r\n        if(this.mainConditions.find(conditionCallback => conditionCallback() === false))\r\n            return new Promise(resolve => resolve(new Map()))\r\n        else {\r\n            const fetchCallback=() => {\r\n                this.setServiceBankBody(this.requestStep.listName, this.requestStep.specificBodiesFn?.())\r\n                return this.fetchServiceBankOptions(this.responseStep.parseItemToOptionFn, this.responseStep.filterFn)\r\n            }\r\n            if(!userInfo.superUser && this.userCheckPermission){\r\n                this.properties[this.userCheckPermission.propertyName] = this.userCheckPermission.propertyValue\r\n            }\r\n            return fetchCallback()\r\n        }\r\n    }\r\n\r\n    private setServiceBankBody(listName: string, specificBodies: any[] = [{}]): void{\r\n        // Properties with unknown name will remain as custom properties\r\n        const custom = {...this.properties}\r\n        custom.date = custom.roads = custom.countries = custom.postSoviet = custom.carriers = undefined\r\n        this.body = {\r\n            [listName]: [...specificBodies.map(body => { return {\r\n                \"data\": this.properties.date[0],\r\n                ...body,\r\n                ...custom\r\n            }})]\r\n        }\r\n    }\r\n\r\n    private fetchServiceBankOptions(parseItemToOptionFn: (items: any) => string[],\r\n                                    filter?: (item: any) => boolean): Promise<OptionsMap> {\r\n\r\n        return super.fetch().then(json =>\r\n            // The only first item is approved\r\n            new Map((json[Object.keys(json as any)[0]] as Array<any>)\r\n                .filter((item) => filter ? filter(item) : true)\r\n                .map((item) => {\r\n                    const parsed = parseItemToOptionFn(item)\r\n                    parsed[1] = parsed[1].trim()\r\n                    return parsed as [string, string]\r\n                })\r\n            )\r\n        )\r\n    }\r\n}","import {AbstractServiceBank} from \"./AbstractServiceBank\"\r\nimport {userInfo} from \"../../store/userInfo\";\r\n\r\nexport class CarriersServiceBank extends AbstractServiceBank\r\n{\r\n    protected mainConditions = [this.dataCondition]\r\n\r\n    protected requestStep = {\r\n        listName: \"perList\",\r\n        specificBodiesFn: () => this.properties.countries.map(code => {\r\n            return {\"gos\": code}\r\n        })\r\n    }\r\n    protected responseStep = {\r\n        parseItemToOptionFn: item => [`${this.properties.countries?.length >= 2 ? item[\"gos\"] + '.' : ''}${item[\"skp\"]}`, item[\"nazvp\"]],\r\n        errorMessageEnding: \"перевозчиков\"\r\n    }\r\n    protected userCheckPermission = {\r\n        propertyName: \"skp\",\r\n        propertyValue: userInfo.carrier\r\n    }\r\n\r\n    userAssociatedOptionKeys = [`${userInfo.carrier}`]\r\n}","import {AbstractServiceBank} from \"./AbstractServiceBank\"\r\nimport {userInfo} from \"../../store/userInfo\";\r\n\r\nexport class CountriesServiceBank extends AbstractServiceBank\r\n{\r\n    protected mainConditions = [this.dataCondition]\r\n\r\n    protected requestStep = {\r\n        listName: \"gosList\"\r\n    }\r\n    protected responseStep = {\r\n        parseItemToOptionFn: (item => [item[\"g_kod\"], item[\"g_name\"]]),\r\n        filterFn: ((item) => !!this.properties?.postSoviet ? item[\"g_prsng\"] == \"1\" : true),\r\n        errorMessageEnding: \"государств\"\r\n    }\r\n    protected userCheckPermission = {\r\n        propertyName: \"gos\",\r\n        propertyValue: userInfo.country\r\n    }\r\n\r\n    userAssociatedOptionKeys = []\r\n}","import {AbstractServiceBank} from \"./AbstractServiceBank\"\r\n\r\nexport class RegionsServiceBank extends AbstractServiceBank\r\n{\r\n    protected mainConditions = [this.dataCondition]\r\n\r\n    protected requestStep = {\r\n        listName: \"sfList\"\r\n    }\r\n    protected responseStep = {\r\n        parseItemToOptionFn: item => [item[\"sf_kod2\"], item[\"sf_name\"]],\r\n        errorMessageEnding: \"субъектов\"\r\n    }\r\n    protected userCheckPermission\r\n\r\n    userAssociatedOptionKeys = []\r\n}","import {AbstractServiceBank} from \"./AbstractServiceBank\"\r\nimport {userInfo} from \"../../store/userInfo\";\r\n\r\nexport class RoadsServiceBank extends AbstractServiceBank\r\n{\r\n    protected mainConditions = [this.dataCondition, () => this.properties.countries?.length > 0]\r\n\r\n    protected requestStep = {\r\n        listName: \"dorList\",\r\n        specificBodiesFn: () => this.properties.countries.map(code => {\r\n            return {\"gos\": code}\r\n        })\r\n    }\r\n    protected responseStep = {\r\n        parseItemToOptionFn: item => [`${item[\"d_kod\"]}`, item[\"d_name\"]],\r\n        errorMessageEnding: \"дорог\"\r\n    }\r\n\r\n    protected userCheckPermission = {\r\n        propertyName: \"dor\",\r\n        propertyValue: userInfo.road\r\n    }\r\n\r\n    userAssociatedOptionKeys = [userInfo.road]\r\n}","import {AbstractServiceBank} from \"./AbstractServiceBank\"\r\n\r\nexport class StationsServiceBank extends AbstractServiceBank\r\n{\r\n    protected mainConditions = [this.dataCondition]\r\n\r\n    protected errorMessageEnding: string = \"станций\"\r\n    protected requestStep = {\r\n        listName: \"stanList\",\r\n        specificBodiesFn: () => this.properties.roads.map(code => {\r\n            return {\"dor\": this.properties.roads}\r\n        })\r\n    }\r\n    protected responseStep = {\r\n        parseItemToOptionFn: item => [item[\"stan\"], item[\"pnazv\"]],\r\n        errorMessageEnding: \"станций\"\r\n    }\r\n    protected userCheckPermission\r\n\r\n    userAssociatedOptionKeys = []\r\n}"],"names":["OptionsAccessor","JsonAccessor","constructor","path","super","this","method","errorFooter","fetch","properties","then","optionsJson","jsonToMap","AbstractServiceBank","document","location","origin","dataCondition","_a","date","_b","length","mainConditions","find","conditionCallback","Promise","resolve","Map","fetchCallback","setServiceBankBody","requestStep","listName","specificBodiesFn","call","fetchServiceBankOptions","responseStep","parseItemToOptionFn","filterFn","userInfo","superUser","userCheckPermission","propertyName","propertyValue","specificBodies","custom","Object","assign","roads","countries","postSoviet","carriers","undefined","body","map","data","filter","json","keys","item","parsed","trim","CarriersServiceBank","code","gos","errorMessageEnding","carrier","userAssociatedOptionKeys","CountriesServiceBank","country","RegionsServiceBank","RoadsServiceBank","road","StationsServiceBank","dor"],"mappings":"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"}