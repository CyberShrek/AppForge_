{"version":3,"file":"ForgedApplication-3d410daf.js","sources":["../../../../../../../typescript/fragments/Fragment.ts","../../../../../../../typescript/fragments/inputs/Button.ts","../../../../../../../typescript/fragments/main/Header.ts","../../../../../../../typescript/fragments/inputs/Datepicker.ts","../../../../../../../typescript/fragments/InlineFragment.ts","../../../../../../../typescript/fragments/form/section/field/Field.ts","../../../../../../../typescript/fragments/form/section/field/DatepickerField.ts","../../../../../../../typescript/fragments/inputs/Checkbox.ts","../../../../../../../typescript/fragments/inputs/Switch.ts","../../../../../../../typescript/fragments/form/section/field/SwitchField.ts","../../../../../../../typescript/fragments/inputs/Select.ts","../../../../../../../typescript/api/serviceBank/AbstractServiceBank.ts","../../../../../../../typescript/api/serviceBank/CarriersServiceBank.ts","../../../../../../../typescript/api/serviceBank/CountriesServiceBank.ts","../../../../../../../typescript/api/serviceBank/RegionsServiceBank.ts","../../../../../../../typescript/api/serviceBank/RoadsServiceBank.ts","../../../../../../../typescript/api/serviceBank/StationsServiceBank.ts","../../../../../../../typescript/fragments/form/section/field/SelectField.ts","../../../../../../../typescript/fragments/inputs/TextArea.ts","../../../../../../../typescript/fragments/form/section/field/TextField.ts","../../../../../../../typescript/fragments/form/section/Section.ts","../../../../../../../typescript/api/FormStatementAccessor.ts","../../../../../../../typescript/fragments/form/Form.ts","../../../../../../../typescript/fragments/navigation/NavigationBar.ts","../../../../../../../typescript/fragments/navigation/NavigationBody.ts","../../../../../../../typescript/fragments/navigation/NavigationContainer.ts","../../../../../../../typescript/api/Report.ts","../../../../../../../typescript/fragments/report/Head.ts","../../../../../../../typescript/fragments/inputs/TextInput.ts","../../../../../../../typescript/api/abstract/BlobAccessor.ts","../../../../../../../typescript/api/XlsxAccessor.ts","../../../../../../../typescript/util/DANGEROUS.ts","../../../../../../../typescript/fragments/report/content/Table.ts","../../../../../../../typescript/fragments/report/content/Context.ts","../../../../../../../typescript/fragments/report/Body.ts","../../../../../../../typescript/fragments/report/ReportSlot.ts","../../../../../../../typescript/fragments/applicatons/ForgedApplication.ts"],"sourcesContent":["import {create} from \"../util/domWizard\"\n\nexport abstract class Fragment<T extends HTMLElement = HTMLElement> {\n\n    root: T\n\n    protected constructor(root: string|T) {\n        this.root = root instanceof HTMLElement ? root : create(root)\n    }\n\n    append(...items: (Fragment | Element | string)[]){\n        items.forEach(item =>\n            this.root.append((item instanceof Fragment) ? item.root :\n                item)\n        )\n    }\n\n    select<T extends HTMLElement>(selectors: string){\n        return this.root.querySelector<T>(selectors)\n    }\n    selectAll<T extends HTMLElement>(selectors: string){\n        return this.root.querySelectorAll<T>(selectors)\n    }\n\n    get hidden() {\n        return !!this.root.hidden\n    }\n\n    hide(){\n        this.root.style.display = \"none\"\n        this.root.hidden = true\n    }\n    show(){\n        this.root.style.display = \"\"\n        this.root.hidden = false\n    }\n\n    remove(){\n        this.root.remove()\n    }\n\n    addClass(tokens: string){\n        this.root.classList.add(tokens)\n    }\n    removeClass(tokens: string){\n        this.root.classList.remove(tokens)\n    }\n    toggleClass(tokens: string, force?: boolean){\n        this.root.classList.toggle(tokens, force)\n    }\n    hasClass(token: string): boolean{\n        return this.root.classList.contains(token)\n    }\n    set className(className: string){\n        if(!!className)\n            this.root.className = className\n    }\n    get className(){\n        return this.root.className\n    }\n\n    listen(event: keyof HTMLElementEventMap, onEvent: (event?: Event) => void){\n        this.root.addEventListener(event, onEvent)\n    }\n\n    onMount(callback: () => void) {\n        const observer = new MutationObserver((mutationsList) => {\n            for (const mutation of mutationsList) {\n                if (mutation.target === this.root || mutation.target.contains(this.root)) {\n                    callback()\n                    observer.disconnect()\n                    break\n                }\n            }\n        })\n        observer.observe(document.documentElement, { childList: true, subtree: true })\n    }\n}","import {Fragment} from \"../Fragment\"\nimport {create} from \"../../util/domWizard\"\n\nexport class Button extends Fragment<HTMLButtonElement>{\n\n    private imageElement: HTMLImageElement\n\n    constructor(config: ButtonConfig, onClick: () => void) {\n        super(`<button></button>`)\n\n        this.className = config.className\n        this.text = config.text\n        this.image = config.image\n        this.hint = config.hint\n\n        this.listen(\"click\", event => {\n            event.preventDefault()\n            onClick()\n        })\n    }\n\n    set isAvailable(available: boolean){\n        if(available)\n            this.removeClass(\"unavailable\")\n        else this.addClass(\"unavailable\")\n    }\n    get isAvailable(): boolean{\n        return !this.hasClass(\"unavailable\")\n    }\n    enable=() => this.isAvailable = true\n    disable=() => this.isAvailable = false\n\n    get hint(): string{\n        return this.root.getAttribute(\"title\")\n    }\n\n    set hint(hint: string){\n        if(!!hint)\n            this.root.setAttribute(\"title\", hint)\n    }\n\n    set text(text: string){\n        this.root.textContent = text\n    }\n    get text(): string{\n        return this.root.textContent\n    }\n\n    set image(src: string|null){\n        this.imageElement?.remove()\n        if(!!src) {\n            this.imageElement = create(`<img src=\"/appforge/img/${src}\" alt=\"\"/>`)\n            this.append(this.imageElement)\n        }\n    }\n    get image(): string{\n        return this.imageElement?.src\n    }\n}","import {resolveCSS} from \"../../util/resolver\"\nimport {popupAction, popupList, popupTimeoutAction} from \"../../util/modal\"\nimport {appConfig} from \"../../store/appConfig\"\nimport {Fragment} from \"../Fragment\"\nimport {Button} from \"../inputs/Button\"\nimport {create} from \"../../util/domWizard\"\nimport {valueOrDefault} from \"../../util/data\";\nresolveCSS(\"header\")\n\nexport default class Header extends Fragment<HTMLHeadingElement>{\n\n    groupLink = create<HTMLLinkElement>(`<a></a>`)\n    appName = create<HTMLParagraphElement>(`<p></p>`)\n    resetButton = new Button({className: \"frameless reset\", image: \"reset.svg\", hint: \"Сброс\"}, () => location.reload())\n    infoButton  = new Button({className: \"frameless info\",  image: \"info.svg\",  hint: \"Информация о приложении\"}, () => this.showAppInfo())\n    helpButton  = new Button({className: \"frameless help\",  image: \"help.svg\",  hint: \"Руководство пользователя\"}, () => this.showHelpDownloader())\n\n    private appInfo: AppInfo\n\n    constructor() {\n        super(`<header id=\"header\"></header>`)\n\n        this.append(this.groupLink, \"|\", this.appName, this.resetButton, this.infoButton, this.helpButton)\n    }\n\n    setAppInfo(appInfo: AppInfo){\n        this.appInfo = appInfo\n        this.groupLink.href        = appInfo.groupPath\n        this.groupLink.textContent = appInfo.groupName\n        this.appName.textContent   = appInfo.name\n    }\n\n    private showAppInfo(){\n        popupList(\n            \"Информация\",\n            [\n                {icon: \"🛈\", text: \"Версия программы: \" + this.appInfo.version},\n                {icon: \"🗓\", text: \"Дата обновления: \"  + valueOrDefault(appConfig.info?.updateDate, this.appInfo.updateDate)},\n                {icon: \"👤\", text: \"Технолог: \"        + this.appInfo.technologistName}\n            ],\n            appConfig.info?.additional\n        )\n    }\n\n    private showHelpDownloader(){\n        popupAction(\n            \"Руководство\",\n            valueOrDefault(appConfig.info.description, \"\"),\n            \"Скачать инструкцию\",\n            () => downloadUserManual(this.appInfo.helpPath)\n        )\n    }\n}\n\nfunction downloadUserManual(href){\n    const link = document.createElement('a')\n    link.href = href\n    link.target = '_blank'\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n}","import {stringifyDate, valueOrDefault} from \"../../util/data\"\nimport {easepick} from \"@easepick/core\"\nimport {AmpPlugin} from \"@easepick/amp-plugin\"\nimport {RangePlugin} from \"@easepick/range-plugin\"\nimport {LockPlugin} from \"@easepick/lock-plugin\"\nimport {DateTime} from \"@easepick/datetime\"\nimport {Fragment} from \"../Fragment\"\nimport {Button} from \"./Button\"\n\nconst defaultDateTime = new DateTime()\n\nexport default class Datepicker extends Fragment{\n\n    pickedDateRange: FormattedDate = easepickDetailToDateRange({\n            date: defaultDateTime,\n            start: defaultDateTime,\n            end: defaultDateTime\n        },\n        this.config.range\n    )\n\n    pickDateRange(range: FormattedDate){\n        if(this.config.range && this.easepick){\n            this.easepick.setStartDate(range[0])\n            this.easepick.setEndDate(range[1])\n        } else\n            this.easepick.setDate(range[0])\n    }\n\n    private easepick: easepick.Core\n\n    constructor(private config: CalendarConfig, onPick: (range: FormattedDate) => void) {\n        super(`    \n            <div class=\"datepicker\"><input></div>\n        `)\n\n        const inputElement = this.root.querySelector(\"input\")\n\n        this.append(new Button({text: \"📅\"}, () => inputElement.click()))\n\n        this.onMount( () => {\n            this.easepick = createPicker(inputElement, config, dateRange => {\n                this.pickedDateRange = dateRange\n                onPick(dateRange)\n            })\n        })\n    }\n}\n\nfunction createPicker(core: HTMLElement, config: CalendarConfig, onSelect: (dateRange: FormattedDate) => void) {\n    return new easepick.create({\n        element: core,\n        calendars: config.range ? 2 : 1,\n        grid: 2,\n        zIndex: 100,\n        plugins: [config.range ? RangePlugin : null, AmpPlugin, LockPlugin],\n        lang: 'ru',\n        date: defaultDateTime,\n        RangePlugin: config.range ? {\n            startDate: defaultDateTime,\n            endDate: defaultDateTime,\n            locale: {\n                one: 'день',\n                few: 'дня',\n                many: 'дней'\n            },\n            delimiter: \" - \"\n        } : null,\n        AmpPlugin: {\n            darkMode: false,\n            resetButton: true,\n            dropdown: {\n                minYear: valueOrDefault(config.minYear, 2010), maxYear: config.maxYear, months: true, years: true\n            }\n        },\n        LockPlugin: {\n            minDays: config.minDays,\n            maxDays: config.maxDays\n        },\n        css: [\n            \"/appforge/css/third-party/easepick.css\"\n        ],\n        setup(picker) {\n            picker.on(\"select\", (e) => {\n                onSelect(easepickDetailToDateRange(e.detail, config.range))\n                setTimeout(() => picker.hide(), 10)\n            })\n        }\n    })\n}\n\nfunction easepickDetailToDateRange(detail: any, range: boolean): FormattedDate{\n    return range\n        ? [stringifyDate(detail.start), stringifyDate(detail.end)]\n        : stringifyDate(detail.date)\n}","import {Fragment} from \"./Fragment\";\n\nexport abstract class InlineFragment<PARENT extends Fragment, T extends HTMLElement = HTMLElement> extends Fragment<T>{\n    protected constructor(readonly parent: PARENT, root: string|T) {\n        super(root)\n        parent.append(this)\n    }\n}","import {Fragment} from \"../../../Fragment\"\nimport {jsonify, prettify} from \"../../../../util/data\"\nimport {Section} from \"../Section\"\nimport {InlineFragment} from \"../../../InlineFragment\";\nimport {create} from \"../../../../util/domWizard\";\n\nexport abstract class Field<VALUE> extends InlineFragment<Section>{\n\n    value: VALUE\n\n    // Need to be called by implementations on each value change to set actual value and trigger onValueChangeCallbacks\n    triggerValueChange(newValue?: VALUE){\n        this.value = newValue\n        this.onValueChangeCallbacks.forEach(callback => callback(this.value))\n    }\n\n    get jsonValue(){\n        return jsonify(this.value)\n    }\n\n    get prettyValue(){\n        return prettify(this.value)\n    }\n\n    makeValid(){\n        this.removeClass(\"wrong\")\n    }\n    makeInvalid(){\n        this.addClass(\"wrong\")\n    }\n\n    onValueChange(callback: (value?: VALUE) => void) {\n        this.onValueChangeCallbacks.push(callback)\n    }\n\n    protected constructor(\n        readonly parent: Section,\n        config: CommonFieldConfig,\n        createParagraph: boolean,\n        initValue: VALUE,\n        ...content: (string | Element | Fragment)[])\n    {\n        super(parent, `<div class=\"${config.type}-field field\" ${config.size ? `style=\"grid-column: span ${config.size}` : ''}\"></div>`)\n\n        if(createParagraph && config.label)\n            this.append(create(`<p>${config.label}</p>`))\n\n        this.append(...content)\n        this.value = initValue\n    }\n    private onValueChangeCallbacks: ((value?: VALUE) => void)[] = []\n}","import Datepicker from \"../../../inputs/Datepicker\"\nimport {Field} from \"./Field\"\nimport {Section} from \"../Section\"\nimport {create} from \"../../../../util/domWizard\";\n\nexport class DatepickerField extends Field<FormattedDate>{\n\n    private calendar = new Datepicker(this.config, range => this.triggerValueChange(range))\n\n    constructor(section: Section, private config: CalendarFieldConfig) {\n        super(section, config, true, null)\n        this.append(this.calendar)\n        this.value = this.calendar.pickedDateRange\n    }\n\n    override triggerValueChange(newValue?: FormattedDate) {\n        this.calendar.pickDateRange(newValue)\n        super.triggerValueChange(newValue)\n    }\n}","import {Fragment} from \"../Fragment\"\nimport {valueOrDefault} from \"../../util/data\";\n\nexport default class Checkbox extends Fragment<HTMLLabelElement>{\n\n    private checkboxElement: HTMLInputElement\n\n    constructor(config: CheckboxConfig, onToggle: (checked: boolean) => void) {\n        super(`\n            <label class=\"checkbox\">\n                <input type=\"checkbox\">\n                ${valueOrDefault(config.label, \"\")}\n            </label>`\n        )\n        this.checkboxElement = this.select(\"input\")\n        this.listen(\"change\", () => onToggle(this.checked))\n    }\n\n    get checked(): boolean{\n        return this.checkboxElement.checked\n    }\n\n}","import Checkbox from \"./Checkbox\"\nimport {create} from \"../../util/domWizard\";\n\n// Almost the same as Checkbox\nexport class Switch extends Checkbox{\n\n    constructor(config: SwitchConfig, onToggle: (checked: boolean) => void) {\n        super(config, onToggle)\n        this.className = \"switch\"\n        this.append(create(`<span class=\"slider\"></span>`))\n    }\n}","import Checkbox from \"../../../inputs/Checkbox\"\nimport {Field} from \"./Field\"\nimport {Section} from \"../Section\"\nimport {Switch} from \"../../../inputs/Switch\"\n\nexport class SwitchField extends Field<boolean>{\n\n    constructor(section: Section, config: SwitchFieldConfig) {\n        super(section, config, false, false,\n            new Switch(config, toggled => this.triggerValueChange(toggled)))\n    }\n}","import {resolveCSS, resolveJS} from \"../../util/resolver\"\nimport {compareMaps, valueOrDefault} from \"../../util/data\"\nimport {Fragment} from \"../Fragment\"\n\nresolveCSS(\"third-party/virtual-select\")\nconst virtualSelectModulePromise = resolveJS(\"third-party/virtual-select.min\")\n\nexport default class Select extends Fragment{\n\n    pickedKeys: OptionKey[] = []\n\n    readonly modulePromise = virtualSelectModulePromise\n\n    constructor(private config: SelectConfig, onPick: (pickedOptions: OptionKey[]) => void) {\n        super(`<div class=\"select\"></div>`)\n        this.modulePromise.then(() => {\n            applyVirtualSelect(this.root, config)\n            // this.root.\n        })\n\n        this.listen(\"change\", event => {\n            const value = event.currentTarget// @ts-ignore !!! Resolved by html import !!!\n                .value\n\n            const pickedKeys: typeof this.pickedKeys = value.length > 0 ? (\n                typeof value === \"object\" ? value : [value]\n            ) : []\n\n            // Need for check real changes to prevent callback doubling after options setting\n            if (this.pickedKeys.sort().toString() !== pickedKeys.sort().toString()) {\n                this.pickedKeys = pickedKeys\n                onPick(this.pickedKeys)\n            }\n        })\n    }\n\n    private options: Options = new Map()\n\n    updateOptions(options: Options){\n        if(compareMaps(this.options, options)) return\n        const pickedKeysBuffer = [...this.pickedKeys]\n        return this.modulePromise.then(() => {\n            if(options && options.size > 0) {\n                this.options = options\n                this.root// @ts-ignore !!! Resolved by html import !!!\n                    .setOptions(mapToVirtualSelectOptions(options))\n\n                this.pickOptions(pickedKeysBuffer)\n\n                this.root// @ts-ignore !!! Resolved by html import !!!\n                    .enable()\n            } else {\n                this.root// @ts-ignore !!! Resolved by html import !!!\n                    .disable()\n                this.root// @ts-ignore !!! Resolved by html import !!!\n                    .reset()\n                this.root.blur()\n            }\n        })\n    }\n\n    pickOptions(keys: OptionKey[]){\n        this.modulePromise.then(() => {\n            // @ts-ignore !!! Resolved by html import !!!\n            this.root.setValue(keys)\n        })\n    }\n\n    findOptions=(keys: OptionKey[]): Options =>\n        new Map(keys.map(key => [key, this.options.get(key)]))\n}\n\nfunction applyVirtualSelect(target: HTMLElement, config: SelectConfig){\n    // @ts-ignore !!! Resolved by html import !!!\n    VirtualSelect.init({\n        ele: target,\n        additionalClasses: \"multiselect\",\n        disabled: true,\n        autofocus: false,\n        markSearchResults: true,\n        zIndex: 100,\n        optionsCount: 6,\n        multiple: !!config.multiple,\n        search: !!config.search,\n        hasOptionDescription: !!config.showCodes,\n        disableSelectAll: !!config.disableSelectAll,\n        maxValues: config.maxValues,\n        maxWidth: \"100%\",\n        position: \"bottom\",\n        disableAllOptionsSelectedText: true,\n\n        placeholder: \"\",\n        noOptionsText: \"Варианты не найдены\",\n        noSearchResultsText: \"Результатов не найдено\",\n        selectAllText: \"Выбрать все\",\n        searchPlaceholderText: \"Поиск...\",\n        optionsSelectedText: \"(выбрано)\",\n        optionSelectedText: \"вариант выбран\",\n        allOptionsSelectedText: \"Все\",\n        clearButtonText: \"Очистить\",\n        moreText: \"ещё...\"\n    })\n}\n\nfunction mapToVirtualSelectOptions(map: Map<string, string>): any[]{\n    return [...map.entries()].map(entry => {\n        return {\n            label: entry[1],\n            value: entry[0],\n            alias: entry[0],\n            description: entry[0]\n        }\n    })\n}","import {JsonAccessor} from \"../abstract/JsonAccessor\"\nimport {userInfo} from \"../../store/userInfo\";\n\nexport abstract class AbstractServiceBank extends JsonAccessor{\n\n    override path = `${document.location.origin}/servicebank/getdata`\n\n    abstract userAssociatedOptionKeys: OptionKey[]\n\n    protected properties: ServiceBankSetup[\"properties\"]\n\n    protected dataCondition = () => this.properties?.date?.length > 0\n\n    protected abstract mainConditions: (() => boolean)[]\n\n    protected abstract requestStep: {\n        listName: string\n        specificBodiesFn?: () => {}[]\n    }\n\n    protected abstract userCheckPermission?: {\n        propertyName: string\n        propertyValue: string | number | boolean\n    }\n\n    protected abstract responseStep: {\n        parseItemToOptionFn: (items: any) => Option\n        filterFn?: (item: any) => boolean\n        errorMessageEnding: string\n    }\n\n    constructor() {\n        super()\n        this.method = \"POST\"\n    }\n\n    override fetch(properties?: ServiceBankSetup[\"properties\"]): Promise<Options> {\n        this.properties  = properties\n        this.errorFooter = \"Не удалось загрузить список \" + this.responseStep.errorMessageEnding\n        if(this.mainConditions.find(conditionCallback => conditionCallback() === false))\n            return new Promise(resolve => resolve(new Map()))\n        else {\n            const fetchCallback=() => {\n                this.setServiceBankBody(this.requestStep.listName, this.requestStep.specificBodiesFn?.())\n                return this.fetchServiceBankOptions(this.responseStep.parseItemToOptionFn, this.responseStep.filterFn)\n            }\n            if(!userInfo.superUser && this.userCheckPermission){\n                console.log(userInfo.superUser)\n                console.log(this.userCheckPermission)\n                this.properties[this.userCheckPermission.propertyName] = this.userCheckPermission.propertyValue\n            }\n            return fetchCallback()\n        }\n    }\n\n    private setServiceBankBody(listName: string, specificBodies: any[] = [{}]): void{\n        // Properties with unknown name will remain as custom properties\n        const custom = {...this.properties}\n        custom.date = custom.roads = custom.countries = custom.postSoviet = custom.carriers = undefined\n        this.body = {\n            [listName]: [...specificBodies.map(body => { return {\n                \"data\": this.properties.date[0],\n                ...body,\n                ...custom\n            }})]\n        }\n    }\n\n    private fetchServiceBankOptions(parseItemToOptionFn: (items: any) => Option,\n                                    filter?: (item: any) => boolean): Promise<Options> {\n\n        return super.fetch().then(json =>\n            // The only first item is approved\n            new Map((json[Object.keys(json as any)[0]] as Array<any>)\n                .filter((item) => filter ? filter(item) : true)\n                .map((item) => {\n                    const parsed = parseItemToOptionFn(item)\n                    parsed[1] = parsed[1].trim()\n                    return parsed\n                })\n            )\n        )\n    }\n}\n\nfunction roadCodesToBodies(codes: string[]): {\"gos\": string, \"dor\": string}[]{\n    const bodies = []\n    codes.forEach(fullRoadCode => {\n        const splittedRoadCode = fullRoadCode.split(\".\"),\n            countryCode = splittedRoadCode[0],\n            roadCode = splittedRoadCode[1],\n            lastBody = bodies.length > 0 ? bodies[bodies.length - 1] : null\n\n        if(lastBody){\n            if(lastBody.gos !== countryCode)\n                bodies.push({\"gos\": countryCode, \"dor\": roadCode})\n            else\n                lastBody.dor += `,${roadCode}`\n        }\n\n    })\n    return bodies\n}","import {AbstractServiceBank} from \"./AbstractServiceBank\"\nimport {userInfo} from \"../../store/userInfo\";\n\nexport class CarriersServiceBank extends AbstractServiceBank\n{\n    protected mainConditions = [this.dataCondition]\n\n    protected requestStep = {\n        listName: \"perList\",\n        specificBodiesFn: () => this.properties.countries.map(code => {\n            return {\"gos\": code}\n        })\n    }\n    protected responseStep = {\n        parseItemToOptionFn: item => [`${this.properties.countries?.length >= 2 ? item[\"gos\"] + '.' : ''}${item[\"skp\"]}`, item[\"nazvp\"]] as Option,\n        errorMessageEnding: \"перевозчиков\"\n    }\n    protected userCheckPermission = {\n        propertyName: \"skp\",\n        propertyValue: userInfo.carrier\n    }\n\n    userAssociatedOptionKeys = [`${userInfo.carrier}`]\n}","import {AbstractServiceBank} from \"./AbstractServiceBank\"\nimport {userInfo} from \"../../store/userInfo\";\n\nexport class CountriesServiceBank extends AbstractServiceBank\n{\n    protected mainConditions = [this.dataCondition]\n\n    protected requestStep = {\n        listName: \"gosList\"\n    }\n    protected responseStep = {\n        parseItemToOptionFn: (item => [item[\"g_kod\"], item[\"g_name\"]] as Option),\n        filterFn: ((item) => !!this.properties?.postSoviet ? item[\"g_prsng\"] == \"1\" : true),\n        errorMessageEnding: \"государств\"\n    }\n    protected userCheckPermission = {\n        propertyName: \"gos\",\n        propertyValue: userInfo.country\n    }\n\n    userAssociatedOptionKeys = []\n}","import {AbstractServiceBank} from \"./AbstractServiceBank\"\n\nexport class RegionsServiceBank extends AbstractServiceBank\n{\n    protected mainConditions = [this.dataCondition]\n\n    protected requestStep = {\n        listName: \"sfList\"\n    }\n    protected responseStep = {\n        parseItemToOptionFn: item => [item[\"sf_kod2\"], item[\"sf_name\"]] as Option,\n        errorMessageEnding: \"субъектов\"\n    }\n    protected userCheckPermission\n\n    userAssociatedOptionKeys = []\n}","import {AbstractServiceBank} from \"./AbstractServiceBank\"\nimport {userInfo} from \"../../store/userInfo\";\n\nexport class RoadsServiceBank extends AbstractServiceBank\n{\n    protected mainConditions = [this.dataCondition, () => this.properties.countries?.length > 0]\n\n    protected requestStep = {\n        listName: \"dorList\",\n        specificBodiesFn: () => this.properties.countries.map(code => {\n            return {\"gos\": code}\n        })\n    }\n    protected responseStep = {\n        parseItemToOptionFn: item => [`${item[\"d_kod\"]}`, item[\"d_name\"]] as Option,\n        errorMessageEnding: \"дорог\"\n    }\n\n    protected userCheckPermission = {\n        propertyName: \"dor\",\n        propertyValue: userInfo.road\n    }\n\n    userAssociatedOptionKeys = [userInfo.road]\n}","import {AbstractServiceBank} from \"./AbstractServiceBank\"\n\nexport class StationsServiceBank extends AbstractServiceBank\n{\n    protected mainConditions = [this.dataCondition]\n\n    protected errorMessageEnding: string = \"станций\"\n    protected requestStep = {\n        listName: \"stanList\",\n        specificBodiesFn: () => this.properties.roads.map(code => {\n            return {\"dor\": this.properties.roads}\n        })\n    }\n    protected responseStep = {\n        parseItemToOptionFn: item => [item[\"stan\"], item[\"pnazv\"]] as Option,\n        errorMessageEnding: \"станций\"\n    }\n    protected userCheckPermission\n\n    userAssociatedOptionKeys = []\n}","import {Field} from \"./Field\"\nimport Select from \"../../../inputs/Select\"\nimport {Section} from \"../Section\"\nimport {concatMaps, prettify} from \"../../../../util/data\"\nimport Form from \"../../Form\"\nimport {AbstractServiceBank} from \"../../../../api/serviceBank/AbstractServiceBank\";\nimport {CarriersServiceBank} from \"../../../../api/serviceBank/CarriersServiceBank\";\nimport {CountriesServiceBank} from \"../../../../api/serviceBank/CountriesServiceBank\";\nimport {RegionsServiceBank} from \"../../../../api/serviceBank/RegionsServiceBank\";\nimport {RoadsServiceBank} from \"../../../../api/serviceBank/RoadsServiceBank\";\nimport {StationsServiceBank} from \"../../../../api/serviceBank/StationsServiceBank\";\n\nexport class SelectField extends Field<OptionKey[]> {\n\n    private static OptionsRetrievingQuery = {}\n\n    protected selectFragment: Select\n\n    options: Options = new Map()\n\n    private staticOptions: Options = new Map()\n    private serviceBankOptions: Options = new Map()\n\n    awaitingForServiceBankOptions: boolean = false\n\n    constructor(section: Section, private config: SelectFieldConfig) {\n        const select = new Select(config,\n            optionKeys => this.triggerValueChange(optionKeys))\n        super(section, config, true, [])\n        this.append(select)\n        this.selectFragment = select\n    }\n\n    override triggerValueChange(optionKeys: OptionKey[]) {\n        this.selectFragment.modulePromise.then(() => {\n            this.selectFragment.pickOptions(optionKeys)\n            super.triggerValueChange(this.selectFragment.pickedKeys)\n        })\n    }\n\n    override get prettyValue(){\n        return prettify(this.selectFragment.findOptions(this.value))\n    }\n\n    setStaticOptions(options: Options) {\n        this.staticOptions = options\n        this.updateOptions()\n    }\n\n    setupServiceBank(setup: ServiceBankSetup, initValues: OptionKey[] = []) {\n        this.awaitingForServiceBankOptions = true\n        setupServiceBankRetrieving(this.parent.parent, setup,\n            (options, userAssociatedOptionKeys) => {\n                this.serviceBankOptions = options\n                this.updateOptions()?.then(() => {\n                    if (initValues.length + userAssociatedOptionKeys.length > 0)\n                        this.triggerValueChange([...userAssociatedOptionKeys, ...initValues])\n                })\n                this.awaitingForServiceBankOptions = false\n            })\n       }\n\n    private updateOptions() {\n        this.options = concatMaps(this.staticOptions, this.serviceBankOptions)\n        return this.selectFragment.updateOptions(this.options)\n    }\n}\n\nfunction setupServiceBankRetrieving(form: Form, config: ServiceBankSetup, onFetch: (options: Options, userAssociatedOptionKeys: OptionKey[]) => void){\n    const sourceFields = config.propertiesSources ? form.findFields(Array.from(Object.values(config.propertiesSources))) : null\n    const optionsAccessor = createServiceBankAccessor(config)\n    subscribeToFields(sourceFields, () => {\n        const properties: typeof config.properties = {...config.properties}\n        // Remapping\n        Object.entries(config.propertiesSources).forEach(entry => {\n            const sourceField = sourceFields?.get(entry[1])\n            if (sourceField) {\n                const json = sourceField.jsonValue\n                properties[entry[0]] = sourceField instanceof SelectField && json !== null ? Object.keys(json) : json\n            }\n        })\n        optionsAccessor\n            .fetch(properties)\n            .then(options => options ? onFetch(options, optionsAccessor.userAssociatedOptionKeys) : options)\n    })\n}\n\nfunction createServiceBankAccessor(config: ServiceBankSetup): AbstractServiceBank {\n    const accessor = config.type === \"carriers\" ? new CarriersServiceBank() :\n        config.type === \"countries\" ? new CountriesServiceBank() :\n            config.type === \"regions\" ? new RegionsServiceBank() :\n                config.type === \"roads\" ? new RoadsServiceBank() :\n                    config.type === \"stations\" ? new StationsServiceBank()\n                        : new Error(\"Cannot resolve ServiceBank type: \" + config.type)\n\n    if(accessor instanceof Error)\n        throw accessor\n    else\n        return accessor\n}\n\nfunction subscribeToFields(fieldsMap: Map<string, Field<any>> | Field<any>[], onChange: () => void, runAfter = true){\n    fieldsMap?.forEach(field =>\n        field.onValueChange(() => {\n            onChange()\n        })\n    )\n    if(runAfter)\n        onChange()\n}","import {Fragment} from \"../Fragment\"\n\nexport class TextArea extends Fragment{\n\n    private shiftIsPressed = false\n\n    constructor() {\n        super(`<div class=\"textarea\" contentEditable spellcheck=\"false\"></div>`)\n        this.listen(\"keydown\", (event: KeyboardEvent) => {\n            if(event.key === \"Tab\"){\n                event.preventDefault()\n                this.insertTab()\n            }\n            if(event.key === \"Shift\"){\n                this.shiftIsPressed = true\n            }\n        })\n        this.listen(\"keyup\", (event: KeyboardEvent) => {\n            if(event.key === \"Shift\"){\n                this.shiftIsPressed = true\n            }\n        })\n    }\n\n    onInputEnter(callback: (text: string) => void){\n        this.listen(\"focusout\", () => callback(this.text))\n        this.listen(\"keydown\", (event: KeyboardEvent) => {\n            if(event.key === \"Enter\" && this.shiftIsPressed){\n                // Removing the new line\n                this.text = this.text.trimEnd()\n                this.root.blur()\n            }\n        })\n    }\n\n    get text(): string{\n        return this.root.innerText\n    }\n    set text(str: string){\n        this.root.innerText = str\n    }\n\n    private insertTab(){\n        if (getSelection) {\n            const selection = getSelection()\n            if (selection.getRangeAt && selection.rangeCount) {\n                const range = selection.getRangeAt(0)\n                range.deleteContents()\n                range.insertNode(document.createTextNode(\"    \"))\n                selection.collapseToEnd()\n            }\n        }\n    }\n}","import {Field} from \"./Field\"\nimport {Section} from \"../Section\"\nimport {TextArea} from \"../../../inputs/TextArea\"\n\nexport class TextField extends Field<string>{\n\n    constructor(section: Section, config: TextFieldConfig) {\n        super(section, config, true, \"\")\n        const textInput = new TextArea()\n        textInput.onInputEnter(text => this.triggerValueChange(text))\n        this.append(textInput)\n    }\n}","import {Fragment} from \"../../Fragment\"\nimport {Field} from \"./field/Field\"\nimport {valueOrDefault} from \"chart.js/helpers\"\nimport Form from \"../Form\"\nimport {DatepickerField} from \"./field/DatepickerField\"\nimport {SwitchField} from \"./field/SwitchField\"\nimport {SelectField} from \"./field/SelectField\"\nimport {create} from \"../../../util/domWizard\"\nimport {InlineFragment} from \"../../InlineFragment\"\nimport {TextField} from \"./field/TextField\"\n\nexport class Section extends InlineFragment<Form>{\n\n    readonly fields = new Map<string, Field<any>>()\n\n    getField = (fieldKey: string) => this.fields.get(fieldKey)\n\n    constructor(parent: Form, gridLayout: FormConfig[\"layout\"], config: FormSectionConfig) {\n        super(parent, `\n            <div class=\"section\"\n                 style=\"${gridLayout}\">\n            </div>`)\n        if (config.title)\n            this.append(create(`<p>${config.title}</p>`))\n\n        // Determining fields\n        for (const key in config) {\n            if(key.endsWith(\"Field\"))\n                this.fields.set(key, this.createField(config[key] as FieldConfig))\n        }\n    }\n\n    private createField(config: FieldConfig): Field<any>{\n        switch (config.type){\n            case \"switch\":     return new SwitchField(this, config)\n            case \"datepicker\": return new DatepickerField(this, config)\n            case \"select\":     return new SelectField(this, config)\n            case \"text\":       return new TextField(this, config)\n        }\n    }\n}\n\n","import {JsonAccessor} from \"./abstract/JsonAccessor\";\n\nexport class FormStatementAccessor extends JsonAccessor<FormStatement> {\n\n    override path: string\n    constructor() {\n        super()\n        this.method = \"POST\"\n        this.errorFooter = \"Ошибка получения состояния формы\"\n    }\n\n    override fetch(body: any, trigger?: string): Promise<FormStatement> {\n        this.params = {trigger}\n        return super.fetch(body)\n    }\n}","import {resolveCSS} from \"../../util/resolver\"\nimport {Button} from \"../inputs/Button\"\nimport {Field} from \"./section/field/Field\"\nimport {Fragment} from \"../Fragment\"\nimport {Section} from \"./section/Section\"\nimport {jsonifyFields, jsonToMap, valueOrDefault} from \"../../util/data\"\nimport {SelectField} from \"./section/field/SelectField\"\nimport {FormStatementAccessor} from \"../../api/FormStatementAccessor\"\n\nresolveCSS(\"form\")\n\nexport default class Form extends Fragment<HTMLFormElement> {\n\n    readonly sections = new Map<string, Section>\n\n    readonly fields: Map<string, Field<any>> = new Map()\n\n    readonly submitButton = new Button({\n        className: \"confirm\",\n        text: valueOrDefault(this.config?.submitText, \"\")\n    }, () => this.onSubmit(this.jsonFieldValues, this.prettyFieldValues))\n\n    private startValidating = false\n\n    private statementAccessor: FormStatementAccessor\n\n    constructor(protected readonly config: FormConfig, public onSubmit?: (jsonFieldValues: JsonProperties, fullFieldValues: Map<FieldKey, any>) => void) {\n        super(`<form class=\"${config.layout ? config.layout : 'horizontal'}\"></form>`)\n\n        // Determining sections\n        for (const key in config) {\n            if(key.endsWith(\"Section\")) {\n                const section = new Section(this, config.layout, config[key] as FormSectionConfig)\n                this.sections.set(key, section)\n                section.fields.forEach((field, fieldKey) =>\n                    this.fields.set(`${key}.${fieldKey}`, field))\n            }\n        }\n\n        if(this.config.statementPath) this.startStatementRetrieving()\n        this.append(this.submitButton)\n        this.submitButton.listen(\"mouseenter\", () => {\n            this.startValidating = true\n            this.submitButton.disable()\n            this.validateFields()\n        })\n    }\n\n    private currentStatement: FormStatement\n\n    get jsonFieldValues(){\n        return jsonifyFields(this.fields)\n    }\n\n    get prettyFieldValues(){\n        const prettyFieldValues = new Map<FieldKey, any>()\n        this.fields.forEach((field, key) => {\n            prettyFieldValues.set(key, field.prettyValue)\n        })\n        return prettyFieldValues\n    }\n\n    // Return fields with specific locations or all fields\n    findFields(fieldLocations: string[]): Map<string, Field<any>>{\n        const fieldsMap: Map<string, Field<any>> = new Map()\n        fieldLocations.forEach(location =>\n            fieldsMap.set(location, this.fields.get(location)))\n\n        return fieldsMap\n    }\n\n    private startStatementRetrieving(){\n        this.statementAccessor = new FormStatementAccessor()\n        this.hide()\n        this.onMount(() =>\n            this.manageFieldsStatement(\"initial\").then(\n                () => this.show())\n        )\n        this.fields.forEach((field, key) => {\n            field.onValueChange(\n                () => this.manageFieldsStatement(key))\n        })\n    }\n\n    // TODO refactor\n    private manageFieldsStatement(trigger: string){\n        this.statementAccessor.path = this.config.statementPath\n        return this.statementAccessor.fetch(this.jsonFieldValues, trigger).then(statement => {\n            if(!!statement){\n                this.currentStatement = statement\n                this.validateFields()\n\n                if(statement.setOptions){\n                    Object.entries(statement.setOptions).forEach(([fieldKey, options]) => {\n                        const field = this.fields.get(fieldKey)\n                            if(field && field instanceof SelectField)\n                                field.setStaticOptions(jsonToMap(options))\n                    })\n                }\n                if(statement.setupServiceBank){\n                    Object.entries(statement.setupServiceBank).forEach(([fieldKey, setup]) => {\n                        const field = this.fields.get(fieldKey)\n                        if(field && field instanceof SelectField) {\n                            const initValues = statement.setValues\n                                ? Object.entries(statement.setValues).find(entry => entry[0] === fieldKey)?.[1]\n                                : undefined\n                            field.setupServiceBank(setup, initValues)\n                        }\n                    })\n                }\n                if(statement.setValues) Object.entries(statement.setValues).forEach(\n                    ([fieldKey, value]) => {\n                        const field = this.fields.get(fieldKey)\n                        if (field && !(field instanceof SelectField && field.awaitingForServiceBankOptions))\n                            field.triggerValueChange(value)\n                    })\n\n                statement.show?.forEach(key => {\n                    if(key.includes(\".\")) this.fields.get(key).show()\n                    else this.sections.get(key).show()\n                })\n                statement.hide?.forEach(key => {\n                    if(key.includes(\".\")) this.fields.get(key).hide()\n                    else this.sections.get(key).hide()\n                })\n            }\n        })\n    }\n\n    private validateFields(){\n        if(this.startValidating){\n            if (this.currentStatement.wrong)\n                this.submitButton.disable()\n            else\n                this.submitButton.enable()\n\n            this.fields.forEach((field, fieldKey) => {\n                field.makeValid()\n                if(this.currentStatement.wrong?.find(wrongFieldKey => fieldKey === wrongFieldKey))\n                    field.makeInvalid()\n            })\n        }\n    }\n}","import {Fragment} from \"../Fragment\"\nimport {Button} from \"../inputs/Button\"\n\nexport class NavigationBar extends Fragment{\n\n    private tabButtons = new Map<string, Button>()\n    private tabActions = new Map<string, () => void>()\n\n    constructor(tabs?: {[text: string]: () => void}) {\n        super(`<div class=\"nav-bar\"></div>`)\n\n        if(tabs)\n            Object.entries(tabs).forEach(entry => {\n                this.add(entry[0], entry[1])\n            })\n    }\n\n    add(tabTitle: string, onPick: () => void){\n        const tabAction = () => {\n            onPick()\n            this.tabButtons.forEach((button, name) => {\n                button.removeClass(\"active\")\n                if(name === tabTitle)\n                    button.addClass(\"active\")\n            })\n        }\n        const tabButton = new Button({\n            className: \"tab\",\n            text: tabTitle\n        }, () => tabAction())\n        this.tabButtons.set(tabTitle, tabButton)\n        this.tabActions.set(tabTitle, tabAction)\n        this.append(tabButton)\n    }\n\n    pick(tabTitle: string){\n        this.tabActions.get(tabTitle)()\n    }\n}","import {Fragment} from \"../Fragment\"\n\nexport class NavigationBody extends Fragment{\n\n    constructor(...content: (Fragment | Element | string)[]) {\n        super(`<div class=\"nav-body\"></div>`)\n        this.append(...content)\n        this.hide()\n    }\n}","import {Fragment} from \"../Fragment\"\nimport {NavigationBar} from \"./NavigationBar\"\nimport {NavigationBody} from \"./NavigationBody\"\n\nexport class NavigationContainer extends Fragment{\n\n    private readonly naviBar = new NavigationBar()\n    private readonly naviBodies: NavigationBody[] = []\n\n    constructor() {\n        super(`<div class=\"nav-container\"></div>`)\n        this.append(this.naviBar)\n    }\n\n    createTab(tabTitle: string, onPick?: () => void, ...content: (Fragment | Element | string)[]){\n        const naviBody = new NavigationBody(...content)\n        this.naviBodies.push(naviBody)\n        this.append(naviBody)\n        this.naviBar.add(tabTitle,\n            () => {\n                this.naviBodies.forEach(body => body.hide())\n                naviBody.show()\n                onPick()\n            })\n    }\n\n    pickTab(tabTitle: string){\n        this.naviBar.pick(tabTitle)\n    }\n}","import {JsonAccessor} from \"./abstract/JsonAccessor\"\n\nexport class Report extends JsonAccessor<ReportModel>{\n\n    constructor(override path: string) {\n        super()\n        this.method = \"POST\"\n        this.errorFooter = \"Не удалось загрузить отчёт\"\n    }\n}","import {Button} from \"../inputs/Button\"\nimport {getFullscreenElement, scrollIntoElement, toggleFullscreen} from \"../../util/domWizard\"\nimport ReportSlot from \"./ReportSlot\"\nimport {Loader} from \"../misc/Loader\"\nimport {InlineFragment} from \"../InlineFragment\"\nimport {popupTimeoutAction} from \"../../util/modal\";\n\nexport class Head extends InlineFragment<ReportSlot>{\n\n    private readonly titleElement = this.select(\"p\")\n    private readonly originTitleText: string\n\n    toTopButton: Button = this.createToTopButton()\n    private chartsButton: Button\n    private exportButton: Button = this.createXlsxExportButton()\n    private collapseButton: Button = this.createCollapseButton()\n    private fullscreenButton: Button = this.createFullscreenButton()\n\n    constructor(reportSlot: ReportSlot, title: string) {\n        super(reportSlot, `\n            <div class=\"head\"><p>${title}</p></div>\n        `)\n        this.originTitleText = title\n        this.append(this.toTopButton, this.exportButton, this.collapseButton, this.fullscreenButton)\n        this.hideButtons()\n    }\n\n    set title(text: string){\n        this.titleElement.textContent = text\n    }\n    get title(): string{\n        return this.titleElement.textContent\n    }\n\n    showButtons(){\n        this.toTopButton.show()\n        this.exportButton.show()\n        this.collapseButton.show()\n        this.fullscreenButton.show()\n    }\n\n    hideButtons(){\n        this.toTopButton.hide()\n        this.exportButton.hide()\n        this.collapseButton.hide()\n        this.fullscreenButton.hide()\n    }\n\n    // addChartsButton(){\n    //     this.chartsButton = this.createButton(\n    //         {text: \"Графическое представление\", image: \"img/graph.svg\"},\n    //         () => this.reportSlot.body.toggleCharts())\n    // }\n\n    private createToTopButton(): Button{\n        return new Button(\n            {hint:  \"Наверх\", image: \"to_top_blue.svg\"},\n            () => scrollIntoElement(document.body)\n        )\n    }\n\n    private createXlsxExportButton(): Button {\n        return new Button({hint: \"Экспортировать\", image: \"download.svg\"},\n            () => popupTimeoutAction(\"Экспортировать таблицу в .xlsx?\", \"Подтвердить\",\n                () => this.parent.body.table.xlsxAccessor.fetch()))\n    }\n\n    private createCollapseButton(): Button{\n        return createToggleableButton(\n            {hint: \"Свернуть\", image: \"collapse.svg\"},\n            {hint: \"Развернуть\", image: \"collapse.svg\"},\n            () => {\n                this.parent.body.collapse()\n                this.chartsButton?.disable()\n                this.fullscreenButton?.disable()\n            },\n            () => {\n                this.parent.body.expand()\n                this.chartsButton?.enable()\n                this.fullscreenButton?.enable()\n            })\n    }\n\n    private createFullscreenButton(): Button {\n        const defaultConfig = {hint: \"Развернуть на весь экран\", image: \"expand.svg\"}\n        const button = new Button(defaultConfig, () => toggleFullscreen(this.parent.root))\n        // Change fullscreenButton on fullscreenchange\n        addEventListener(\"fullscreenchange\", () => {\n            const fullscreenMode = !!getFullscreenElement()\n            button.hint = fullscreenMode ? \"Выйти из полноэкранного режима\" : defaultConfig.hint\n            button.image = fullscreenMode ? \"exit.svg\" : defaultConfig.image\n        })\n        return button\n    }\n\n    setTitleOrDefault(title: string) {\n        this.title = title ? title : this.originTitleText\n    }\n}\n\nfunction createToggleableButton(configA: ButtonConfig,\n    configB: ButtonConfig,\n    onClickA: () => void,\n    onClickB: () => void)\n{\n    let toggled = false\n    const button = new Button(configA, () => {\n        if(toggled === false){\n            if(configA.image !== configB.image) button.image = configB.image\n            button.hint = configB.hint\n            onClickA()\n        }else {\n            if(configA.image !== configB.image) button.image = configA.image\n            button.hint = configA.hint\n            onClickB()\n        }\n        toggled = !toggled\n    })\n    return button\n}","import {Fragment} from \"../Fragment\"\nimport {Button} from \"./Button\"\n\nexport class TextInput extends Fragment{\n\n    private textInputElement: HTMLInputElement\n\n    constructor(placeholder: string, onInput: (text: string) => void) {\n        super(`\n            <div class=\"text input\">\n                <input type=\"text\" placeholder=\"${placeholder}\">\n            <div/>\n        `)\n        this.append(new Button({\n            className: \"frameless reset\",\n            text: \"❌\",\n            hint: \"Сбросить\"\n        }, () => this.text = \"\"))\n\n        this.textInputElement = this.select(\"input\")\n\n        this.listen(\"input\", () => {\n            this.toggleClass(\"empty\", !this.text || this.text.length === 0)\n            if(onInput) onInput(this.text)\n        })\n    }\n\n    get text(): string{\n        return this.textInputElement.value\n    }\n    set text(str: string){\n        this.textInputElement.value = str\n    }\n}","import {Accessor} from \"./Accessor\"\n\nexport abstract class BlobAccessor extends Accessor<Blob>{\n\n    protected override get request(): Promise<Blob> {\n        return this.requestInit.blob()\n    }\n}","\nimport {BlobAccessor} from \"./abstract/BlobAccessor\"\n\nexport class XlsxAccessor extends BlobAccessor {\n\n    override path = \"/appforge/converter/xlsx\"\n    override method: \"POST\" = \"POST\"\n    override errorFooter = \"Ошибка экспорта таблицы\"\n\n    constructor(override body: XlsxTableModel) {\n        super()\n    }\n\n    override fetch(){\n        return super.fetch().then(blob => {\n            const aElement = document.createElement('a')\n            aElement.setAttribute('download', this.body.name + \".xlsx\")\n            const href = URL.createObjectURL(blob)\n            aElement.href = href\n            aElement.setAttribute('target', '_blank')\n            aElement.click()\n            URL.revokeObjectURL(href)\n            return blob\n        })\n    }\n}","export function executeFormulaForRowData(formula: string,\n                                         row: RowData,\n                                         totalRow: RowData,\n                                         matrix: MatrixData){\n\n    // These fictitious calls need to prevent arguments removing by compiler optimisation.\n    // They all can be used in the formula\n    row.length\n    totalRow.length\n    matrix.length\n\n    return eval(formula)\n}","import {emptyElement, scrollIntoElement} from \"../../../util/domWizard\"\nimport {filterMap, numberOf} from \"../../../util/data\"\nimport {TextInput} from \"../../inputs/TextInput\"\nimport {resolveCSS} from \"../../../util/resolver\"\nimport {InlineFragment} from \"../../InlineFragment\"\nimport {Body} from \"../Body\"\nimport {XlsxAccessor} from \"../../../api/XlsxAccessor\"\nimport {executeFormulaForRowData} from \"../../../util/DANGEROUS\"\nimport {SelectField} from \"../../form/section/field/SelectField\"\n\nresolveCSS(\"table\")\n\nexport class Table extends InlineFragment<Body>{\n\n    thead: HTMLTableSectionElement\n    tbody: HTMLTableSectionElement\n    tfoot: HTMLTableSectionElement\n\n    // Key is filtrated column, value is filter text value\n    private filtersMap: Map<number, string> = new Map()\n\n    readonly xlsxAccessor: XlsxAccessor\n\n    constructor(body: Body,\n                private readonly data: MatrixData,\n                private readonly colFeatures: DataFeature[],\n                private readonly model: TableModel)\n    {\n        super(body, `\n            <div class=\"table\">\n                <table>\n                    <thead></thead>\n                    <tfoot></tfoot>\n                    <tbody></tbody>\n                </table>\n            </div>`\n        )\n        this.thead = this.select(\"thead\")\n        this.tbody = this.select(\"tbody\")\n        this.tfoot = this.select(\"tfoot\")\n        if(model.head) this.head = model.head\n        if(data && data.length > 0) this.appendData(data)\n        this.xlsxAccessor = new XlsxAccessor({\n            name:    this.parent.parent.head.title,\n            context: this.parent.context?.visibleValues,\n            title:   this.parent.parent.head.title,\n            header:  getCompleteRowsFromElement(this.thead),\n            body:    getCompleteRowsFromElement(this.tbody),\n            total:   getCompleteRowsFromElement(this.tfoot)[0]\n        })\n\n        this.addScrollHelper()\n    }\n\n    private set head(head: TableHead){\n        emptyElement(this.thead)\n        this.thead.innerHTML += `<tr>${head.map(cellText => `<th>${cellText}</th>`).join('')}</tr>`\n        // head.forEach(headRow =>\n        //     this.thead.innerHTML +=\n        //         `<tr>${headRow.map(headCell => `\n        //             <th rowspan=\"${headCell.rowspan}\"\n        //                 colspan=\"${headCell.colspan}\"\n        //                 ${headCell.addFilter ? 'class=\"filter\"' : ''}>\n        //                 ${headCell.text}\n        //             </th>`).join(\"\")}\n        //         </tr>`\n        //     )\n    }\n\n    private appendData(data: MatrixData){\n        // Firstly calculate the total data to use it in the formulas\n        let totalRowData: RowData = []\n        data.forEach(rowData => rowData.forEach(\n            (cellData, cellIndex) => {\n                const feature = this.colFeatures?.[cellIndex]\n                if(typeof cellData === \"number\" && feature?.type !== \"text\") {\n                    if(feature?.formula)\n                        totalRowData[cellIndex] = 0\n                    else\n                        totalRowData[cellIndex] = totalRowData[cellIndex]\n                            ? numberOf(totalRowData[cellIndex]) + cellData\n                            : cellData\n                }\n                else totalRowData[cellIndex] = ''\n            })\n        )\n        totalRowData = this.applyFeaturesToRowData(totalRowData)\n\n        this.tbody.innerHTML = data.map(rowData => this.createHtmlRowText(this.applyFeaturesToRowData(rowData))).join('')\n\n        if(data.length > 1)\n            this.tfoot.innerHTML = this.createHtmlRowText(totalRowData)\n\n        this.groupPrimaryCells()\n        this.spanTotalPrimaryCells()\n    }\n\n    private applyFeaturesToRowData(rowData: RowData, totalRowData: RowData = rowData): RowData{\n        this.colFeatures?.forEach((feature, index) => {\n            if(feature.type === \"numeric\" && feature.formula){\n                rowData[index] = executeFormulaForRowData(feature.formula, rowData, totalRowData, this.data)\n            } else if(feature.type === \"text\"){\n                feature.replaceWithLabels?.fields?.forEach(fieldKey => {\n                    const field = this.parent.parent.associatedFormSnapshot.fields.get(fieldKey)\n                    const fieldValue = field ? (field as SelectField).options.get(`${rowData[index]}`) : undefined\n                    if(fieldValue) rowData[index] = fieldValue\n                })\n            }\n        })\n        return rowData\n    }\n\n    private createHtmlRowText(rowData: RowData){\n        return `\n            <tr>${rowData.map(\n                (data, index) => \n                    this.colFeatures && this.colFeatures[index] \n                        ? this.createHtmlCellText(index, rowData) \n                        : `<td>${data}</td>`\n                ).join('')}\n            </tr>`\n    }\n\n    private createHtmlCellText(cellIndex: number, rowData: RowData){\n        const feature = this.colFeatures[cellIndex]\n        const cellData = rowData[cellIndex]\n        if(feature){\n            return `\n                <td class=\"${feature.type}${this.model.primaryColumnsNumber > cellIndex ? ' primary' : ''}\" \n                    ${feature.type === \"numeric\" && feature.colored\n                        ? `style=\"color: ${cellData >= 0 ? 'var(--positive-color)' : 'var(--negative-color)'}\"`\n                        : ''}>\n                    ${cellData}\n                </td>`\n        }\n    }\n\n    private applyFilter(htmlHeadCell: HTMLTableCellElement){\n        htmlHeadCell.append(\n            new TextInput(\"🔎\", value => {\n                this.filtersMap.set(getCellIndexWithSpans(htmlHeadCell), value)\n                // TODO implement\n            }\n            ).root\n        )\n    }\n\n    private filtrateTableMap(tableMap: TableMapData): TableMapData{\n        return filterMap(tableMap, (valueCells, primaryCells) => {\n            const cellTexts = primaryCells.concat(valueCells.map(v => String(v)))\n            for (let i = 0; i < cellTexts.length; i++) {\n                const filterText = this.filtersMap.get(i)\n                if(!cellTexts[i].toLowerCase().includes(filterText ? filterText.toLowerCase() : \"\"))\n                    return false\n            }\n            return true\n        })\n    }\n\n    private spanTotalPrimaryCells(){\n        this.tfoot.querySelectorAll<HTMLTableCellElement>(\"tr td.primary\").forEach((td, index) => {\n            if(index === 0) {\n                td.colSpan = this.model.primaryColumnsNumber\n                td.textContent = \"Итого\"\n            }\n            else td.remove()\n        })\n    }\n\n    private groupPrimaryCells(startHtmlRow: HTMLTableRowElement = this.tbody.querySelector(\"tr:first-of-type\") as HTMLTableRowElement,\n                               endHtmlRow: HTMLTableRowElement = this.tbody.querySelector(\"tr:last-of-type\") as HTMLTableRowElement,\n                               nesting: number = 0){\n\n        let htmlRowMarshall: HTMLTableRowElement\n        let lastPrimaryCell: HTMLTableCellElement\n        const marshallNextNesting=() => {\n            if(lastPrimaryCell && nesting < this.model.groupedColumnsNumber - 1)\n                this.groupPrimaryCells(lastPrimaryCell.parentElement as HTMLTableRowElement, htmlRowMarshall, nesting + 1)\n        }\n        while (htmlRowMarshall !== endHtmlRow){\n            htmlRowMarshall = htmlRowMarshall ? htmlRowMarshall.nextElementSibling as HTMLTableRowElement : startHtmlRow\n            const currentPrimaryCell = htmlRowMarshall.cells[nesting]\n            if(lastPrimaryCell && lastPrimaryCell.textContent === currentPrimaryCell?.textContent){\n                lastPrimaryCell.rowSpan++\n                currentPrimaryCell.hidden = true\n            }\n            else {\n                marshallNextNesting()\n                lastPrimaryCell = htmlRowMarshall.querySelectorAll<HTMLTableCellElement>(\"td.primary\")[nesting]\n            }\n        }\n        marshallNextNesting()\n    }\n\n    private addScrollHelper(){\n        let mouseIsInside = false\n        // Auto scroll into the table when user scrolls inside of it\n        this.listen(\"scroll\", () => {\n            if(mouseIsInside && Math.round(this.root.getClientRects().item(0).top) != 0){\n                scrollIntoElement(this.root)\n            }\n        })\n\n        this.listen(\"mouseenter\", () => mouseIsInside = true)\n        this.listen(\"mouseleave\", () => mouseIsInside = false)\n    }\n}\n\nfunction getCellIndexWithSpans(targetCell: HTMLTableCellElement): number  {\n\n    let result: number = -1\n\n    let rows = targetCell.parentElement.parentElement.querySelectorAll('tr'),\n        matrix = [],\n        cell: HTMLTableCellElement = null,\n        rowIndex: number = null,\n        colIndex: number = null\n\n\n    for (let i = 0; i < rows.length && result === -1; i++) {\n        console.log(true)\n        matrix[i] = matrix[i] || [];\n        const row = rows[i];\n\n        for (let j = 0; j < row.cells.length; j++) {\n            cell = row.cells[j]\n            rowIndex = row.rowIndex\n            matrix[rowIndex] = matrix[rowIndex] || []\n            colIndex = null\n            for (let l = 0; l <= matrix[rowIndex].length && colIndex === null; l++) {\n                if (!matrix[rowIndex][l]) colIndex = l\n            }\n\n            if (cell === targetCell) {\n                result = colIndex\n                break;\n            }\n\n            for (let k = rowIndex; k < rowIndex + cell.rowSpan; k++) {\n                for (let l = colIndex; l < colIndex + cell.colSpan; l++) {\n                     matrix[k] = matrix[k] || [];\n                    matrix[k][l] = 1;\n                }\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction getCompleteRowsFromElement(element: Element): CompleteRow[]{\n    let rows: CompleteRow[] = []\n    element.querySelectorAll(\"tr\").forEach(tr => {\n        let row: CompleteRow = []\n        tr.querySelectorAll<HTMLTableCellElement>(\"td, th\").forEach(tc => {\n            if(!tc.hidden) {\n                row.push({\n                    text: tc.innerText.trim(),\n                    colspan: tc.colSpan,\n                    rowspan: tc.rowSpan\n                })\n            }\n        })\n        rows.push(row)\n    })\n    return rows\n}","import {InlineFragment} from \"../../InlineFragment\"\nimport {Body} from \"../Body\"\n\nexport class Context extends InlineFragment<Body>{\n\n    visibleValues: string[]\n\n    constructor(body: Body, context: ContextFields) {\n        super(body, `<ul class=\"context\"></ul>`)\n        this.visibleValues = Object.entries(context)\n            .map(([label, fieldKey]) =>\n                label + \": \" + body.parent.associatedFormSnapshot.prettyFieldValues.get(fieldKey))\n\n        this.root.innerHTML = this.visibleValues.map(contextString => `<li>${contextString}</li>`).join(\"\")\n    }\n}","import {emptyElement} from \"../../util/domWizard\"\nimport {Table} from \"./content/Table\"\nimport {Chart} from \"./content/Chart\"\nimport {Button} from \"../inputs/Button\"\nimport {popupTimeoutAction} from \"../../util/modal\"\nimport ReportSlot from \"./ReportSlot\"\nimport {prettify} from \"../../util/data\"\nimport {Context} from \"./content/Context\"\nimport {InlineFragment} from \"../InlineFragment\"\n\nexport class Body extends InlineFragment<ReportSlot>{\n\n    context: Context\n    table: Table\n    charts: Chart[]\n\n    private _collapsed: boolean = false\n\n    private cache: ReportModel\n\n    constructor(reportSlot: ReportSlot) {\n        super(reportSlot, `<div class=\"body\"></div>`)\n    }\n\n    setReport(model: ReportModel){\n        this.reset()\n        this.cache = model\n        if(model.context)\n            this.context = new Context(this, model.context)\n        if(model.table)\n            this.table = new Table(this, model.data, model.dataFeatures, model.table)\n    }\n\n    // createCharts(models: ChartModel[] = this.chartsModelCache): Chart[]{\n    //     this.chartsModelCache = models\n    //     this.chartsWrapper = createDivElement({class: \"charts\"})\n    //     this.exportChartsButton = this.createExportButton(this.chartsWrapper, \"Экспортировать диаграммы в .jpeg?\",\n    //         () => this.exportCharts())\n    //     this.core.insertAdjacentElement(\"afterbegin\", this.chartsWrapper)\n    //     this.charts = models.map(model => new Chart({target: this.chartsWrapper, position: \"beforeend\"}, model))\n    //     return this.charts\n    // }\n\n    // toggleCharts(){\n    //     if(!!this.chartsWrapper) {\n    //         this.chartsWrapper.remove()\n    //         this.chartsWrapper = undefined\n    //     } else\n    //         this.createCharts()\n    // }\n\n    get collapsed(): typeof this._collapsed{\n        return this._collapsed\n    }\n\n    set collapsed(collapsed: typeof this._collapsed){\n        this._collapsed = collapsed\n        if(collapsed)\n            emptyElement(this.root)\n        else\n            this.setReport(this.cache)\n    }\n\n    collapse=() => this.collapsed = true\n    expand=() => this.collapsed = false\n\n    reset(){\n        this.cache = undefined\n        emptyElement(this.root)\n    }\n\n    // private exportCharts(){\n    //     this.exportChartsButton.hide()\n    //     domtoimage.toJpeg(this.chartsWrapper)\n    //         .then((dataUrl) => {\n    //             const link = document.createElement(\"a\")\n    //             link.download = \"charts.jpeg\"\n    //             link.href = dataUrl\n    //             link.click()\n    //             link.remove()\n    //         })\n    //         .finally(() => {\n    //             this.exportChartsButton.show()\n    //         })\n    // }\n}","import {Head} from \"./Head\"\nimport {Body} from \"./Body\"\nimport {resolveCSS} from \"../../util/resolver\"\nimport {popupMessage} from \"../../util/modal\"\nimport {scrollIntoElement} from \"../../util/domWizard\"\nimport {InlineFragment} from \"../InlineFragment\"\nimport {ForgedApplication} from \"../applicatons/ForgedApplication\";\nimport Form from \"../form/Form\";\n\nresolveCSS(\"report\")\n\nexport default class ReportSlot extends InlineFragment<ForgedApplication>{\n\n    readonly head = new Head(this, this.config.title)\n    readonly body = new Body(this)\n\n    associatedFormSnapshot: Form\n    reportModelCache: ReportModel\n\n    constructor(parent: ForgedApplication, readonly config: ReportSlotConfig) {\n        super(parent, `<div class=\"report\"></div>`)\n    }\n\n    applyReport(model: ReportModel, associatedFormSnapshot: Form){\n\n        this.associatedFormSnapshot = associatedFormSnapshot\n\n        this.reportModelCache = model\n\n        this.head.setTitleOrDefault(model.title)\n        this.head.showButtons()\n        this.body.setReport(model)\n\n        if(!model.data || model.data.length === 0)\n            popupMessage(\"Отчёт пуст\", \"Отсутствуют подходящие данные\")\n        else\n            scrollIntoElement(this.root)\n    }\n}","import Header from \"../main/Header\"\nimport {resolveCSS} from \"../../util/resolver\"\nimport {Fragment} from \"../Fragment\"\nimport {appInfo} from \"../../store/appInfo\"\nimport Form from \"../form/Form\";\nimport {appConfig} from \"../../store/appConfig\";\nimport {NavigationContainer} from \"../navigation/NavigationContainer\"\nimport {Report} from \"../../api/Report\"\nimport ReportSlot from \"../report/ReportSlot\"\n\n// Must be loaded only once\nconst cssPromises = Promise.all([\n    resolveCSS(\"global\"),\n    resolveCSS(\"navigation\"),\n    resolveCSS(\"inputs\"),\n    resolveCSS(\"states\"),\n    resolveCSS(\"third-party/animate\"),\n    resolveCSS(\"misc\")\n])\n\nexport class ForgedApplication extends Fragment {\n\n    readonly header = new Header()\n\n    readonly formContainer: NavigationContainer = new NavigationContainer()\n\n    readonly reportSlots: Map<string, ReportSlot> = new Map()\n\n    constructor(root = document.body) {\n        super(root)\n        this.hide()\n        cssPromises.then(() => this.show())\n        this.append(this.header, this.formContainer)\n\n        // Applying appInfo\n        document.title = appInfo.name\n        this.header.setAppInfo(appInfo)\n        let firstTabTitle: string\n\n        // Determining forms and slots\n        for (const key in appConfig) {\n            let config\n            if(key.endsWith(\"Form\")) {\n                config = appConfig[key] as FormConfig\n                firstTabTitle = firstTabTitle ? firstTabTitle : config.title\n                this.formContainer.createTab(config.title,\n                    () => this.selectSlotsAssociatedWithForm(key),\n                    this.createForm(config)\n                )\n            } else if(key.endsWith(\"Slot\")) {\n                config = appConfig[key] as ReportSlotConfig\n                const reportSlot = new ReportSlot(this, config)\n                this.reportSlots.set(key, reportSlot)\n                if(config.associatedWith)\n                    reportSlot.hide()\n            }\n        }\n        // Pick the first tab\n        this.formContainer.pickTab(firstTabTitle)\n    }\n\n    private createForm(config: FormConfig) : Form{\n        const reportAccessor = new Report(config.submitPath)\n        const form = new Form(config)\n        form.onSubmit = (jsonValues, prettyValues) => {\n            form.submitButton.disable()\n            const formSnapshot = form\n            reportAccessor.fetch(jsonValues).then(reportModel => {\n                this.reportSlots.get(reportModel.slot)?.applyReport(reportModel as ReportModel, formSnapshot)\n                form.submitButton.enable()\n            })\n        }\n        return form\n    }\n\n    private selectSlotsAssociatedWithForm(formKey: string){\n        Array.from(this.reportSlots.values()).forEach(slot => {\n            if(slot.config.associatedWith === formKey || !slot.config.associatedWith)\n                slot.show()\n            else\n                slot.hide()\n        })\n    }\n}"],"names":["Fragment","constructor","root","this","HTMLElement","create","append","items","forEach","item","select","selectors","querySelector","selectAll","querySelectorAll","hidden","hide","style","display","show","remove","addClass","tokens","classList","add","removeClass","toggleClass","force","toggle","hasClass","token","contains","className","listen","event","onEvent","addEventListener","onMount","callback","observer","MutationObserver","mutationsList","mutation","target","disconnect","observe","document","documentElement","childList","subtree","Button","config","onClick","super","enable","isAvailable","disable","text","image","hint","preventDefault","available","getAttribute","setAttribute","textContent","src","_a","imageElement","resolveCSS","Header","groupLink","appName","resetButton","location","reload","infoButton","showAppInfo","helpButton","showHelpDownloader","setAppInfo","appInfo","href","groupPath","groupName","name","popupList","icon","version","valueOrDefault","appConfig","info","updateDate","technologistName","_b","additional","popupAction","description","downloadUserManual","helpPath","link","createElement","body","appendChild","click","removeChild","defaultDateTime","DateTime","Datepicker","pickDateRange","range","easepick","setStartDate","setEndDate","setDate","onPick","pickedDateRange","easepickDetailToDateRange","date","start","end","inputElement","createPicker","dateRange","core","onSelect","element","calendars","grid","zIndex","plugins","RangePlugin","AmpPlugin","LockPlugin","lang","startDate","endDate","locale","one","few","many","delimiter","darkMode","dropdown","minYear","maxYear","months","years","minDays","maxDays","css","setup","picker","on","e","detail","setTimeout","stringifyDate","InlineFragment","parent","Field","triggerValueChange","newValue","value","onValueChangeCallbacks","jsonValue","jsonify","prettyValue","prettify","makeValid","makeInvalid","onValueChange","push","createParagraph","initValue","content","type","size","label","DatepickerField","section","calendar","Checkbox","onToggle","checkboxElement","checked","Switch","SwitchField","toggled","virtualSelectModulePromise","resolveJS","Select","pickedKeys","modulePromise","options","Map","findOptions","keys","map","key","get","then","applyVirtualSelect","currentTarget","length","sort","toString","updateOptions","compareMaps","pickedKeysBuffer","setOptions","mapToVirtualSelectOptions","pickOptions","reset","blur","setValue","VirtualSelect","init","ele","additionalClasses","disabled","autofocus","markSearchResults","optionsCount","multiple","search","hasOptionDescription","showCodes","disableSelectAll","maxValues","maxWidth","position","disableAllOptionsSelectedText","placeholder","noOptionsText","noSearchResultsText","selectAllText","searchPlaceholderText","optionsSelectedText","optionSelectedText","allOptionsSelectedText","clearButtonText","moreText","entries","entry","alias","AbstractServiceBank","JsonAccessor","path","origin","dataCondition","properties","method","fetch","errorFooter","responseStep","errorMessageEnding","mainConditions","find","conditionCallback","Promise","resolve","fetchCallback","setServiceBankBody","requestStep","listName","specificBodiesFn","call","fetchServiceBankOptions","parseItemToOptionFn","filterFn","userInfo","superUser","userCheckPermission","console","log","propertyName","propertyValue","specificBodies","custom","Object","assign","roads","countries","postSoviet","carriers","undefined","data","filter","json","parsed","trim","CarriersServiceBank","code","gos","carrier","userAssociatedOptionKeys","CountriesServiceBank","country","RegionsServiceBank","RoadsServiceBank","road","StationsServiceBank","dor","SelectField","optionKeys","staticOptions","serviceBankOptions","awaitingForServiceBankOptions","selectFragment","setStaticOptions","setupServiceBank","initValues","setupServiceBankRetrieving","concatMaps","form","onFetch","sourceFields","propertiesSources","findFields","Array","from","values","optionsAccessor","createServiceBankAccessor","subscribeToFields","sourceField","accessor","Error","fieldsMap","onChange","runAfter","field","OptionsRetrievingQuery","TextArea","shiftIsPressed","insertTab","onInputEnter","trimEnd","innerText","str","getSelection","selection","getRangeAt","rangeCount","deleteContents","insertNode","createTextNode","collapseToEnd","TextField","textInput","Section","gridLayout","fields","getField","fieldKey","title","endsWith","set","createField","FormStatementAccessor","trigger","params","Form","onSubmit","layout","sections","submitButton","submitText","jsonFieldValues","prettyFieldValues","startValidating","statementPath","startStatementRetrieving","validateFields","jsonifyFields","fieldLocations","statementAccessor","manageFieldsStatement","statement","currentStatement","jsonToMap","setValues","includes","wrong","wrongFieldKey","NavigationBar","tabs","tabButtons","tabActions","tabTitle","tabAction","button","tabButton","pick","NavigationBody","NavigationContainer","naviBar","naviBodies","createTab","naviBody","pickTab","Report","Head","reportSlot","titleElement","toTopButton","createToTopButton","exportButton","createXlsxExportButton","collapseButton","createCollapseButton","fullscreenButton","createFullscreenButton","originTitleText","hideButtons","showButtons","scrollIntoElement","popupTimeoutAction","table","xlsxAccessor","createToggleableButton","collapse","chartsButton","expand","defaultConfig","toggleFullscreen","fullscreenMode","getFullscreenElement","setTitleOrDefault","configA","configB","onClickA","onClickB","TextInput","onInput","textInputElement","BlobAccessor","Accessor","request","requestInit","blob","XlsxAccessor","aElement","URL","createObjectURL","revokeObjectURL","executeFormulaForRowData","formula","row","totalRow","matrix","eval","Table","colFeatures","model","filtersMap","thead","tbody","tfoot","head","appendData","context","visibleValues","header","getCompleteRowsFromElement","total","addScrollHelper","emptyElement","innerHTML","cellText","join","totalRowData","rowData","cellData","cellIndex","feature","numberOf","applyFeaturesToRowData","createHtmlRowText","groupPrimaryCells","spanTotalPrimaryCells","index","replaceWithLabels","associatedFormSnapshot","fieldValue","createHtmlCellText","primaryColumnsNumber","colored","applyFilter","htmlHeadCell","getCellIndexWithSpans","filtrateTableMap","tableMap","filterMap","valueCells","primaryCells","cellTexts","concat","v","String","i","filterText","toLowerCase","td","colSpan","startHtmlRow","endHtmlRow","nesting","htmlRowMarshall","lastPrimaryCell","marshallNextNesting","groupedColumnsNumber","parentElement","nextElementSibling","currentPrimaryCell","cells","rowSpan","mouseIsInside","Math","round","getClientRects","top","targetCell","result","rows","cell","rowIndex","colIndex","j","l","k","tr","tc","colspan","rowspan","Context","contextString","Body","_collapsed","collapsed","setReport","cache","dataFeatures","ReportSlot","applyReport","reportModelCache","popupMessage","cssPromises","all","ForgedApplication","firstTabTitle","formContainer","reportSlots","selectSlotsAssociatedWithForm","createForm","associatedWith","reportAccessor","submitPath","jsonValues","prettyValues","formSnapshot","reportModel","slot","formKey"],"mappings":"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"}