{"version":3,"file":"ForgedApplication-0eb96cf6.js","sources":["../../../../../../../typescript/fragments/Fragment.ts","../../../../../../../typescript/fragments/inputs/Button.ts","../../../../../../../typescript/fragments/main/Header.ts","../../../../../../../typescript/fragments/inputs/Datepicker.ts","../../../../../../../typescript/fragments/InlineFragment.ts","../../../../../../../typescript/fragments/form/section/field/Field.ts","../../../../../../../typescript/fragments/form/section/field/DatepickerField.ts","../../../../../../../typescript/fragments/inputs/Checkbox.ts","../../../../../../../typescript/fragments/inputs/Switch.ts","../../../../../../../typescript/fragments/form/section/field/SwitchField.ts","../../../../../../../typescript/fragments/inputs/Select.ts","../../../../../../../typescript/fragments/form/section/field/SelectField.ts","../../../../../../../typescript/fragments/inputs/TextArea.ts","../../../../../../../typescript/fragments/form/section/field/TextField.ts","../../../../../../../typescript/fragments/form/section/Section.ts","../../../../../../../typescript/api/FormStatementAccessor.ts","../../../../../../../typescript/fragments/form/Form.ts","../../../../../../../typescript/fragments/navigation/NavigationBar.ts","../../../../../../../typescript/fragments/navigation/NavigationBody.ts","../../../../../../../typescript/fragments/navigation/NavigationContainer.ts","../../../../../../../typescript/api/Report.ts","../../../../../../../typescript/fragments/report/Head.ts","../../../../../../../typescript/fragments/inputs/TextInput.ts","../../../../../../../typescript/api/abstract/BlobAccessor.ts","../../../../../../../typescript/api/XlsxAccessor.ts","../../../../../../../typescript/util/DANGEROUS.ts","../../../../../../../typescript/fragments/report/content/Table.ts","../../../../../../../typescript/fragments/report/content/Context.ts","../../../../../../../typescript/fragments/report/Body.ts","../../../../../../../typescript/fragments/report/ReportSlot.ts","../../../../../../../typescript/fragments/applicatons/ForgedApplication.ts"],"sourcesContent":["import {create} from \"../util/domWizard\"\r\n\r\nexport abstract class Fragment<T extends HTMLElement = HTMLElement> {\r\n\r\n    root: T\r\n\r\n    protected constructor(root: string|T) {\r\n        this.root = root instanceof HTMLElement ? root : create(root)\r\n    }\r\n\r\n    append(...items: (Fragment | Element | string)[]){\r\n        items.forEach(item =>\r\n            this.root.append((item instanceof Fragment) ? item.root :\r\n                item)\r\n        )\r\n    }\r\n\r\n    select<T extends HTMLElement>(selectors: string){\r\n        return this.root.querySelector<T>(selectors)\r\n    }\r\n    selectAll<T extends HTMLElement>(selectors: string){\r\n        return this.root.querySelectorAll<T>(selectors)\r\n    }\r\n\r\n    get hidden() {\r\n        return !!this.root.hidden\r\n    }\r\n\r\n    hide(){\r\n        this.root.style.display = \"none\"\r\n        this.root.hidden = true\r\n    }\r\n    show(){\r\n        this.root.style.display = \"\"\r\n        this.root.hidden = false\r\n    }\r\n\r\n    remove(){\r\n        this.root.remove()\r\n    }\r\n\r\n    addClass(tokens: string){\r\n        this.root.classList.add(tokens)\r\n    }\r\n    removeClass(tokens: string){\r\n        this.root.classList.remove(tokens)\r\n    }\r\n    toggleClass(tokens: string, force?: boolean){\r\n        this.root.classList.toggle(tokens, force)\r\n    }\r\n    hasClass(token: string): boolean{\r\n        return this.root.classList.contains(token)\r\n    }\r\n    set className(className: string){\r\n        if(!!className)\r\n            this.root.className = className\r\n    }\r\n    get className(){\r\n        return this.root.className\r\n    }\r\n\r\n    listen(event: keyof HTMLElementEventMap, onEvent: (event?: Event) => void){\r\n        this.root.addEventListener(event, onEvent)\r\n    }\r\n\r\n    onMount(callback: () => void) {\r\n        const observer = new MutationObserver((mutationsList) => {\r\n            for (const mutation of mutationsList) {\r\n                if (mutation.target === this.root || mutation.target.contains(this.root)) {\r\n                    callback()\r\n                    observer.disconnect()\r\n                    break\r\n                }\r\n            }\r\n        })\r\n        observer.observe(document.documentElement, { childList: true, subtree: true })\r\n    }\r\n}","import {Fragment} from \"../Fragment\"\r\nimport {create} from \"../../util/domWizard\"\r\n\r\nexport class Button extends Fragment<HTMLButtonElement>{\r\n\r\n    private imageElement: HTMLImageElement\r\n\r\n    constructor(config: ButtonConfig, onClick: () => void) {\r\n        super(`<button></button>`)\r\n\r\n        this.className = config.className\r\n        this.text = config.text\r\n        this.image = config.image\r\n        this.hint = config.hint\r\n\r\n        this.listen(\"click\", event => {\r\n            event.preventDefault()\r\n            onClick()\r\n        })\r\n    }\r\n\r\n    set isAvailable(available: boolean){\r\n        if(available)\r\n            this.removeClass(\"unavailable\")\r\n        else this.addClass(\"unavailable\")\r\n    }\r\n    get isAvailable(): boolean{\r\n        return !this.hasClass(\"unavailable\")\r\n    }\r\n    enable=() => this.isAvailable = true\r\n    disable=() => this.isAvailable = false\r\n\r\n    get hint(): string{\r\n        return this.root.getAttribute(\"title\")\r\n    }\r\n\r\n    set hint(hint: string){\r\n        if(!!hint)\r\n            this.root.setAttribute(\"title\", hint)\r\n    }\r\n\r\n    set text(text: string){\r\n        this.root.textContent = text\r\n    }\r\n    get text(): string{\r\n        return this.root.textContent\r\n    }\r\n\r\n    set image(src: string|null){\r\n        this.imageElement?.remove()\r\n        if(!!src) {\r\n            this.imageElement = create(`<img src=\"/appforge/img/${src}\" alt=\"\"/>`)\r\n            this.append(this.imageElement)\r\n        }\r\n    }\r\n    get image(): string{\r\n        return this.imageElement?.src\r\n    }\r\n}","import {resolveStyle} from \"../../util/resolver\"\r\nimport {popupAction, popupList, popupTimeoutAction} from \"../../util/modal\"\r\nimport {appConfig} from \"../../store/appConfig\"\r\nimport {Fragment} from \"../Fragment\"\r\nimport {Button} from \"../inputs/Button\"\r\nimport {create} from \"../../util/domWizard\"\r\nimport {valueOrDefault} from \"../../util/data\";\r\nresolveStyle(\"header\")\r\n\r\nexport default class Header extends Fragment<HTMLHeadingElement>{\r\n\r\n    groupLink = create<HTMLLinkElement>(`<a></a>`)\r\n    appName = create<HTMLParagraphElement>(`<p></p>`)\r\n    resetButton = new Button({className: \"frameless reset\", image: \"reset.svg\", hint: \"Сброс\"}, () => location.reload())\r\n    infoButton  = new Button({className: \"frameless info\",  image: \"info.svg\",  hint: \"Информация о приложении\"}, () => this.showAppInfo())\r\n    helpButton  = new Button({className: \"frameless help\",  image: \"help.svg\",  hint: \"Руководство пользователя\"}, () => this.showHelpDownloader())\r\n\r\n    private appInfo: AppInfo\r\n\r\n    constructor() {\r\n        super(`<header id=\"header\"></header>`)\r\n\r\n        this.append(this.groupLink, \"|\", this.appName, this.resetButton, this.infoButton, this.helpButton)\r\n    }\r\n\r\n    setAppInfo(appInfo: AppInfo){\r\n        this.appInfo = appInfo\r\n        this.groupLink.href        = appInfo.groupPath\r\n        this.groupLink.textContent = appInfo.groupName\r\n        this.appName.textContent   = appInfo.name\r\n    }\r\n\r\n    private showAppInfo(){\r\n        popupList(\r\n            \"Информация\",\r\n            [\r\n                {icon: \"🛈\", text: \"Версия программы: \" + this.appInfo.version},\r\n                {icon: \"🗓\", text: \"Дата обновления: \"  + valueOrDefault(appConfig.info?.updateDate, this.appInfo.updateDate)},\r\n                {icon: \"👤\", text: \"Технолог: \"        + this.appInfo.technologistName}\r\n            ],\r\n            appConfig.info?.additional\r\n        )\r\n    }\r\n\r\n    private showHelpDownloader(){\r\n        popupAction(\r\n            \"Руководство\",\r\n            valueOrDefault(appConfig.info.description, \"\"),\r\n            \"Скачать инструкцию\",\r\n            () => downloadUserManual(this.appInfo.helpPath)\r\n        )\r\n    }\r\n}\r\n\r\nfunction downloadUserManual(href){\r\n    const link = document.createElement('a')\r\n    link.href = href\r\n    link.target = '_blank'\r\n    document.body.appendChild(link)\r\n    link.click()\r\n    document.body.removeChild(link)\r\n}","import {stringifyDate, valueOrDefault} from \"../../util/data\"\r\nimport {easepick} from \"@easepick/core\"\r\nimport {AmpPlugin} from \"@easepick/amp-plugin\"\r\nimport {RangePlugin} from \"@easepick/range-plugin\"\r\nimport {LockPlugin} from \"@easepick/lock-plugin\"\r\nimport {DateTime} from \"@easepick/datetime\"\r\nimport {Fragment} from \"../Fragment\"\r\nimport {Button} from \"./Button\"\r\n\r\nconst defaultDateTime = new DateTime()\r\n\r\nexport default class Datepicker extends Fragment{\r\n\r\n    pickedDateRange: FormattedDate = easepickDetailToDateRange({\r\n            date: defaultDateTime,\r\n            start: defaultDateTime,\r\n            end: defaultDateTime\r\n        },\r\n        this.config.range\r\n    )\r\n\r\n    pickDateRange(range: FormattedDate){\r\n        if(this.config.range && this.easepick){\r\n            this.easepick.setStartDate(range[0])\r\n            this.easepick.setEndDate(range[1])\r\n        } else\r\n            this.easepick.setDate(range[0])\r\n    }\r\n\r\n    private easepick: easepick.Core\r\n\r\n    constructor(private config: CalendarConfig, onPick: (range: FormattedDate) => void) {\r\n        super(`    \r\n            <div class=\"datepicker\"><input></div>\r\n        `)\r\n\r\n        const inputElement = this.root.querySelector(\"input\")\r\n\r\n        this.append(new Button({text: \"📅\"}, () => inputElement.click()))\r\n\r\n        this.onMount( () => {\r\n            this.easepick = createPicker(inputElement, config, dateRange => {\r\n                this.pickedDateRange = dateRange\r\n                onPick(dateRange)\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nfunction createPicker(core: HTMLElement, config: CalendarConfig, onSelect: (dateRange: FormattedDate) => void) {\r\n    return new easepick.create({\r\n        element: core,\r\n        calendars: config.range ? 2 : 1,\r\n        grid: 2,\r\n        zIndex: 100,\r\n        plugins: [config.range ? RangePlugin : null, AmpPlugin, LockPlugin],\r\n        lang: 'ru',\r\n        date: defaultDateTime,\r\n        RangePlugin: config.range ? {\r\n            startDate: defaultDateTime,\r\n            endDate: defaultDateTime,\r\n            locale: {\r\n                one: 'день',\r\n                few: 'дня',\r\n                many: 'дней'\r\n            },\r\n            delimiter: \" - \"\r\n        } : null,\r\n        AmpPlugin: {\r\n            darkMode: false,\r\n            resetButton: true,\r\n            dropdown: {\r\n                minYear: valueOrDefault(config.minYear, 2010), maxYear: config.maxYear, months: true, years: true\r\n            }\r\n        },\r\n        LockPlugin: {\r\n            minDays: config.minDays,\r\n            maxDays: config.maxDays\r\n        },\r\n        css: [\r\n            \"/appforge/css/third-party/easepick.css\"\r\n        ],\r\n        setup(picker) {\r\n            picker.on(\"select\", (e) => {\r\n                onSelect(easepickDetailToDateRange(e.detail, config.range))\r\n                setTimeout(() => picker.hide(), 10)\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nfunction easepickDetailToDateRange(detail: any, range: boolean): FormattedDate{\r\n    return range\r\n        ? [stringifyDate(detail.start), stringifyDate(detail.end)]\r\n        : stringifyDate(detail.date)\r\n}","import {Fragment} from \"./Fragment\";\r\n\r\nexport abstract class InlineFragment<PARENT extends Fragment, T extends HTMLElement = HTMLElement> extends Fragment<T>{\r\n    protected constructor(readonly parent: PARENT, root: string|T) {\r\n        super(root)\r\n        parent.append(this)\r\n    }\r\n}","import {Fragment} from \"../../../Fragment\"\r\nimport {jsonify, prettify} from \"../../../../util/data\"\r\nimport {Section} from \"../Section\"\r\nimport {InlineFragment} from \"../../../InlineFragment\";\r\nimport {create} from \"../../../../util/domWizard\";\r\n\r\nexport abstract class Field<VALUE> extends InlineFragment<Section>{\r\n\r\n    value: VALUE\r\n\r\n    // Need to be called by implementations on each value change to set actual value and trigger onValueChangeCallbacks\r\n    triggerValueChange(newValue?: VALUE){\r\n        this.value = newValue\r\n        this.onValueChangeCallbacks.forEach(callback => callback(this.value))\r\n    }\r\n\r\n    get jsonValue(){\r\n        return jsonify(this.value)\r\n    }\r\n\r\n    get prettyValue(){\r\n        return prettify(this.value)\r\n    }\r\n\r\n    makeValid(){\r\n        this.removeClass(\"wrong\")\r\n    }\r\n    makeInvalid(){\r\n        this.addClass(\"wrong\")\r\n    }\r\n\r\n    onValueChange(callback: (value?: VALUE) => void) {\r\n        this.onValueChangeCallbacks.push(callback)\r\n    }\r\n\r\n    protected constructor(\r\n        readonly parent: Section,\r\n        config: CommonFieldConfig,\r\n        createParagraph: boolean,\r\n        initValue: VALUE,\r\n        ...content: (string | Element | Fragment)[])\r\n    {\r\n        super(parent, `<div class=\"${config.type}-field field\" ${config.size ? `style=\"grid-column: span ${config.size}` : ''}\"></div>`)\r\n\r\n        if(createParagraph && config.label)\r\n            this.append(create(`<p>${config.label}</p>`))\r\n\r\n        this.append(...content)\r\n        this.value = initValue\r\n    }\r\n    private onValueChangeCallbacks: ((value?: VALUE) => void)[] = []\r\n}","import Datepicker from \"../../../inputs/Datepicker\"\r\nimport {Field} from \"./Field\"\r\nimport {Section} from \"../Section\"\r\nimport {create} from \"../../../../util/domWizard\";\r\n\r\nexport class DatepickerField extends Field<FormattedDate>{\r\n\r\n    private calendar = new Datepicker(this.config, range => this.triggerValueChange(range))\r\n\r\n    constructor(section: Section, private config: CalendarFieldConfig) {\r\n        super(section, config, true, null)\r\n        this.append(this.calendar)\r\n        this.value = this.calendar.pickedDateRange\r\n    }\r\n\r\n    override triggerValueChange(newValue?: FormattedDate) {\r\n        this.calendar.pickDateRange(newValue)\r\n        super.triggerValueChange(newValue)\r\n    }\r\n}","import {Fragment} from \"../Fragment\"\r\nimport {valueOrDefault} from \"../../util/data\";\r\n\r\nexport default class Checkbox extends Fragment<HTMLLabelElement>{\r\n\r\n    private checkboxElement: HTMLInputElement\r\n\r\n    constructor(config: CheckboxConfig, onToggle: (checked: boolean) => void) {\r\n        super(`\r\n            <label class=\"checkbox\">\r\n                <input type=\"checkbox\">\r\n                ${valueOrDefault(config.label, \"\")}\r\n            </label>`\r\n        )\r\n        this.checkboxElement = this.select(\"input\")\r\n        this.listen(\"change\", () => onToggle(this.checked))\r\n    }\r\n\r\n    get checked(): boolean{\r\n        return this.checkboxElement.checked\r\n    }\r\n\r\n}","import Checkbox from \"./Checkbox\"\r\nimport {create} from \"../../util/domWizard\";\r\n\r\n// Almost the same as Checkbox\r\nexport class Switch extends Checkbox{\r\n\r\n    constructor(config: SwitchConfig, onToggle: (checked: boolean) => void) {\r\n        super(config, onToggle)\r\n        this.className = \"switch\"\r\n        this.append(create(`<span class=\"slider\"></span>`))\r\n    }\r\n}","import Checkbox from \"../../../inputs/Checkbox\"\r\nimport {Field} from \"./Field\"\r\nimport {Section} from \"../Section\"\r\nimport {Switch} from \"../../../inputs/Switch\"\r\n\r\nexport class SwitchField extends Field<boolean>{\r\n\r\n    constructor(section: Section, config: SwitchFieldConfig) {\r\n        super(section, config, false, false,\r\n            new Switch(config, toggled => this.triggerValueChange(toggled)))\r\n    }\r\n}","import {resolveStyle, resolveModule} from \"../../util/resolver\"\r\nimport {compareMaps, valueOrDefault} from \"../../util/data\"\r\nimport {Fragment} from \"../Fragment\"\r\n\r\nresolveStyle(\"third-party/virtual-select\")\r\nconst virtualSelectModulePromise = resolveModule(\"third-party/virtual-select.min\")\r\n\r\nexport default class Select extends Fragment{\r\n\r\n    pickedKeys: OptionKey[] = []\r\n\r\n    readonly modulePromise = virtualSelectModulePromise\r\n\r\n    constructor(private config: SelectConfig, onPick: (pickedOptions: OptionKey[]) => void) {\r\n        super(`<div class=\"select\"></div>`)\r\n        this.modulePromise.then(() => {\r\n            applyVirtualSelect(this.root, config)\r\n            // this.root.\r\n        })\r\n\r\n        this.listen(\"change\", event => {\r\n            const value = event.currentTarget// @ts-ignore !!! Resolved by html import !!!\r\n                .value\r\n\r\n            const pickedKeys: typeof this.pickedKeys = value.length > 0 ? (\r\n                typeof value === \"object\" ? value : [value]\r\n            ) : []\r\n\r\n            // Check real changes to prevent callback doubling after options setting\r\n            if (this.pickedKeys.sort().toString() !== pickedKeys.sort().toString()) {\r\n                this.pickedKeys = pickedKeys\r\n                onPick(this.pickedKeys)\r\n            }\r\n        })\r\n    }\r\n\r\n    private options: OptionsMap = new Map()\r\n\r\n    updateOptions(options: OptionsMap){\r\n        if(compareMaps(this.options, options)) return\r\n        const pickedKeysBuffer = [...this.pickedKeys]\r\n        return this.modulePromise.then(() => {\r\n            if(options && options.size > 0) {\r\n                this.options = options\r\n                this.root// @ts-ignore !!! Resolved by html import !!!\r\n                    .setOptions(mapToVirtualSelectOptions(options))\r\n\r\n                this.pickOptions(pickedKeysBuffer)\r\n\r\n                this.root// @ts-ignore !!! Resolved by html import !!!\r\n                    .enable()\r\n            } else {\r\n                this.root// @ts-ignore !!! Resolved by html import !!!\r\n                    .disable()\r\n                this.root// @ts-ignore !!! Resolved by html import !!!\r\n                    .reset()\r\n                this.root.blur()\r\n            }\r\n        })\r\n    }\r\n\r\n    pickOptions(keys: OptionKey[]){\r\n        this.modulePromise.then(() => {\r\n            // @ts-ignore !!! Resolved by html import !!!\r\n            this.root.setValue(keys)\r\n        })\r\n    }\r\n\r\n    findOptions=(keys: OptionKey[]): OptionsMap =>\r\n        new Map(keys.map(key => [key, this.options.get(key)]))\r\n}\r\n\r\nfunction applyVirtualSelect(target: HTMLElement, config: SelectConfig){\r\n    // @ts-ignore !!! Resolved by html import !!!\r\n    VirtualSelect.init({\r\n        ele: target,\r\n        additionalClasses: \"multiselect\",\r\n        disabled: true,\r\n        autofocus: false,\r\n        markSearchResults: true,\r\n        zIndex: 100,\r\n        optionsCount: 6,\r\n        multiple: !!config.multiple,\r\n        search: !!config.search,\r\n        hasOptionDescription: !!config.showCodes,\r\n        disableSelectAll: !!config.disableSelectAll,\r\n        maxValues: config.maxValues,\r\n        maxWidth: \"100%\",\r\n        position: \"bottom\",\r\n        disableAllOptionsSelectedText: true,\r\n\r\n        placeholder: \"\",\r\n        noOptionsText: \"Варианты не найдены\",\r\n        noSearchResultsText: \"Результатов не найдено\",\r\n        selectAllText: \"Выбрать все\",\r\n        searchPlaceholderText: \"Поиск...\",\r\n        optionsSelectedText: \"(выбрано)\",\r\n        optionSelectedText: \"вариант выбран\",\r\n        allOptionsSelectedText: \"Все\",\r\n        clearButtonText: \"Очистить\",\r\n        moreText: \"ещё...\"\r\n    })\r\n}\r\n\r\nfunction mapToVirtualSelectOptions(map: Map<string, string>): any[]{\r\n    return [...map.entries()].map(entry => {\r\n        return {\r\n            label: entry[1],\r\n            value: entry[0],\r\n            alias: entry[0],\r\n            description: entry[0]\r\n        }\r\n    })\r\n}","import {Field} from \"./Field\"\r\nimport Select from \"../../../inputs/Select\"\r\nimport {Section} from \"../Section\"\r\nimport {concatMaps, prettify} from \"../../../../util/data\"\r\nimport Form from \"../../Form\"\r\nimport {AbstractServiceBank} from \"../../../../api/serviceBankOptions/AbstractServiceBank\";\r\nimport {CarriersServiceBank} from \"../../../../api/serviceBankOptions/CarriersServiceBank\";\r\nimport {CountriesServiceBank} from \"../../../../api/serviceBankOptions/CountriesServiceBank\";\r\nimport {RegionsServiceBank} from \"../../../../api/serviceBankOptions/RegionsServiceBank\";\r\nimport {RoadsServiceBank} from \"../../../../api/serviceBankOptions/RoadsServiceBank\";\r\nimport {StationsServiceBank} from \"../../../../api/serviceBankOptions/StationsServiceBank\";\r\n\r\nexport class SelectField extends Field<OptionKey[]> {\r\n\r\n    private static OptionsRetrievingQuery = {}\r\n\r\n    protected selectFragment: Select\r\n\r\n    options: OptionsMap = new Map()\r\n\r\n    private staticOptions: OptionsMap = new Map()\r\n    private serviceBankOptions: OptionsMap = new Map()\r\n\r\n    awaitingForServiceBankOptions: boolean = false\r\n\r\n    constructor(section: Section, private config: SelectFieldConfig) {\r\n        const select = new Select(config,\r\n            optionKeys => this.triggerValueChange(optionKeys))\r\n        super(section, config, true, [])\r\n        this.append(select)\r\n        this.selectFragment = select\r\n    }\r\n\r\n    override triggerValueChange(optionKeys: OptionKey[]) {\r\n        this.selectFragment.modulePromise.then(() => {\r\n            this.selectFragment.pickOptions(optionKeys)\r\n            super.triggerValueChange(this.selectFragment.pickedKeys)\r\n        })\r\n    }\r\n\r\n    override get prettyValue(){\r\n        return prettify(this.selectFragment.findOptions(this.value))\r\n    }\r\n\r\n    setStaticOptions(options: OptionsMap) {\r\n        this.staticOptions = options\r\n        this.updateOptions()\r\n    }\r\n\r\n    setupServiceBank(setup: ServiceBankSetup, initValues: OptionKey[] = []) {\r\n        this.awaitingForServiceBankOptions = true\r\n        setupServiceBankRetrieving(this.parent.parent, setup,\r\n            (options, userAssociatedOptionKeys) => {\r\n                this.serviceBankOptions = options\r\n                this.updateOptions()?.then(() => {\r\n                    if (initValues.length + userAssociatedOptionKeys.length > 0)\r\n                        this.triggerValueChange([...userAssociatedOptionKeys, ...initValues])\r\n                })\r\n                this.awaitingForServiceBankOptions = false\r\n            })\r\n       }\r\n\r\n    private updateOptions() {\r\n        this.options = concatMaps(this.staticOptions, this.serviceBankOptions)\r\n        return this.selectFragment.updateOptions(this.options)\r\n    }\r\n}\r\n\r\nfunction setupServiceBankRetrieving(form: Form, config: ServiceBankSetup, onFetch: (options: OptionsMap, userAssociatedOptionKeys: OptionKey[]) => void){\r\n    const sourceFields = config.propertiesTriggerKeys ? form.findFields(Array.from(Object.values(config.propertiesTriggerKeys))) : null\r\n    const optionsAccessor = createServiceBankAccessor(config)\r\n    subscribeToFields(sourceFields, () => {\r\n        const properties: typeof config.properties = {...config.properties}\r\n        // Remapping\r\n        Object.entries(config.propertiesTriggerKeys).forEach(entry => {\r\n            const sourceField = sourceFields?.get(entry[1])\r\n            if (sourceField) {\r\n                const json = sourceField.jsonValue\r\n                properties[entry[0]] = sourceField instanceof SelectField && json !== null ? Object.keys(json) : json\r\n            }\r\n        })\r\n        optionsAccessor\r\n            .fetch(properties)\r\n            .then(options => options ? onFetch(options, optionsAccessor.userAssociatedOptionKeys) : options)\r\n    })\r\n}\r\n\r\nfunction createServiceBankAccessor(config: ServiceBankSetup): AbstractServiceBank {\r\n    const accessor = config.type === \"carriers\" ? new CarriersServiceBank() :\r\n        config.type === \"countries\" ? new CountriesServiceBank() :\r\n            config.type === \"regions\" ? new RegionsServiceBank() :\r\n                config.type === \"roads\" ? new RoadsServiceBank() :\r\n                    config.type === \"stations\" ? new StationsServiceBank()\r\n                        : new Error(\"Cannot resolve ServiceBank type: \" + config.type)\r\n\r\n    if(accessor instanceof Error)\r\n        throw accessor\r\n    else\r\n        return accessor\r\n}\r\n\r\nfunction subscribeToFields(fieldsMap: Map<string, Field<any>> | Field<any>[], onChange: () => void, runAfter = true){\r\n    fieldsMap?.forEach(field =>\r\n        field.onValueChange(() => {\r\n            onChange()\r\n        })\r\n    )\r\n    if(runAfter)\r\n        onChange()\r\n}","import {Fragment} from \"../Fragment\"\r\n\r\nexport class TextArea extends Fragment{\r\n\r\n    private shiftIsPressed = false\r\n\r\n    constructor() {\r\n        super(`<div class=\"textarea\" contentEditable spellcheck=\"false\"></div>`)\r\n        this.listen(\"keydown\", (event: KeyboardEvent) => {\r\n            if(event.key === \"Tab\"){\r\n                event.preventDefault()\r\n                this.insertTab()\r\n            }\r\n            if(event.key === \"Shift\"){\r\n                this.shiftIsPressed = true\r\n            }\r\n        })\r\n        this.listen(\"keyup\", (event: KeyboardEvent) => {\r\n            if(event.key === \"Shift\"){\r\n                this.shiftIsPressed = true\r\n            }\r\n        })\r\n    }\r\n\r\n    onInputEnter(callback: (text: string) => void){\r\n        this.listen(\"focusout\", () => callback(this.text))\r\n        this.listen(\"keydown\", (event: KeyboardEvent) => {\r\n            if(event.key === \"Enter\" && this.shiftIsPressed){\r\n                // Removing the new line\r\n                this.text = this.text.trimEnd()\r\n                this.root.blur()\r\n            }\r\n        })\r\n    }\r\n\r\n    get text(): string{\r\n        return this.root.innerText\r\n    }\r\n    set text(str: string){\r\n        this.root.innerText = str\r\n    }\r\n\r\n    private insertTab(){\r\n        if (getSelection) {\r\n            const selection = getSelection()\r\n            if (selection.getRangeAt && selection.rangeCount) {\r\n                const range = selection.getRangeAt(0)\r\n                range.deleteContents()\r\n                range.insertNode(document.createTextNode(\"    \"))\r\n                selection.collapseToEnd()\r\n            }\r\n        }\r\n    }\r\n}","import {Field} from \"./Field\"\r\nimport {Section} from \"../Section\"\r\nimport {TextArea} from \"../../../inputs/TextArea\"\r\n\r\nexport class TextField extends Field<string>{\r\n\r\n    constructor(section: Section, config: TextFieldConfig) {\r\n        super(section, config, true, \"\")\r\n        const textInput = new TextArea()\r\n        textInput.onInputEnter(text => this.triggerValueChange(text))\r\n        this.append(textInput)\r\n    }\r\n}","import {Fragment} from \"../../Fragment\"\r\nimport {Field} from \"./field/Field\"\r\nimport {valueOrDefault} from \"chart.js/helpers\"\r\nimport Form from \"../Form\"\r\nimport {DatepickerField} from \"./field/DatepickerField\"\r\nimport {SwitchField} from \"./field/SwitchField\"\r\nimport {SelectField} from \"./field/SelectField\"\r\nimport {create} from \"../../../util/domWizard\"\r\nimport {InlineFragment} from \"../../InlineFragment\"\r\nimport {TextField} from \"./field/TextField\"\r\n\r\nexport class Section extends InlineFragment<Form>{\r\n\r\n    readonly fields = new Map<string, Field<any>>()\r\n\r\n    getField = (fieldKey: string) => this.fields.get(fieldKey)\r\n\r\n    constructor(parent: Form, gridLayout: FormConfig[\"layout\"], config: FormSectionConfig) {\r\n        super(parent, `\r\n            <div class=\"section\"\r\n                 style=\"${gridLayout}\">\r\n            </div>`)\r\n        if (config.title)\r\n            this.append(create(`<p>${config.title}</p>`))\r\n\r\n        // Determining fields\r\n        for (const key in config) {\r\n            if(key.endsWith(\"Field\"))\r\n                this.fields.set(key, this.createField(config[key] as FieldConfig))\r\n        }\r\n    }\r\n\r\n    private createField(config: FieldConfig): Field<any>{\r\n        switch (config.type){\r\n            case \"switch\":     return new SwitchField(this, config)\r\n            case \"datepicker\": return new DatepickerField(this, config)\r\n            case \"select\":     return new SelectField(this, config)\r\n            case \"text\":       return new TextField(this, config)\r\n        }\r\n    }\r\n}\r\n\r\n","import {JsonAccessor} from \"./abstract/JsonAccessor\";\r\n\r\nexport class FormStatementAccessor extends JsonAccessor<FormStatement> {\r\n\r\n    override path: string\r\n    constructor() {\r\n        super()\r\n        this.method = \"POST\"\r\n        this.errorFooter = \"Ошибка получения состояния формы\"\r\n    }\r\n\r\n    override fetch(body: any, trigger?: string): Promise<FormStatement> {\r\n        this.params = {trigger}\r\n        return super.fetch(body)\r\n    }\r\n}","import {resolveStyle} from \"../../util/resolver\"\r\nimport {Button} from \"../inputs/Button\"\r\nimport {Field} from \"./section/field/Field\"\r\nimport {Fragment} from \"../Fragment\"\r\nimport {Section} from \"./section/Section\"\r\nimport {jsonifyFields, jsonToMap, valueOrDefault} from \"../../util/data\"\r\nimport {SelectField} from \"./section/field/SelectField\"\r\nimport {FormStatementAccessor} from \"../../api/FormStatementAccessor\"\r\n\r\nresolveStyle(\"form\")\r\n\r\nexport default class Form extends Fragment<HTMLFormElement> {\r\n\r\n    readonly sections = new Map<string, Section>\r\n\r\n    readonly fields: Map<string, Field<any>> = new Map()\r\n\r\n    readonly submitButton = new Button({\r\n        className: \"confirm\",\r\n        text: valueOrDefault(this.config?.submitText, \"\")\r\n    }, () => this.onSubmit(this.jsonFieldValues, this.prettyFieldValues))\r\n\r\n    private startValidating = false\r\n\r\n    private statementAccessor: FormStatementAccessor\r\n\r\n    constructor(protected readonly config: FormConfig, public onSubmit?: (jsonFieldValues: JsonProperties, fullFieldValues: Map<FieldKey, any>) => void) {\r\n        super(`<form class=\"${config.layout ? config.layout : 'horizontal'}\"></form>`)\r\n\r\n        // Determining sections\r\n        for (const key in config) {\r\n            if(key.endsWith(\"Section\")) {\r\n                const section = new Section(this, config.layout, config[key] as FormSectionConfig)\r\n                this.sections.set(key, section)\r\n                section.fields.forEach((field, fieldKey) =>\r\n                    this.fields.set(`${key}.${fieldKey}`, field))\r\n            }\r\n        }\r\n\r\n        if(this.config.statementPath) this.startStatementRetrieving()\r\n        this.append(this.submitButton)\r\n        this.submitButton.listen(\"mouseenter\", () => {\r\n            this.startValidating = true\r\n            this.submitButton.disable()\r\n            this.validateFields()\r\n        })\r\n    }\r\n\r\n    private currentStatement: FormStatement\r\n\r\n    get jsonFieldValues(){\r\n        return jsonifyFields(this.fields)\r\n    }\r\n\r\n    get prettyFieldValues(){\r\n        const prettyFieldValues = new Map<FieldKey, any>()\r\n        this.fields.forEach((field, key) => {\r\n            prettyFieldValues.set(key, field.prettyValue)\r\n        })\r\n        return prettyFieldValues\r\n    }\r\n\r\n    // Return fields with specific locations or all fields\r\n    findFields(fieldLocations: string[]): Map<string, Field<any>>{\r\n        const fieldsMap: Map<string, Field<any>> = new Map()\r\n        fieldLocations.forEach(location =>\r\n            fieldsMap.set(location, this.fields.get(location)))\r\n\r\n        return fieldsMap\r\n    }\r\n\r\n    private startStatementRetrieving(){\r\n        this.statementAccessor = new FormStatementAccessor()\r\n        this.hide()\r\n        this.onMount(() =>\r\n            this.manageFieldsStatement(\"initial\").then(\r\n                () => this.show())\r\n        )\r\n        this.fields.forEach((field, key) => {\r\n            field.onValueChange(\r\n                () => this.manageFieldsStatement(key))\r\n        })\r\n    }\r\n\r\n    // TODO refactor\r\n    private manageFieldsStatement(trigger: string){\r\n        this.statementAccessor.path = this.config.statementPath\r\n        return this.statementAccessor.fetch(this.jsonFieldValues, trigger).then(statement => {\r\n            if(!!statement){\r\n                this.currentStatement = statement\r\n                this.validateFields()\r\n\r\n                if(statement.setOptions){\r\n                    Object.entries(statement.setOptions).forEach(([fieldKey, options]) => {\r\n                        const field = this.fields.get(fieldKey)\r\n                            if(field && field instanceof SelectField)\r\n                                field.setStaticOptions(jsonToMap(options))\r\n                    })\r\n                }\r\n                if(statement.setupServiceBank){\r\n                    Object.entries(statement.setupServiceBank).forEach(([fieldKey, setup]) => {\r\n                        const field = this.fields.get(fieldKey)\r\n                        if(field && field instanceof SelectField) {\r\n                            const initValues = statement.setValues\r\n                                ? Object.entries(statement.setValues).find(entry => entry[0] === fieldKey)?.[1]\r\n                                : undefined\r\n                            field.setupServiceBank(setup, initValues)\r\n                        }\r\n                    })\r\n                }\r\n                if(statement.setValues) Object.entries(statement.setValues).forEach(\r\n                    ([fieldKey, value]) => {\r\n                        const field = this.fields.get(fieldKey)\r\n                        if (field && !(field instanceof SelectField && field.awaitingForServiceBankOptions))\r\n                            field.triggerValueChange(value)\r\n                    })\r\n\r\n                statement.show?.forEach(key => {\r\n                    if(key.includes(\".\")) this.fields.get(key).show()\r\n                    else this.sections.get(key).show()\r\n                })\r\n                statement.hide?.forEach(key => {\r\n                    if(key.includes(\".\")) this.fields.get(key).hide()\r\n                    else this.sections.get(key).hide()\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    private validateFields(){\r\n        if(this.startValidating){\r\n            if (this.currentStatement.wrong)\r\n                this.submitButton.disable()\r\n            else\r\n                this.submitButton.enable()\r\n\r\n            this.fields.forEach((field, fieldKey) => {\r\n                field.makeValid()\r\n                if(this.currentStatement.wrong?.find(wrongFieldKey => fieldKey === wrongFieldKey))\r\n                    field.makeInvalid()\r\n            })\r\n        }\r\n    }\r\n}","import {Fragment} from \"../Fragment\"\r\nimport {Button} from \"../inputs/Button\"\r\n\r\nexport class NavigationBar extends Fragment{\r\n\r\n    private tabButtons = new Map<string, Button>()\r\n    private tabActions = new Map<string, () => void>()\r\n\r\n    constructor(tabs?: {[text: string]: () => void}) {\r\n        super(`<div class=\"nav-bar\"></div>`)\r\n\r\n        if(tabs)\r\n            Object.entries(tabs).forEach(entry => {\r\n                this.add(entry[0], entry[1])\r\n            })\r\n    }\r\n\r\n    add(tabTitle: string, onPick: () => void){\r\n        const tabAction = () => {\r\n            onPick()\r\n            this.tabButtons.forEach((button, name) => {\r\n                button.removeClass(\"active\")\r\n                if(name === tabTitle)\r\n                    button.addClass(\"active\")\r\n            })\r\n        }\r\n        const tabButton = new Button({\r\n            className: \"tab\",\r\n            text: tabTitle\r\n        }, () => tabAction())\r\n        this.tabButtons.set(tabTitle, tabButton)\r\n        this.tabActions.set(tabTitle, tabAction)\r\n        this.append(tabButton)\r\n    }\r\n\r\n    pick(tabTitle: string){\r\n        this.tabActions.get(tabTitle)()\r\n    }\r\n}","import {Fragment} from \"../Fragment\"\r\n\r\nexport class NavigationBody extends Fragment{\r\n\r\n    constructor(...content: (Fragment | Element | string)[]) {\r\n        super(`<div class=\"nav-body\"></div>`)\r\n        this.append(...content)\r\n        this.hide()\r\n    }\r\n}","import {Fragment} from \"../Fragment\"\r\nimport {NavigationBar} from \"./NavigationBar\"\r\nimport {NavigationBody} from \"./NavigationBody\"\r\n\r\nexport class NavigationContainer extends Fragment{\r\n\r\n    private readonly naviBar = new NavigationBar()\r\n    private readonly naviBodies: NavigationBody[] = []\r\n\r\n    constructor() {\r\n        super(`<div class=\"nav-container\"></div>`)\r\n        this.append(this.naviBar)\r\n    }\r\n\r\n    createTab(tabTitle: string, onPick?: () => void, ...content: (Fragment | Element | string)[]){\r\n        const naviBody = new NavigationBody(...content)\r\n        this.naviBodies.push(naviBody)\r\n        this.append(naviBody)\r\n        this.naviBar.add(tabTitle,\r\n            () => {\r\n                this.naviBodies.forEach(body => body.hide())\r\n                naviBody.show()\r\n                onPick()\r\n            })\r\n    }\r\n\r\n    pickTab(tabTitle: string){\r\n        this.naviBar.pick(tabTitle)\r\n    }\r\n}","import {JsonAccessor} from \"./abstract/JsonAccessor\"\r\n\r\nexport class Report extends JsonAccessor<ReportModel>{\r\n\r\n    constructor(override path: string) {\r\n        super()\r\n        this.method = \"POST\"\r\n        this.errorFooter = \"Не удалось загрузить отчёт\"\r\n    }\r\n}","import {Button} from \"../inputs/Button\"\r\nimport {getFullscreenElement, scrollIntoElement, toggleFullscreen} from \"../../util/domWizard\"\r\nimport ReportSlot from \"./ReportSlot\"\r\nimport {Loader} from \"../misc/Loader\"\r\nimport {InlineFragment} from \"../InlineFragment\"\r\nimport {popupTimeoutAction} from \"../../util/modal\";\r\n\r\nexport class Head extends InlineFragment<ReportSlot>{\r\n\r\n    private readonly titleElement = this.select(\"p\")\r\n    private readonly originTitleText: string\r\n\r\n    toTopButton: Button = this.createToTopButton()\r\n    private chartsButton: Button\r\n    private exportButton: Button = this.createXlsxExportButton()\r\n    private collapseButton: Button = this.createCollapseButton()\r\n    private fullscreenButton: Button = this.createFullscreenButton()\r\n\r\n    constructor(reportSlot: ReportSlot, title: string) {\r\n        super(reportSlot, `\r\n            <div class=\"head\"><p>${title}</p></div>\r\n        `)\r\n        this.originTitleText = title\r\n        this.append(this.toTopButton, this.exportButton, this.collapseButton, this.fullscreenButton)\r\n        this.hideButtons()\r\n    }\r\n\r\n    set title(text: string){\r\n        this.titleElement.textContent = text\r\n    }\r\n    get title(): string{\r\n        return this.titleElement.textContent\r\n    }\r\n\r\n    showButtons(){\r\n        this.toTopButton.show()\r\n        this.exportButton.show()\r\n        this.collapseButton.show()\r\n        this.fullscreenButton.show()\r\n    }\r\n\r\n    hideButtons(){\r\n        this.toTopButton.hide()\r\n        this.exportButton.hide()\r\n        this.collapseButton.hide()\r\n        this.fullscreenButton.hide()\r\n    }\r\n\r\n    // addChartsButton(){\r\n    //     this.chartsButton = this.createButton(\r\n    //         {text: \"Графическое представление\", image: \"img/graph.svg\"},\r\n    //         () => this.reportSlot.body.toggleCharts())\r\n    // }\r\n\r\n    private createToTopButton(): Button{\r\n        return new Button(\r\n            {hint:  \"Наверх\", image: \"to_top_blue.svg\"},\r\n            () => scrollIntoElement(document.body)\r\n        )\r\n    }\r\n\r\n    private createXlsxExportButton(): Button {\r\n        return new Button({hint: \"Экспортировать\", image: \"download.svg\"},\r\n            () => popupTimeoutAction(\"Экспортировать таблицу в .xlsx?\", \"Подтвердить\",\r\n                () => this.parent.body.table.xlsxAccessor.fetch()))\r\n    }\r\n\r\n    private createCollapseButton(): Button{\r\n        return createToggleableButton(\r\n            {hint: \"Свернуть\", image: \"collapse.svg\"},\r\n            {hint: \"Развернуть\", image: \"collapse.svg\"},\r\n            () => {\r\n                this.parent.body.collapse()\r\n                this.chartsButton?.disable()\r\n                this.fullscreenButton?.disable()\r\n            },\r\n            () => {\r\n                this.parent.body.expand()\r\n                this.chartsButton?.enable()\r\n                this.fullscreenButton?.enable()\r\n            })\r\n    }\r\n\r\n    private createFullscreenButton(): Button {\r\n        const defaultConfig = {hint: \"Развернуть на весь экран\", image: \"expand.svg\"}\r\n        const button = new Button(defaultConfig, () => toggleFullscreen(this.parent.root))\r\n        // Change fullscreenButton on fullscreenchange\r\n        addEventListener(\"fullscreenchange\", () => {\r\n            const fullscreenMode = !!getFullscreenElement()\r\n            button.hint = fullscreenMode ? \"Выйти из полноэкранного режима\" : defaultConfig.hint\r\n            button.image = fullscreenMode ? \"exit.svg\" : defaultConfig.image\r\n        })\r\n        return button\r\n    }\r\n\r\n    setTitleOrDefault(title: string) {\r\n        this.title = title ? title : this.originTitleText\r\n    }\r\n}\r\n\r\nfunction createToggleableButton(configA: ButtonConfig,\r\n    configB: ButtonConfig,\r\n    onClickA: () => void,\r\n    onClickB: () => void)\r\n{\r\n    let toggled = false\r\n    const button = new Button(configA, () => {\r\n        if(toggled === false){\r\n            if(configA.image !== configB.image) button.image = configB.image\r\n            button.hint = configB.hint\r\n            onClickA()\r\n        }else {\r\n            if(configA.image !== configB.image) button.image = configA.image\r\n            button.hint = configA.hint\r\n            onClickB()\r\n        }\r\n        toggled = !toggled\r\n    })\r\n    return button\r\n}","import {Fragment} from \"../Fragment\"\r\nimport {Button} from \"./Button\"\r\n\r\nexport class TextInput extends Fragment{\r\n\r\n    private textInputElement: HTMLInputElement\r\n\r\n    constructor(placeholder: string, onInput: (text: string) => void) {\r\n        super(`\r\n            <div class=\"text input\">\r\n                <input type=\"text\" placeholder=\"${placeholder}\">\r\n            <div/>\r\n        `)\r\n        this.append(new Button({\r\n            className: \"frameless reset\",\r\n            text: \"❌\",\r\n            hint: \"Сбросить\"\r\n        }, () => this.text = \"\"))\r\n\r\n        this.textInputElement = this.select(\"input\")\r\n\r\n        this.listen(\"input\", () => {\r\n            this.toggleClass(\"empty\", !this.text || this.text.length === 0)\r\n            if(onInput) onInput(this.text)\r\n        })\r\n    }\r\n\r\n    get text(): string{\r\n        return this.textInputElement.value\r\n    }\r\n    set text(str: string){\r\n        this.textInputElement.value = str\r\n    }\r\n}","import {Accessor} from \"./Accessor\"\r\n\r\nexport abstract class BlobAccessor extends Accessor<Blob>{\r\n\r\n    protected override get request(): Promise<Blob> {\r\n        return this.requestInit.blob()\r\n    }\r\n}","\r\nimport {BlobAccessor} from \"./abstract/BlobAccessor\"\r\n\r\nexport class XlsxAccessor extends BlobAccessor {\r\n\r\n    override path = \"/appforge/converter/xlsx\"\r\n    override method: \"POST\" = \"POST\"\r\n    override errorFooter = \"Ошибка экспорта таблицы\"\r\n\r\n    constructor(override body: XlsxTableModel) {\r\n        super()\r\n    }\r\n\r\n    override fetch(){\r\n        return super.fetch().then(blob => {\r\n            const aElement = document.createElement('a')\r\n            aElement.setAttribute('download', this.body.name + \".xlsx\")\r\n            const href = URL.createObjectURL(blob)\r\n            aElement.href = href\r\n            aElement.setAttribute('target', '_blank')\r\n            aElement.click()\r\n            URL.revokeObjectURL(href)\r\n            return blob\r\n        })\r\n    }\r\n}","export function executeFormulaForRowData(formula: string,\r\n                                         row: RowData,\r\n                                         totalRow: RowData,\r\n                                         matrix: MatrixData){\r\n\r\n    // These fictitious calls need to prevent arguments removing by compiler optimisation.\r\n    // They all can be used in the formula\r\n    row.length\r\n    totalRow.length\r\n    matrix.length\r\n\r\n    return eval(formula)\r\n}","import {emptyElement, scrollIntoElement} from \"../../../util/domWizard\"\r\nimport {filterMap, numberOf} from \"../../../util/data\"\r\nimport {TextInput} from \"../../inputs/TextInput\"\r\nimport {resolveStyle} from \"../../../util/resolver\"\r\nimport {InlineFragment} from \"../../InlineFragment\"\r\nimport {Body} from \"../Body\"\r\nimport {XlsxAccessor} from \"../../../api/XlsxAccessor\"\r\nimport {executeFormulaForRowData} from \"../../../util/DANGEROUS\"\r\nimport {SelectField} from \"../../form/section/field/SelectField\"\r\n\r\nresolveStyle(\"table\")\r\n\r\nexport class Table extends InlineFragment<Body>{\r\n\r\n    thead: HTMLTableSectionElement\r\n    tbody: HTMLTableSectionElement\r\n    tfoot: HTMLTableSectionElement\r\n\r\n    // Key is filtrated column, value is filter text value\r\n    private filtersMap: Map<number, string> = new Map()\r\n\r\n    readonly xlsxAccessor: XlsxAccessor\r\n\r\n    constructor(body: Body,\r\n                private readonly data: MatrixData,\r\n                private readonly colFeatures: DataFeature[],\r\n                private readonly model: TableModel)\r\n    {\r\n        super(body, `\r\n            <div class=\"table\">\r\n                <table>\r\n                    <thead></thead>\r\n                    <tfoot></tfoot>\r\n                    <tbody></tbody>\r\n                </table>\r\n            </div>`\r\n        )\r\n        this.thead = this.select(\"thead\")\r\n        this.tbody = this.select(\"tbody\")\r\n        this.tfoot = this.select(\"tfoot\")\r\n        if(model.head) this.head = model.head\r\n        if(data && data.length > 0) this.appendData(data)\r\n        this.xlsxAccessor = new XlsxAccessor({\r\n            name:    this.parent.parent.head.title,\r\n            context: this.parent.context?.visibleValues,\r\n            title:   this.parent.parent.head.title,\r\n            header:  getCompleteRowsFromElement(this.thead),\r\n            body:    getCompleteRowsFromElement(this.tbody),\r\n            total:   getCompleteRowsFromElement(this.tfoot)[0]\r\n        })\r\n\r\n        this.addScrollHelper()\r\n    }\r\n\r\n    private set head(head: TableHead){\r\n        emptyElement(this.thead)\r\n        this.thead.innerHTML += `<tr>${head.map(cellText => `<th>${cellText}</th>`).join('')}</tr>`\r\n        // head.forEach(headRow =>\r\n        //     this.thead.innerHTML +=\r\n        //         `<tr>${headRow.map(headCell => `\r\n        //             <th rowspan=\"${headCell.rowspan}\"\r\n        //                 colspan=\"${headCell.colspan}\"\r\n        //                 ${headCell.addFilter ? 'class=\"filter\"' : ''}>\r\n        //                 ${headCell.text}\r\n        //             </th>`).join(\"\")}\r\n        //         </tr>`\r\n        //     )\r\n    }\r\n\r\n    private appendData(data: MatrixData){\r\n        // Firstly calculate the total data to use it in the formulas\r\n        let totalRowData: RowData = []\r\n        data.forEach(rowData => rowData.forEach(\r\n            (cellData, cellIndex) => {\r\n                const feature = this.colFeatures?.[cellIndex]\r\n                if(typeof cellData === \"number\" && feature?.type !== \"text\") {\r\n                    if(feature?.formula)\r\n                        totalRowData[cellIndex] = 0\r\n                    else\r\n                        totalRowData[cellIndex] = totalRowData[cellIndex]\r\n                            ? numberOf(totalRowData[cellIndex]) + cellData\r\n                            : cellData\r\n                }\r\n                else totalRowData[cellIndex] = ''\r\n            })\r\n        )\r\n        totalRowData = this.applyFeaturesToRowData(totalRowData)\r\n\r\n        this.tbody.innerHTML = data.map(rowData => this.createHtmlRowText(this.applyFeaturesToRowData(rowData))).join('')\r\n\r\n        if(data.length > 1)\r\n            this.tfoot.innerHTML = this.createHtmlRowText(totalRowData)\r\n\r\n        this.groupPrimaryCells()\r\n        this.spanTotalPrimaryCells()\r\n    }\r\n\r\n    private applyFeaturesToRowData(rowData: RowData, totalRowData: RowData = rowData): RowData{\r\n        this.colFeatures?.forEach((feature, index) => {\r\n            if(feature.type === \"numeric\" && feature.formula){\r\n                rowData[index] = executeFormulaForRowData(feature.formula, rowData, totalRowData, this.data)\r\n            } else if(feature.type === \"text\"){\r\n                feature.replaceWithLabels?.fields?.forEach(fieldKey => {\r\n                    const field = this.parent.parent.associatedFormSnapshot.fields.get(fieldKey)\r\n                    const fieldValue = field ? (field as SelectField).options.get(`${rowData[index]}`) : undefined\r\n                    if(fieldValue) rowData[index] = fieldValue\r\n                })\r\n            }\r\n        })\r\n        return rowData\r\n    }\r\n\r\n    private createHtmlRowText(rowData: RowData){\r\n        return `\r\n            <tr>${rowData.map(\r\n                (data, index) => \r\n                    this.colFeatures && this.colFeatures[index] \r\n                        ? this.createHtmlCellText(index, rowData) \r\n                        : `<td>${data}</td>`\r\n                ).join('')}\r\n            </tr>`\r\n    }\r\n\r\n    private createHtmlCellText(cellIndex: number, rowData: RowData){\r\n        const feature = this.colFeatures[cellIndex]\r\n        const cellData = rowData[cellIndex]\r\n        if(feature){\r\n            return `\r\n                <td class=\"${feature.type}${this.model.primaryColumnsNumber > cellIndex ? ' primary' : ''}\" \r\n                    ${feature.type === \"numeric\" && feature.colored\r\n                        ? `style=\"color: ${cellData >= 0 ? 'var(--positive-color)' : 'var(--negative-color)'}\"`\r\n                        : ''}>\r\n                    ${cellData}\r\n                </td>`\r\n        }\r\n    }\r\n\r\n    private applyFilter(htmlHeadCell: HTMLTableCellElement){\r\n        htmlHeadCell.append(\r\n            new TextInput(\"🔎\", value => {\r\n                this.filtersMap.set(getCellIndexWithSpans(htmlHeadCell), value)\r\n                // TODO implement\r\n            }\r\n            ).root\r\n        )\r\n    }\r\n\r\n    private filtrateTableMap(tableMap: TableMapData): TableMapData{\r\n        return filterMap(tableMap, (valueCells, primaryCells) => {\r\n            const cellTexts = primaryCells.concat(valueCells.map(v => String(v)))\r\n            for (let i = 0; i < cellTexts.length; i++) {\r\n                const filterText = this.filtersMap.get(i)\r\n                if(!cellTexts[i].toLowerCase().includes(filterText ? filterText.toLowerCase() : \"\"))\r\n                    return false\r\n            }\r\n            return true\r\n        })\r\n    }\r\n\r\n    private spanTotalPrimaryCells(){\r\n        this.tfoot.querySelectorAll<HTMLTableCellElement>(\"tr td.primary\").forEach((td, index) => {\r\n            if(index === 0) {\r\n                td.colSpan = this.model.primaryColumnsNumber\r\n                td.textContent = \"Итого\"\r\n            }\r\n            else td.remove()\r\n        })\r\n    }\r\n\r\n    private groupPrimaryCells(startHtmlRow: HTMLTableRowElement = this.tbody.querySelector(\"tr:first-of-type\") as HTMLTableRowElement,\r\n                               endHtmlRow: HTMLTableRowElement = this.tbody.querySelector(\"tr:last-of-type\") as HTMLTableRowElement,\r\n                               nesting: number = 0){\r\n\r\n        let htmlRowMarshall: HTMLTableRowElement\r\n        let lastPrimaryCell: HTMLTableCellElement\r\n        const marshallNextNesting=() => {\r\n            if(lastPrimaryCell && nesting < this.model.groupedColumnsNumber - 1)\r\n                this.groupPrimaryCells(lastPrimaryCell.parentElement as HTMLTableRowElement, htmlRowMarshall, nesting + 1)\r\n        }\r\n        while (htmlRowMarshall !== endHtmlRow){\r\n            htmlRowMarshall = htmlRowMarshall ? htmlRowMarshall.nextElementSibling as HTMLTableRowElement : startHtmlRow\r\n            const currentPrimaryCell = htmlRowMarshall.cells[nesting]\r\n            if(lastPrimaryCell && lastPrimaryCell.textContent === currentPrimaryCell?.textContent){\r\n                lastPrimaryCell.rowSpan++\r\n                currentPrimaryCell.hidden = true\r\n            }\r\n            else {\r\n                marshallNextNesting()\r\n                lastPrimaryCell = htmlRowMarshall.querySelectorAll<HTMLTableCellElement>(\"td.primary\")[nesting]\r\n            }\r\n        }\r\n        marshallNextNesting()\r\n    }\r\n\r\n    private addScrollHelper(){\r\n        let mouseIsInside = false\r\n        // Auto scroll into the table when user scrolls inside of it\r\n        this.listen(\"scroll\", () => {\r\n            if(mouseIsInside && Math.round(this.root.getClientRects().item(0).top) != 0){\r\n                scrollIntoElement(this.root)\r\n            }\r\n        })\r\n\r\n        this.listen(\"mouseenter\", () => mouseIsInside = true)\r\n        this.listen(\"mouseleave\", () => mouseIsInside = false)\r\n    }\r\n}\r\n\r\nfunction getCellIndexWithSpans(targetCell: HTMLTableCellElement): number  {\r\n\r\n    let result: number = -1\r\n\r\n    let rows = targetCell.parentElement.parentElement.querySelectorAll('tr'),\r\n        matrix = [],\r\n        cell: HTMLTableCellElement = null,\r\n        rowIndex: number = null,\r\n        colIndex: number = null\r\n\r\n\r\n    for (let i = 0; i < rows.length && result === -1; i++) {\r\n        console.log(true)\r\n        matrix[i] = matrix[i] || [];\r\n        const row = rows[i];\r\n\r\n        for (let j = 0; j < row.cells.length; j++) {\r\n            cell = row.cells[j]\r\n            rowIndex = row.rowIndex\r\n            matrix[rowIndex] = matrix[rowIndex] || []\r\n            colIndex = null\r\n            for (let l = 0; l <= matrix[rowIndex].length && colIndex === null; l++) {\r\n                if (!matrix[rowIndex][l]) colIndex = l\r\n            }\r\n\r\n            if (cell === targetCell) {\r\n                result = colIndex\r\n                break;\r\n            }\r\n\r\n            for (let k = rowIndex; k < rowIndex + cell.rowSpan; k++) {\r\n                for (let l = colIndex; l < colIndex + cell.colSpan; l++) {\r\n                     matrix[k] = matrix[k] || [];\r\n                    matrix[k][l] = 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction getCompleteRowsFromElement(element: Element): CompleteRow[]{\r\n    let rows: CompleteRow[] = []\r\n    element.querySelectorAll(\"tr\").forEach(tr => {\r\n        let row: CompleteRow = []\r\n        tr.querySelectorAll<HTMLTableCellElement>(\"td, th\").forEach(tc => {\r\n            if(!tc.hidden) {\r\n                row.push({\r\n                    text: tc.innerText.trim(),\r\n                    colspan: tc.colSpan,\r\n                    rowspan: tc.rowSpan\r\n                })\r\n            }\r\n        })\r\n        rows.push(row)\r\n    })\r\n    return rows\r\n}","import {InlineFragment} from \"../../InlineFragment\"\r\nimport {Body} from \"../Body\"\r\n\r\nexport class Context extends InlineFragment<Body>{\r\n\r\n    visibleValues: string[]\r\n\r\n    constructor(body: Body, context: ContextFields) {\r\n        super(body, `<ul class=\"context\"></ul>`)\r\n        this.visibleValues = Object.entries(context)\r\n            .map(([label, fieldKey]) =>\r\n                label + \": \" + body.parent.associatedFormSnapshot.prettyFieldValues.get(fieldKey))\r\n\r\n        this.root.innerHTML = this.visibleValues.map(contextString => `<li>${contextString}</li>`).join(\"\")\r\n    }\r\n}","import {emptyElement} from \"../../util/domWizard\"\r\nimport {Table} from \"./content/Table\"\r\nimport {Chart} from \"./content/Chart\"\r\nimport {Button} from \"../inputs/Button\"\r\nimport {popupTimeoutAction} from \"../../util/modal\"\r\nimport ReportSlot from \"./ReportSlot\"\r\nimport {prettify} from \"../../util/data\"\r\nimport {Context} from \"./content/Context\"\r\nimport {InlineFragment} from \"../InlineFragment\"\r\n\r\nexport class Body extends InlineFragment<ReportSlot>{\r\n\r\n    context: Context\r\n    table: Table\r\n    charts: Chart[]\r\n\r\n    private _collapsed: boolean = false\r\n\r\n    private cache: ReportModel\r\n\r\n    constructor(reportSlot: ReportSlot) {\r\n        super(reportSlot, `<div class=\"body\"></div>`)\r\n    }\r\n\r\n    setReport(model: ReportModel){\r\n        this.reset()\r\n        this.cache = model\r\n        if(model.context)\r\n            this.context = new Context(this, model.context)\r\n        if(model.table)\r\n            this.table = new Table(this, model.data, model.dataFeatures, model.table)\r\n    }\r\n\r\n    // createCharts(models: ChartModel[] = this.chartsModelCache): Chart[]{\r\n    //     this.chartsModelCache = models\r\n    //     this.chartsWrapper = createDivElement({class: \"charts\"})\r\n    //     this.exportChartsButton = this.createExportButton(this.chartsWrapper, \"Экспортировать диаграммы в .jpeg?\",\r\n    //         () => this.exportCharts())\r\n    //     this.core.insertAdjacentElement(\"afterbegin\", this.chartsWrapper)\r\n    //     this.charts = models.map(model => new Chart({target: this.chartsWrapper, position: \"beforeend\"}, model))\r\n    //     return this.charts\r\n    // }\r\n\r\n    // toggleCharts(){\r\n    //     if(!!this.chartsWrapper) {\r\n    //         this.chartsWrapper.remove()\r\n    //         this.chartsWrapper = undefined\r\n    //     } else\r\n    //         this.createCharts()\r\n    // }\r\n\r\n    get collapsed(): typeof this._collapsed{\r\n        return this._collapsed\r\n    }\r\n\r\n    set collapsed(collapsed: typeof this._collapsed){\r\n        this._collapsed = collapsed\r\n        if(collapsed)\r\n            emptyElement(this.root)\r\n        else\r\n            this.setReport(this.cache)\r\n    }\r\n\r\n    collapse=() => this.collapsed = true\r\n    expand=() => this.collapsed = false\r\n\r\n    reset(){\r\n        this.cache = undefined\r\n        emptyElement(this.root)\r\n    }\r\n\r\n    // private exportCharts(){\r\n    //     this.exportChartsButton.hide()\r\n    //     domtoimage.toJpeg(this.chartsWrapper)\r\n    //         .then((dataUrl) => {\r\n    //             const link = document.createElement(\"a\")\r\n    //             link.download = \"charts.jpeg\"\r\n    //             link.href = dataUrl\r\n    //             link.click()\r\n    //             link.remove()\r\n    //         })\r\n    //         .finally(() => {\r\n    //             this.exportChartsButton.show()\r\n    //         })\r\n    // }\r\n}","import {Head} from \"./Head\"\r\nimport {Body} from \"./Body\"\r\nimport {resolveStyle} from \"../../util/resolver\"\r\nimport {popupMessage} from \"../../util/modal\"\r\nimport {scrollIntoElement} from \"../../util/domWizard\"\r\nimport {InlineFragment} from \"../InlineFragment\"\r\nimport {ForgedApplication} from \"../applicatons/ForgedApplication\";\r\nimport Form from \"../form/Form\";\r\n\r\nresolveStyle(\"report\")\r\n\r\nexport default class ReportSlot extends InlineFragment<ForgedApplication>{\r\n\r\n    readonly head = new Head(this, this.config.title)\r\n    readonly body = new Body(this)\r\n\r\n    associatedFormSnapshot: Form\r\n    reportModelCache: ReportModel\r\n\r\n    constructor(parent: ForgedApplication, readonly config: ReportSlotConfig) {\r\n        super(parent, `<div class=\"report\"></div>`)\r\n    }\r\n\r\n    applyReport(model: ReportModel, associatedFormSnapshot: Form){\r\n\r\n        this.associatedFormSnapshot = associatedFormSnapshot\r\n\r\n        this.reportModelCache = model\r\n\r\n        this.head.setTitleOrDefault(model.title)\r\n        this.head.showButtons()\r\n        this.body.setReport(model)\r\n\r\n        if(!model.data || model.data.length === 0)\r\n            popupMessage(\"Отчёт пуст\", \"Отсутствуют подходящие данные\")\r\n        else\r\n            scrollIntoElement(this.root)\r\n    }\r\n}","import Header from \"../main/Header\"\r\nimport {resolveStyle} from \"../../util/resolver\"\r\nimport {Fragment} from \"../Fragment\"\r\nimport {appInfo} from \"../../store/appInfo\"\r\nimport Form from \"../form/Form\";\r\nimport {appConfig} from \"../../store/appConfig\";\r\nimport {NavigationContainer} from \"../navigation/NavigationContainer\"\r\nimport {Report} from \"../../api/Report\"\r\nimport ReportSlot from \"../report/ReportSlot\"\r\n\r\n// Must be loaded only once\r\nconst cssPromises = Promise.all([\r\n    resolveStyle(\"global\"),\r\n    resolveStyle(\"navigation\"),\r\n    resolveStyle(\"inputs\"),\r\n    resolveStyle(\"states\"),\r\n    resolveStyle(\"third-party/animate\"),\r\n    resolveStyle(\"misc\")\r\n])\r\n\r\nexport class ForgedApplication extends Fragment {\r\n\r\n    readonly header = new Header()\r\n\r\n    readonly formContainer: NavigationContainer = new NavigationContainer()\r\n\r\n    readonly reportSlots: Map<string, ReportSlot> = new Map()\r\n\r\n    constructor(root = document.body) {\r\n        super(root)\r\n        this.hide()\r\n        cssPromises.then(() => this.show())\r\n        this.append(this.header, this.formContainer)\r\n\r\n        // Applying appInfo\r\n        document.title = appInfo.name\r\n        this.header.setAppInfo(appInfo)\r\n        let firstTabTitle: string\r\n\r\n        // Determining forms and slots\r\n        for (const key in appConfig) {\r\n            let config\r\n            if(key.endsWith(\"Form\")) {\r\n                config = appConfig[key] as FormConfig\r\n                firstTabTitle = firstTabTitle ? firstTabTitle : config.title\r\n                this.formContainer.createTab(config.title,\r\n                    () => this.selectSlotsAssociatedWithForm(key),\r\n                    this.createForm(config)\r\n                )\r\n            } else if(key.endsWith(\"Slot\")) {\r\n                config = appConfig[key] as ReportSlotConfig\r\n                const reportSlot = new ReportSlot(this, config)\r\n                this.reportSlots.set(key, reportSlot)\r\n                if(config.associatedWith)\r\n                    reportSlot.hide()\r\n            }\r\n        }\r\n        // Pick the first tab\r\n        this.formContainer.pickTab(firstTabTitle)\r\n    }\r\n\r\n    private createForm(config: FormConfig) : Form{\r\n        const reportAccessor = new Report(config.submitPath)\r\n        const form = new Form(config)\r\n        form.onSubmit = (jsonValues, prettyValues) => {\r\n            form.submitButton.disable()\r\n            const formSnapshot = form\r\n            reportAccessor.fetch(jsonValues).then(reportModel => {\r\n                this.reportSlots.get(reportModel.slot)?.applyReport(reportModel as ReportModel, formSnapshot)\r\n                form.submitButton.enable()\r\n            })\r\n        }\r\n        return form\r\n    }\r\n\r\n    private selectSlotsAssociatedWithForm(formKey: string){\r\n        Array.from(this.reportSlots.values()).forEach(slot => {\r\n            if(slot.config.associatedWith === formKey || !slot.config.associatedWith)\r\n                slot.show()\r\n            else\r\n                slot.hide()\r\n        })\r\n    }\r\n}"],"names":["Fragment","constructor","root","this","HTMLElement","create","append","items","forEach","item","select","selectors","querySelector","selectAll","querySelectorAll","hidden","hide","style","display","show","remove","addClass","tokens","classList","add","removeClass","toggleClass","force","toggle","hasClass","token","contains","className","listen","event","onEvent","addEventListener","onMount","callback","observer","MutationObserver","mutationsList","mutation","target","disconnect","observe","document","documentElement","childList","subtree","Button","config","onClick","super","enable","isAvailable","disable","text","image","hint","preventDefault","available","getAttribute","setAttribute","textContent","src","_a","imageElement","resolveStyle","Header","groupLink","appName","resetButton","location","reload","infoButton","showAppInfo","helpButton","showHelpDownloader","setAppInfo","appInfo","href","groupPath","groupName","name","popupList","icon","version","valueOrDefault","appConfig","info","updateDate","technologistName","_b","additional","popupAction","description","downloadUserManual","helpPath","link","createElement","body","appendChild","click","removeChild","defaultDateTime","DateTime","Datepicker","pickDateRange","range","easepick","setStartDate","setEndDate","setDate","onPick","pickedDateRange","easepickDetailToDateRange","date","start","end","inputElement","createPicker","dateRange","core","onSelect","element","calendars","grid","zIndex","plugins","RangePlugin","AmpPlugin","LockPlugin","lang","startDate","endDate","locale","one","few","many","delimiter","darkMode","dropdown","minYear","maxYear","months","years","minDays","maxDays","css","setup","picker","on","e","detail","setTimeout","stringifyDate","InlineFragment","parent","Field","triggerValueChange","newValue","value","onValueChangeCallbacks","jsonValue","jsonify","prettyValue","prettify","makeValid","makeInvalid","onValueChange","push","createParagraph","initValue","content","type","size","label","DatepickerField","section","calendar","Checkbox","onToggle","checkboxElement","checked","Switch","SwitchField","toggled","virtualSelectModulePromise","resolveModule","Select","pickedKeys","modulePromise","options","Map","findOptions","keys","map","key","get","then","applyVirtualSelect","currentTarget","length","sort","toString","updateOptions","compareMaps","pickedKeysBuffer","setOptions","mapToVirtualSelectOptions","pickOptions","reset","blur","setValue","VirtualSelect","init","ele","additionalClasses","disabled","autofocus","markSearchResults","optionsCount","multiple","search","hasOptionDescription","showCodes","disableSelectAll","maxValues","maxWidth","position","disableAllOptionsSelectedText","placeholder","noOptionsText","noSearchResultsText","selectAllText","searchPlaceholderText","optionsSelectedText","optionSelectedText","allOptionsSelectedText","clearButtonText","moreText","entries","entry","alias","SelectField","optionKeys","staticOptions","serviceBankOptions","awaitingForServiceBankOptions","selectFragment","setStaticOptions","setupServiceBank","initValues","setupServiceBankRetrieving","userAssociatedOptionKeys","concatMaps","form","onFetch","sourceFields","propertiesTriggerKeys","findFields","Array","from","Object","values","optionsAccessor","createServiceBankAccessor","subscribeToFields","properties","assign","sourceField","json","fetch","accessor","CarriersServiceBank","CountriesServiceBank","RegionsServiceBank","RoadsServiceBank","StationsServiceBank","Error","fieldsMap","onChange","runAfter","field","OptionsRetrievingQuery","TextArea","shiftIsPressed","insertTab","onInputEnter","trimEnd","innerText","str","getSelection","selection","getRangeAt","rangeCount","deleteContents","insertNode","createTextNode","collapseToEnd","TextField","textInput","Section","gridLayout","fields","getField","fieldKey","title","endsWith","set","createField","FormStatementAccessor","JsonAccessor","method","errorFooter","trigger","params","Form","onSubmit","layout","sections","submitButton","submitText","jsonFieldValues","prettyFieldValues","startValidating","statementPath","startStatementRetrieving","validateFields","jsonifyFields","fieldLocations","statementAccessor","manageFieldsStatement","path","statement","currentStatement","jsonToMap","setValues","find","undefined","includes","wrong","wrongFieldKey","NavigationBar","tabs","tabButtons","tabActions","tabTitle","tabAction","button","tabButton","pick","NavigationBody","NavigationContainer","naviBar","naviBodies","createTab","naviBody","pickTab","Report","Head","reportSlot","titleElement","toTopButton","createToTopButton","exportButton","createXlsxExportButton","collapseButton","createCollapseButton","fullscreenButton","createFullscreenButton","originTitleText","hideButtons","showButtons","scrollIntoElement","popupTimeoutAction","table","xlsxAccessor","createToggleableButton","collapse","chartsButton","expand","defaultConfig","toggleFullscreen","fullscreenMode","getFullscreenElement","setTitleOrDefault","configA","configB","onClickA","onClickB","TextInput","onInput","textInputElement","BlobAccessor","Accessor","request","requestInit","blob","XlsxAccessor","aElement","URL","createObjectURL","revokeObjectURL","executeFormulaForRowData","formula","row","totalRow","matrix","eval","Table","data","colFeatures","model","filtersMap","thead","tbody","tfoot","head","appendData","context","visibleValues","header","getCompleteRowsFromElement","total","addScrollHelper","emptyElement","innerHTML","cellText","join","totalRowData","rowData","cellData","cellIndex","feature","numberOf","applyFeaturesToRowData","createHtmlRowText","groupPrimaryCells","spanTotalPrimaryCells","index","replaceWithLabels","associatedFormSnapshot","fieldValue","createHtmlCellText","primaryColumnsNumber","colored","applyFilter","htmlHeadCell","getCellIndexWithSpans","filtrateTableMap","tableMap","filterMap","valueCells","primaryCells","cellTexts","concat","v","String","i","filterText","toLowerCase","td","colSpan","startHtmlRow","endHtmlRow","nesting","htmlRowMarshall","lastPrimaryCell","marshallNextNesting","groupedColumnsNumber","parentElement","nextElementSibling","currentPrimaryCell","cells","rowSpan","mouseIsInside","Math","round","getClientRects","top","targetCell","result","rows","cell","rowIndex","colIndex","console","log","j","l","k","tr","tc","trim","colspan","rowspan","Context","contextString","Body","_collapsed","collapsed","setReport","cache","dataFeatures","ReportSlot","applyReport","reportModelCache","popupMessage","cssPromises","Promise","all","ForgedApplication","firstTabTitle","formContainer","reportSlots","selectSlotsAssociatedWithForm","createForm","associatedWith","reportAccessor","submitPath","jsonValues","prettyValues","formSnapshot","reportModel","slot","formKey"],"mappings":"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"}