import {setAppConfig} from "./store/appConfig"
import {ForgedApplication} from "./fragments/applicatons/ForgedApplication"

setAppConfig({
    code: "SUBURB",
    salesForm: {
        title: "–û—Ç—á—ë—Ç –ø–æ –∏—Ç–æ–≥–∞–º –ø—Ä–æ–¥–∞–∂ –ø–æ –ø—Ä–∏–≥–æ—Ä–æ–¥—É",
        periodSection: {
            dateField: {
                type: "datepicker",
                range: true,
                label: "–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂"
            }
        },
        salesSection: {
            carriersField: {
                label: "–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫",
                type: "select",
                search: true
            },
            roadsField: {
                label: "–î–æ—Ä–æ–≥–∞ –ø—Ä–æ–¥–∞–∂–∏",
                type: "select",
                search: true
            },
            regionsField: {
                label: "–°—É–±—ä–µ–∫—Ç –ø—Ä–æ–¥–∞–∂–∏",
                type: "select",
                search: true
            }
        },
        toggleSection: {
            switchField: {
                type: "switch",
                label: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
            },
            textField: {
                type: "text",
                label: "–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"
            }
        },
        additionalSection: {
            calculationTypeField: {
                type: "select",
                label: "–í–∏–¥ —Ä–∞—Å—á—ë—Ç–∞",
                size: 3
            },
            travelTypesField: {
                type: "select",
                multiple: true,
                label: "–í–∏–¥—ã –ø—Ä–æ–µ–∑–¥–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                size: 2
            },
            shippingTypesField: {
                type: "select",
                multiple: true,
                label: "–í–∏–¥—ã –ø–µ—Ä–µ–≤–æ–∑–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            },
            operationTypeField: {
                type: "select",
                label: "–í–∏–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏"
            }
        },
        // gridLayout: "vertical",
        submitText: "üîçÔ∏é –ü–æ–∏—Å–∫",
        submitPath: "sales/report"
    },
    departuresForm: {
        title: "–û—Ç—á—ë—Ç –ø–æ –∏—Ç–æ–≥–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –ø—Ä–∏–≥–æ—Ä–æ–¥—É",
        periodSection: {
            dateField: {
                type: "datepicker",
                range: true,
                label: "–ü–µ—Ä–∏–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            }
        },
        departuresSection: {
            carriersField: {
                label: "–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫",
                type: "select",
                search: true
            },
            roadsField: {
                label: "–î–æ—Ä–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                type: "select",
                search: true
            }
        },
        toggleSection: {
            switchField: {
                type: "switch",
                label: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
            }
        },
        additionalSection: {
            trainCategoryField: {
                type: "select",
                label: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–µ–∑–¥–∞"
            }
        },
        gridLayout: "horizontal",
        submitText: "üîçÔ∏é –ü–æ–∏—Å–∫",
        submitPath: "departures/report",
    },
    reportSlot: {
        title: "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞"
    }
})

const app = new ForgedApplication()

app.reportSlots.get("reportSlot").applyReport({
    title: "Debug",
    data: createTableData(3, 4, 500).sort((a, b) => {
        return [a[0], a[1]] >[b[0], b[1]] ? 1 : 0
    }),
    dataFeatures: [
        {type: "text"},
        {type: "text"},
        {type: "text"},
        {type: "numeric", colored: true},
        {type: "numeric"},
        {type: "numeric"},
        {type: "numeric"}
    ],
    table: {
        head: ["A", "B", "C", "D", "E", "F", "G"],
        primaryColumnsNumber: 3,
        groupedColumnsNumber: 3
    },
    context: {
        "–ü–æ–ª–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ 1": "none",
        "–ü–æ–ª–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ 2": "none",
        "–ü–æ–ª–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ 3": "none"
    }
}, {

}
)

function createTableData(primaryCellsSize: number, valueCellsSize: number, tableHeight: number): MatrixData {
    const tableData: MatrixData = []
    for(let i : number = 0; i < tableHeight; i++){
        const primaryCells: string[] = [];
        for(let j : number = 0; j < primaryCellsSize; j++) {
            primaryCells[j] = randomWord()
        }
        const valueCells: number[] = []
        for(let j : number = 0; j < valueCellsSize; j++)
            valueCells[j] = Math.floor(Math.random()*1000);
        tableData[i] = [...primaryCells, ...valueCells]
    }
    return tableData
}

function randomWord():string {
    const words :string [] = ['–í–∞—Ö—Ç–∞','–í–∞–∫—Ü–∏–Ω–∞','–û—Ç–µ—á–µ—Å—Ç–≤–æ','–í–ª–∞–¥–µ–Ω–∏—è','–û–≤—Ü–∞','–†–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        '–†–∞–Ω–∞','–û–ø–∞—Å–Ω–æ—Å—Ç—å','–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ','–ö–æ–º–º–µ—Ä—Ü–∏—è','–ó–≤–∞–Ω–∏–µ','–ù–∞—á–∞–ª–æ','–ò–Ω—Å—Ç–∏—Ç—É—Ç',
        '–ü—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–µ','–ò–∫–æ–Ω–∞','–ü–æ–ª–Ω–æ—Ç–∞','–ö–æ–Ω—Å–µ—Ä–≤–∞','–î–æ—Å—Ç–∞–≤–∫–∞','–ê–¥–º–∏—Ä–∞–ª','–ê—Å—Å–∞–º–±–ª–µ—è',
        '–ò–∑–±—ã—Ç–æ–∫','–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç','–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ','–ú—ã—à—Ü—ã','–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ','–û—Ç–∑—ã–≤','–ù–∞—Ç—É—Ä–∞',
        '–î–∏—Å–∫–æ—Ç–µ–∫–∞','–ú–æ–Ω–∞—Ö–∏–Ω—è'];
    return words[Math.floor(Math.random()*(words.length-1))];
}